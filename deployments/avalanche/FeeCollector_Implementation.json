{
  "address": "0xF439fd56D856D03aa740Dd1C417519ff6301f128",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_defaultFundPaused",
          "type": "bool"
        }
      ],
      "name": "DefaultFundPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromDefaultFund",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collectedAmount",
          "type": "uint256"
        }
      ],
      "name": "FeeCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defaultFundsDelta",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFeesDelta",
          "type": "uint256"
        }
      ],
      "name": "FeeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "fromDefaultFund",
          "type": "bool"
        }
      ],
      "name": "collectAllFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "specifiedAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "fromDefaultFund",
          "type": "bool"
        }
      ],
      "name": "collectFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "defaultFundsDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFeesDelta",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "distributeAllFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "distributeFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "defaultFundsDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFeesDelta",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getDefaultFund",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getProtocolFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_defaultFundPaused",
          "type": "bool"
        }
      ],
      "name": "setDefaultFundPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6285062fe38c4cfb53f8fa38ae1919fe62ce1150624c8e3a9ea05d0936863a85",
  "receipt": {
    "to": null,
    "from": "0xF8F6B70a36f4398f0853a311dC6699Aba8333Cc1",
    "contractAddress": "0xF439fd56D856D03aa740Dd1C417519ff6301f128",
    "transactionIndex": 4,
    "gasUsed": "1334012",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000080000000400000020000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x0ba7c8aded0d4db4612ed175c9d00ba0f66d3681e2940dc88eebc93c8c53f38c",
    "transactionHash": "0x6285062fe38c4cfb53f8fa38ae1919fe62ce1150624c8e3a9ea05d0936863a85",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 33191016,
        "transactionHash": "0x6285062fe38c4cfb53f8fa38ae1919fe62ce1150624c8e3a9ea05d0936863a85",
        "address": "0xF439fd56D856D03aa740Dd1C417519ff6301f128",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 18,
        "blockHash": "0x0ba7c8aded0d4db4612ed175c9d00ba0f66d3681e2940dc88eebc93c8c53f38c"
      }
    ],
    "blockNumber": 33191016,
    "cumulativeGasUsed": "2178804",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c2dca07d1c547af73c49d26a98745b96",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_defaultFundPaused\",\"type\":\"bool\"}],\"name\":\"DefaultFundPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromDefaultFund\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectedAmount\",\"type\":\"uint256\"}],\"name\":\"FeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defaultFundsDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFeesDelta\",\"type\":\"uint256\"}],\"name\":\"FeeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"fromDefaultFund\",\"type\":\"bool\"}],\"name\":\"collectAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"specifiedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"fromDefaultFund\",\"type\":\"bool\"}],\"name\":\"collectFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFundsDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeesDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"distributeAllFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"distributeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"defaultFundsDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeesDelta\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getDefaultFund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getProtocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_defaultFundPaused\",\"type\":\"bool\"}],\"name\":\"setDefaultFundPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"collectFees(address,uint256,bool)\":{\"params\":{\"amount\":\"Amount to be sent to owner\",\"asset\":\"Token address of asset that is transferred\",\"fromDefaultFund\":\"Flags the source of the funds\"},\"returns\":{\"defaultFundsDelta\":\"delta amount subtracted from the default fund\",\"protocolFeesDelta\":\"delta amounts subtracted from the protocol fee fund\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"distributeFees(address)\":{\"details\":\"Funds are allocated as such: 50% to default fund (if the fund is not paused) and the rest to protocol fees\",\"params\":{\"asset\":\"Token address of interest\"},\"returns\":{\"defaultFundsDelta\":\"delta amount added to the default fund\",\"protocolFeesDelta\":\"delta amounts added to the protocol fee fund\"}},\"getDefaultFund(address)\":{\"params\":{\"asset\":\"Token address of interest\"}},\"getProtocolFees(address)\":{\"params\":{\"asset\":\"Token address of interest\"}},\"initialize()\":{\"details\":\"\\\"constructor\\\" for proxy instances\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"ENTIRE_BALANCE\":{\"details\":\"Used for identifying cases when the entire fund's balance is to be used as an input This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"collectAllFees(address[],bool)\":{\"notice\":\"Transfers the entire fund balance in the given assets to owner\"},\"collectFees(address,uint256,bool)\":{\"notice\":\"Transfers the specified amount in given asset to the owner\"},\"distributeAllFees(address[])\":{\"notice\":\"Allocated the entire contract's balance in spefied assets to the default fund and the protocol fees\"},\"distributeFees(address)\":{\"notice\":\"Allocated the contract's balance to the default fund and the protocol fees\"},\"getDefaultFund(address)\":{\"notice\":\"Returns the total value of the default fund\"},\"getProtocolFees(address)\":{\"notice\":\"Returns the total value of protocol fees\"},\"setDefaultFundPaused(bool)\":{\"notice\":\"Pauses/Restarts the accumulation of default funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FeeCollector.sol\":\"FeeCollector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"contracts/FeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./storage/FeeCollectorStorage.sol\\\";\\nimport \\\"./interfaces/IFeeCollector.sol\\\";\\nimport \\\"./interfaces/IERC20Minimal.sol\\\";\\nimport \\\"./core_libraries/SafeTransferLib.sol\\\";\\n\\ncontract FeeCollector is\\n    FeeCollectorStorage,\\n    IFeeCollector,\\n    Initializable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    using SafeTransferLib for IERC20Minimal;\\n\\n    /// @dev Used for identifying cases when the entire fund's balance is to be used as an input\\n    /// This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit.\\n    uint256 internal constant ENTIRE_BALANCE = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    function initialize() external override initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    // To authorize the owner to upgrade the contract we implement _authorizeUpgrade with the onlyOwner modifier.\\n    // ref: https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /// @inheritdoc IFeeCollector\\n    function distributeFees(address asset) public override onlyOwner returns (uint256 defaultFundsDelta, uint256 protocolFeesDelta) {\\n        uint256 distributionAmount =\\n            IERC20Minimal(asset).balanceOf(address(this)) - protocolFees[asset] - defaultFund[asset];\\n        if ( defaultFundPaused ) {\\n            protocolFeesDelta = distributionAmount;\\n            protocolFees[asset] += protocolFeesDelta;\\n        } else {\\n            defaultFundsDelta = distributionAmount/2 + distributionAmount%2;\\n            protocolFeesDelta = distributionAmount/2;\\n\\n            defaultFund[asset] += defaultFundsDelta;\\n            protocolFees[asset] += protocolFeesDelta;\\n        }\\n        emit FeeDistributed(asset, defaultFundsDelta, protocolFeesDelta);\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function distributeAllFees(address[] memory assets) external override onlyOwner {\\n        for(uint256 i = 0; i < assets.length; i++) {\\n            distributeFees(assets[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function collectAllFees(address[] memory assets, bool fromDefaultFund) external override onlyOwner {\\n        for(uint256 i = 0; i < assets.length; i++) {\\n            collectFees(assets[i], ENTIRE_BALANCE, fromDefaultFund);\\n        }\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function setDefaultFundPaused(bool _defaultFundPaused) external override onlyOwner {\\n        defaultFundPaused = _defaultFundPaused;\\n        emit DefaultFundPaused(_defaultFundPaused);\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function collectFees(address asset, uint256 specifiedAmount, bool fromDefaultFund) public override onlyOwner returns (uint256 defaultFundsDelta, uint256 protocolFeesDelta) {\\n        uint256 amount = specifiedAmount == ENTIRE_BALANCE ? \\n            (fromDefaultFund ? defaultFund[asset] : protocolFees[asset]) :\\n            specifiedAmount;\\n\\n        if (fromDefaultFund) {\\n            defaultFundsDelta = amount;\\n            defaultFund[asset] -= defaultFundsDelta;\\n        } else {\\n            protocolFeesDelta = amount;\\n            protocolFees[asset] -= protocolFeesDelta;\\n        }\\n        IERC20Minimal(asset).safeTransfer(msg.sender, amount);\\n\\n        emit FeeCollected(asset, fromDefaultFund, amount);\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function getDefaultFund(address asset) external view override returns (uint256) {\\n        return defaultFund[asset];\\n    }\\n\\n    /// @inheritdoc IFeeCollector\\n    function getProtocolFees(address asset) external view override returns (uint256) {\\n        return protocolFees[asset];\\n    }\\n\\n}\\n\",\"keccak256\":\"0x2553dc17e0c23aadb54c31cf22c89b7580a70cef59b8a657e0880f443f0d606d\",\"license\":\"Apache-2.0\"},\"contracts/core_libraries/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol & utils/Address.sol)\\npragma solidity =0.8.9;\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\n\\n/**\\n * @title SafeERC20Lib\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeTransferLib for IERC20Minimal;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeTransferLib {\\n    function safeTransfer(\\n        IERC20Minimal token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Minimal token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    // /**\\n    //  * @dev Deprecated. This function has issues similar to the ones found in\\n    //  * {IERC20Minimal-approve}, and its usage is discouraged.\\n    //  *\\n    //  * Whenever possible, use {safeIncreaseAllowance} and\\n    //  * {safeDecreaseAllowance} instead.\\n    //  */\\n    // function safeApprove(\\n    //     IERC20Minimal token,\\n    //     address spender,\\n    //     uint256 value\\n    // ) internal {\\n    //     // safeApprove should only be called when setting an initial allowance,\\n    //     // or when resetting it to zero. To increase and decrease it, use\\n    //     // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    //     require(\\n    //         (value == 0) || (token.allowance(address(this), spender) == 0),\\n    //         \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    //     );\\n    //     _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    // }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Minimal token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeIncreaseAllowanceTo(\\n        IERC20Minimal token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 allowance = token.allowance(address(this), spender);\\n        if (allowance < value) {\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(token.approve.selector, spender, value)\\n            );\\n        }\\n    }\\n\\n    // function safeDecreaseAllowance(\\n    //     IERC20Minimal token,\\n    //     address spender,\\n    //     uint256 value\\n    // ) internal {\\n    //     unchecked {\\n    //         uint256 oldAllowance = token.allowance(address(this), spender);\\n    //         require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n    //         uint256 newAllowance = oldAllowance - value;\\n    //         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    //     }\\n    // }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Minimal token, bytes memory data)\\n        private\\n    {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = functionCallWithZeroValue(\\n            address(token),\\n            data,\\n            \\\"STL err\\\"\\n        );\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"STL fail\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithZeroValue(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: 0}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x34b978ea07763d77fede10d38b23c1cf8e2ee6807ad5b89ff4611280f6ab39e0\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\n\\n/// @title Minimal ERC20 interface for Voltz\\n/// @notice Contains a subset of the full ERC20 interface that is used in Voltz\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    // For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5,05 (505 / 10 ** 2).\\n    // Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x02da6860dec48b896db133292b09ec66e3ed67635ed5c0f7d26c6aa14bbcd6e2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\ninterface IFeeCollector {\\n    // Events\\n    event FeeDistributed(\\n        address asset,\\n        uint256 defaultFundsDelta,\\n        uint256 protocolFeesDelta\\n    );\\n    event FeeCollected(\\n        address asset,\\n        bool fromDefaultFund,\\n        uint256 collectedAmount\\n    );\\n    event DefaultFundPaused(bool _defaultFundPaused);\\n\\n    // immutables\\n\\n    /// @notice Allocated the contract's balance to the default fund and the protocol fees\\n    /// @dev Funds are allocated as such: 50% to default fund (if the fund is not paused) and the rest to protocol fees\\n    /// @param asset Token address of interest\\n    /// @return defaultFundsDelta delta amount added to the default fund\\n    /// @return protocolFeesDelta delta amounts added to the protocol fee fund\\n    function distributeFees(address asset)\\n        external\\n        returns (uint256 defaultFundsDelta, uint256 protocolFeesDelta);\\n\\n    /// @notice Allocated the entire contract's balance in spefied assets to the default fund and the protocol fees\\n    function distributeAllFees(address[] memory assets) external;\\n\\n    /// @notice Transfers the specified amount in given asset to the owner\\n    /// @param asset Token address of asset that is transferred\\n    /// @param amount Amount to be sent to owner\\n    /// @param fromDefaultFund Flags the source of the funds\\n    /// @return defaultFundsDelta delta amount subtracted from the default fund\\n    /// @return protocolFeesDelta delta amounts subtracted from the protocol fee fund\\n    function collectFees(\\n        address asset,\\n        uint256 amount,\\n        bool fromDefaultFund\\n    ) external returns (uint256 defaultFundsDelta, uint256 protocolFeesDelta);\\n\\n    /// @notice Transfers the entire fund balance in the given assets to owner\\n    function collectAllFees(address[] memory assets, bool fromDefaultFund)\\n        external;\\n\\n    /// @notice Pauses/Restarts the accumulation of default funds\\n    function setDefaultFundPaused(bool _defaultFundPaused) external;\\n\\n    /// @dev \\\"constructor\\\" for proxy instances\\n    function initialize() external;\\n\\n    // non-view functions\\n\\n    /// @notice Returns the total value of the default fund\\n    /// @param asset Token address of interest\\n    function getDefaultFund(address asset) external view returns (uint256);\\n\\n    /// @notice Returns the total value of protocol fees\\n    /// @param asset Token address of interest\\n    function getProtocolFees(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x09323c064abe062646a01c0ae7b36714e32ea1e432ee7fe07129d0819a1e071e\",\"license\":\"Apache-2.0\"},\"contracts/storage/FeeCollectorStorage.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\ncontract FeeCollectorStorageV1 {\\n    // Any variables that would implicitly implement an IMarginEngine function if public, must instead\\n    // be internal due to limitations in the solidity compiler (as of 0.8.12)\\n    mapping(address => uint256) internal defaultFund;\\n    mapping(address => uint256) internal protocolFees;\\n    bool internal defaultFundPaused;\\n}\\n\\ncontract FeeCollectorStorage is FeeCollectorStorageV1 {\\n    // Reserve some storage for use in future versions, without creating conflicts\\n    // with other inheritted contracts\\n    uint256[47] private __gap; // total storage = 50 slots, including structs\\n}\\n\",\"keccak256\":\"0xd6c2f50ba6fe31895ad56b15e8335aa93c5bf47b10cb67090807024351003a94\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b50603254610100900460ff1615808015620000375750603254600160ff909116105b8062000067575062000054306200014160201b62000a941760201c565b15801562000067575060325460ff166001145b620000cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6032805460ff191660011790558015620000f3576032805461ff0019166101001790555b80156200013a576032805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5062000150565b6001600160a01b03163b151590565b6080516116aa620001886000396000818161034d015281816103960152818161055501528181610595015261061101526116aa6000f3fe6080604052600436106100ad5760003560e01c80630e56357f146100b2578063146b0b60146100fb578063342088bc1461011d5780633659cfe61461013d578063384411261461015d5780634f1ef2861461019257806352d1902d146101a5578063715018a6146101ba5780638129fc1c146101cf5780638da5cb5b146101e45780639413f25c14610206578063e2975c1d14610226578063f27dd8ab14610246578063f2fde38b1461027c575b600080fd5b3480156100be57600080fd5b506100e86100cd366004611151565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b34801561010757600080fd5b5061011b61011636600461117a565b61029c565b005b34801561012957600080fd5b5061011b610138366004611263565b6102ec565b34801561014957600080fd5b5061011b610158366004611151565b610342565b34801561016957600080fd5b5061017d6101783660046112b4565b610414565b604080519283526020830191909152016100f2565b61011b6101a03660046112f4565b61054a565b3480156101b157600080fd5b506100e8610604565b3480156101c657600080fd5b5061011b6106b2565b3480156101db57600080fd5b5061011b6106c6565b3480156101f057600080fd5b506101f96107df565b6040516100f29190611399565b34801561021257600080fd5b5061017d610221366004611151565b6107ee565b34801561023257600080fd5b5061011b6102413660046113ad565b6109d3565b34801561025257600080fd5b506100e8610261366004611151565b6001600160a01b031660009081526001602052604090205490565b34801561028857600080fd5b5061011b610297366004611151565b610a1e565b6102a4610aa3565b6002805460ff19168215159081179091556040519081527f915eb32c822daa6252d6e90e20c9b3570154bf2def8003d4355d1f867cbf1273906020015b60405180910390a150565b6102f4610aa3565b60005b825181101561033d57610328838281518110610315576103156113e9565b6020026020010151600160ff1b84610414565b5050808061033590611415565b9150506102f7565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103945760405162461bcd60e51b815260040161038b90611430565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103c6610b02565b6001600160a01b0316146103ec5760405162461bcd60e51b815260040161038b9061146a565b6103f581610b1e565b6040805160008082526020820190925261041191839190610b26565b50565b60008061041f610aa3565b6000600160ff1b8514610432578461046f565b83610455576001600160a01b03861660009081526001602052604090205461046f565b6001600160a01b0386166000908152602081905260409020545b905083156104af576001600160a01b0386166000908152602081905260408120805492945084928392906104a49084906114a4565b909155506104e29050565b6001600160a01b0386166000908152600160205260408120805492935083928392906104dc9084906114a4565b90915550505b6104f66001600160a01b0387163383610ca0565b604080516001600160a01b038816815285151560208201529081018290527f7c79f7e2d6a937218f79ecfcfa53746a3a6b942a3ac07439b606d982eb2fa6f09060600160405180910390a150935093915050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105935760405162461bcd60e51b815260040161038b90611430565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105c5610b02565b6001600160a01b0316146105eb5760405162461bcd60e51b815260040161038b9061146a565b6105f482610b1e565b61060082826001610b26565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461069f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b606482015260840161038b565b5060008051602061162e83398151915290565b6106ba610aa3565b6106c46000610cf2565b565b603254610100900460ff16158080156106e65750603254600160ff909116105b8061070757506106f530610a94565b158015610707575060325460ff166001145b61076a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161038b565b6032805460ff19166001179055801561078d576032805461ff0019166101001790555b610795610d44565b61079d610d73565b8015610411576032805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102e1565b6065546001600160a01b031690565b6000806107f9610aa3565b6001600160a01b0383166000818152602081815260408083205460019092528083205490516370a0823160e01b8152929391929091906370a0823190610843903090600401611399565b60206040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089391906114bb565b61089d91906114a4565b6108a791906114a4565b60025490915060ff16156108ed576001600160a01b0384166000908152600160205260408120805492935083928392906108e29084906114d4565b909155506109839050565b6108f8600282611502565b610903600283611516565b61090d91906114d4565b925061091a600282611516565b915082600080866001600160a01b03166001600160a01b03168152602001908152602001600020600082825461095091906114d4565b90915550506001600160a01b0384166000908152600160205260408120805484929061097d9084906114d4565b90915550505b604080516001600160a01b0386168152602081018590529081018390527f891d4da69faf2cf5f9b5a4bceeeba1909237ad5d6222ebe54fbcab15067f8e689060600160405180910390a150915091565b6109db610aa3565b60005b815181101561060057610a098282815181106109fc576109fc6113e9565b60200260200101516107ee565b50508080610a1690611415565b9150506109de565b610a26610aa3565b6001600160a01b038116610a8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161038b565b61041181610cf2565b6001600160a01b03163b151590565b33610aac6107df565b6001600160a01b0316146106c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038b565b60008051602061162e833981519152546001600160a01b031690565b610411610aa3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b595761033d83610d9a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9257600080fd5b505afa925050508015610bc2575060408051601f3d908101601f19168201909252610bbf918101906114bb565b60015b610c255760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161038b565b60008051602061162e8339815191528114610c945760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161038b565b5061033d838383610e34565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261033d908490610e5f565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b603254610100900460ff16610d6b5760405162461bcd60e51b815260040161038b9061152a565b6106c4610ee0565b603254610100900460ff166106c45760405162461bcd60e51b815260040161038b9061152a565b610da381610a94565b610e055760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161038b565b60008051602061162e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610e3d83610f10565b600082511180610e4a5750805b1561033d57610e598383610f50565b50505050565b6000610e8b83836040518060400160405280600781526020016629aa261032b93960c91b815250611042565b80519091501561033d5780806020019051810190610ea99190611575565b61033d5760405162461bcd60e51b815260206004820152600860248201526714d5130819985a5b60c21b604482015260640161038b565b603254610100900460ff16610f075760405162461bcd60e51b815260040161038b9061152a565b6106c433610cf2565b610f1981610d9a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610f5b83610a94565b610fb65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161038b565b600080846001600160a01b031684604051610fd191906115be565b600060405180830381855af49150503d806000811461100c576040519150601f19603f3d011682016040523d82523d6000602084013e611011565b606091505b5091509150611039828260405180606001604052806027815260200161164e602791396110fc565b95945050505050565b6060833b6110815760405162461bcd60e51b815260206004820152600c60248201526b1b9bdb8b58dbdb9d1c9858dd60a21b604482015260640161038b565b600080856001600160a01b031660008660405161109e91906115be565b60006040518083038185875af1925050503d80600081146110db576040519150601f19603f3d011682016040523d82523d6000602084013e6110e0565b606091505b50915091506110f08282866110fc565b925050505b9392505050565b6060831561110b5750816110f5565b82511561111b5782518084602001fd5b8160405162461bcd60e51b815260040161038b91906115da565b80356001600160a01b038116811461114c57600080fd5b919050565b60006020828403121561116357600080fd5b6110f582611135565b801515811461041157600080fd5b60006020828403121561118c57600080fd5b81356110f58161116c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156111d5576111d5611197565b604052919050565b600082601f8301126111ee57600080fd5b813560206001600160401b0382111561120957611209611197565b8160051b6112188282016111ad565b928352848101820192828101908785111561123257600080fd5b83870192505b848310156112585761124983611135565b82529183019190830190611238565b979650505050505050565b6000806040838503121561127657600080fd5b82356001600160401b0381111561128c57600080fd5b611298858286016111dd565b92505060208301356112a98161116c565b809150509250929050565b6000806000606084860312156112c957600080fd5b6112d284611135565b92506020840135915060408401356112e98161116c565b809150509250925092565b6000806040838503121561130757600080fd5b61131083611135565b91506020838101356001600160401b038082111561132d57600080fd5b818601915086601f83011261134157600080fd5b81358181111561135357611353611197565b611365601f8201601f191685016111ad565b9150808252878482850101111561137b57600080fd5b80848401858401376000848284010152508093505050509250929050565b6001600160a01b0391909116815260200190565b6000602082840312156113bf57600080fd5b81356001600160401b038111156113d557600080fd5b6113e1848285016111dd565b949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611429576114296113ff565b5060010190565b6020808252602c9082015260008051602061160e83398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061160e83398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6000828210156114b6576114b66113ff565b500390565b6000602082840312156114cd57600080fd5b5051919050565b600082198211156114e7576114e76113ff565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611511576115116114ec565b500690565b600082611525576115256114ec565b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561158757600080fd5b81516110f58161116c565b60005b838110156115ad578181015183820152602001611595565b83811115610e595750506000910152565b600082516115d0818460208701611592565b9190910192915050565b60208152600082518060208401526115f9816040850160208701611592565b601f01601f1916919091016040019291505056fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa6adbe8dc2afaa613d78ff857c563e504532ad66132f01f9f1ed30d077b521a64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100ad5760003560e01c80630e56357f146100b2578063146b0b60146100fb578063342088bc1461011d5780633659cfe61461013d578063384411261461015d5780634f1ef2861461019257806352d1902d146101a5578063715018a6146101ba5780638129fc1c146101cf5780638da5cb5b146101e45780639413f25c14610206578063e2975c1d14610226578063f27dd8ab14610246578063f2fde38b1461027c575b600080fd5b3480156100be57600080fd5b506100e86100cd366004611151565b6001600160a01b031660009081526020819052604090205490565b6040519081526020015b60405180910390f35b34801561010757600080fd5b5061011b61011636600461117a565b61029c565b005b34801561012957600080fd5b5061011b610138366004611263565b6102ec565b34801561014957600080fd5b5061011b610158366004611151565b610342565b34801561016957600080fd5b5061017d6101783660046112b4565b610414565b604080519283526020830191909152016100f2565b61011b6101a03660046112f4565b61054a565b3480156101b157600080fd5b506100e8610604565b3480156101c657600080fd5b5061011b6106b2565b3480156101db57600080fd5b5061011b6106c6565b3480156101f057600080fd5b506101f96107df565b6040516100f29190611399565b34801561021257600080fd5b5061017d610221366004611151565b6107ee565b34801561023257600080fd5b5061011b6102413660046113ad565b6109d3565b34801561025257600080fd5b506100e8610261366004611151565b6001600160a01b031660009081526001602052604090205490565b34801561028857600080fd5b5061011b610297366004611151565b610a1e565b6102a4610aa3565b6002805460ff19168215159081179091556040519081527f915eb32c822daa6252d6e90e20c9b3570154bf2def8003d4355d1f867cbf1273906020015b60405180910390a150565b6102f4610aa3565b60005b825181101561033d57610328838281518110610315576103156113e9565b6020026020010151600160ff1b84610414565b5050808061033590611415565b9150506102f7565b505050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103945760405162461bcd60e51b815260040161038b90611430565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103c6610b02565b6001600160a01b0316146103ec5760405162461bcd60e51b815260040161038b9061146a565b6103f581610b1e565b6040805160008082526020820190925261041191839190610b26565b50565b60008061041f610aa3565b6000600160ff1b8514610432578461046f565b83610455576001600160a01b03861660009081526001602052604090205461046f565b6001600160a01b0386166000908152602081905260409020545b905083156104af576001600160a01b0386166000908152602081905260408120805492945084928392906104a49084906114a4565b909155506104e29050565b6001600160a01b0386166000908152600160205260408120805492935083928392906104dc9084906114a4565b90915550505b6104f66001600160a01b0387163383610ca0565b604080516001600160a01b038816815285151560208201529081018290527f7c79f7e2d6a937218f79ecfcfa53746a3a6b942a3ac07439b606d982eb2fa6f09060600160405180910390a150935093915050565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156105935760405162461bcd60e51b815260040161038b90611430565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166105c5610b02565b6001600160a01b0316146105eb5760405162461bcd60e51b815260040161038b9061146a565b6105f482610b1e565b61060082826001610b26565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461069f5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c6044820152771b1959081d1a1c9bdd59da0819195b1959d85d1958d85b1b60421b606482015260840161038b565b5060008051602061162e83398151915290565b6106ba610aa3565b6106c46000610cf2565b565b603254610100900460ff16158080156106e65750603254600160ff909116105b8061070757506106f530610a94565b158015610707575060325460ff166001145b61076a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161038b565b6032805460ff19166001179055801561078d576032805461ff0019166101001790555b610795610d44565b61079d610d73565b8015610411576032805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102e1565b6065546001600160a01b031690565b6000806107f9610aa3565b6001600160a01b0383166000818152602081815260408083205460019092528083205490516370a0823160e01b8152929391929091906370a0823190610843903090600401611399565b60206040518083038186803b15801561085b57600080fd5b505afa15801561086f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089391906114bb565b61089d91906114a4565b6108a791906114a4565b60025490915060ff16156108ed576001600160a01b0384166000908152600160205260408120805492935083928392906108e29084906114d4565b909155506109839050565b6108f8600282611502565b610903600283611516565b61090d91906114d4565b925061091a600282611516565b915082600080866001600160a01b03166001600160a01b03168152602001908152602001600020600082825461095091906114d4565b90915550506001600160a01b0384166000908152600160205260408120805484929061097d9084906114d4565b90915550505b604080516001600160a01b0386168152602081018590529081018390527f891d4da69faf2cf5f9b5a4bceeeba1909237ad5d6222ebe54fbcab15067f8e689060600160405180910390a150915091565b6109db610aa3565b60005b815181101561060057610a098282815181106109fc576109fc6113e9565b60200260200101516107ee565b50508080610a1690611415565b9150506109de565b610a26610aa3565b6001600160a01b038116610a8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161038b565b61041181610cf2565b6001600160a01b03163b151590565b33610aac6107df565b6001600160a01b0316146106c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161038b565b60008051602061162e833981519152546001600160a01b031690565b610411610aa3565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b595761033d83610d9a565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b9257600080fd5b505afa925050508015610bc2575060408051601f3d908101601f19168201909252610bbf918101906114bb565b60015b610c255760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161038b565b60008051602061162e8339815191528114610c945760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161038b565b5061033d838383610e34565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261033d908490610e5f565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b603254610100900460ff16610d6b5760405162461bcd60e51b815260040161038b9061152a565b6106c4610ee0565b603254610100900460ff166106c45760405162461bcd60e51b815260040161038b9061152a565b610da381610a94565b610e055760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161038b565b60008051602061162e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610e3d83610f10565b600082511180610e4a5750805b1561033d57610e598383610f50565b50505050565b6000610e8b83836040518060400160405280600781526020016629aa261032b93960c91b815250611042565b80519091501561033d5780806020019051810190610ea99190611575565b61033d5760405162461bcd60e51b815260206004820152600860248201526714d5130819985a5b60c21b604482015260640161038b565b603254610100900460ff16610f075760405162461bcd60e51b815260040161038b9061152a565b6106c433610cf2565b610f1981610d9a565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610f5b83610a94565b610fb65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161038b565b600080846001600160a01b031684604051610fd191906115be565b600060405180830381855af49150503d806000811461100c576040519150601f19603f3d011682016040523d82523d6000602084013e611011565b606091505b5091509150611039828260405180606001604052806027815260200161164e602791396110fc565b95945050505050565b6060833b6110815760405162461bcd60e51b815260206004820152600c60248201526b1b9bdb8b58dbdb9d1c9858dd60a21b604482015260640161038b565b600080856001600160a01b031660008660405161109e91906115be565b60006040518083038185875af1925050503d80600081146110db576040519150601f19603f3d011682016040523d82523d6000602084013e6110e0565b606091505b50915091506110f08282866110fc565b925050505b9392505050565b6060831561110b5750816110f5565b82511561111b5782518084602001fd5b8160405162461bcd60e51b815260040161038b91906115da565b80356001600160a01b038116811461114c57600080fd5b919050565b60006020828403121561116357600080fd5b6110f582611135565b801515811461041157600080fd5b60006020828403121561118c57600080fd5b81356110f58161116c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156111d5576111d5611197565b604052919050565b600082601f8301126111ee57600080fd5b813560206001600160401b0382111561120957611209611197565b8160051b6112188282016111ad565b928352848101820192828101908785111561123257600080fd5b83870192505b848310156112585761124983611135565b82529183019190830190611238565b979650505050505050565b6000806040838503121561127657600080fd5b82356001600160401b0381111561128c57600080fd5b611298858286016111dd565b92505060208301356112a98161116c565b809150509250929050565b6000806000606084860312156112c957600080fd5b6112d284611135565b92506020840135915060408401356112e98161116c565b809150509250925092565b6000806040838503121561130757600080fd5b61131083611135565b91506020838101356001600160401b038082111561132d57600080fd5b818601915086601f83011261134157600080fd5b81358181111561135357611353611197565b611365601f8201601f191685016111ad565b9150808252878482850101111561137b57600080fd5b80848401858401376000848284010152508093505050509250929050565b6001600160a01b0391909116815260200190565b6000602082840312156113bf57600080fd5b81356001600160401b038111156113d557600080fd5b6113e1848285016111dd565b949350505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611429576114296113ff565b5060010190565b6020808252602c9082015260008051602061160e83398151915260408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c9082015260008051602061160e83398151915260408201526b6163746976652070726f787960a01b606082015260800190565b6000828210156114b6576114b66113ff565b500390565b6000602082840312156114cd57600080fd5b5051919050565b600082198211156114e7576114e76113ff565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611511576115116114ec565b500690565b600082611525576115256114ec565b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561158757600080fd5b81516110f58161116c565b60005b838110156115ad578181015183820152602001611595565b83811115610e595750506000910152565b600082516115d0818460208701611592565b9190910192915050565b60208152600082518060208401526115f9816040850160208701611592565b601f01601f1916919091016040019291505056fe46756e6374696f6e206d7573742062652063616c6c6564207468726f75676820360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220fa6adbe8dc2afaa613d78ff857c563e504532ad66132f01f9f1ed30d077b521a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "collectFees(address,uint256,bool)": {
        "params": {
          "amount": "Amount to be sent to owner",
          "asset": "Token address of asset that is transferred",
          "fromDefaultFund": "Flags the source of the funds"
        },
        "returns": {
          "defaultFundsDelta": "delta amount subtracted from the default fund",
          "protocolFeesDelta": "delta amounts subtracted from the protocol fee fund"
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "distributeFees(address)": {
        "details": "Funds are allocated as such: 50% to default fund (if the fund is not paused) and the rest to protocol fees",
        "params": {
          "asset": "Token address of interest"
        },
        "returns": {
          "defaultFundsDelta": "delta amount added to the default fund",
          "protocolFeesDelta": "delta amounts added to the protocol fee fund"
        }
      },
      "getDefaultFund(address)": {
        "params": {
          "asset": "Token address of interest"
        }
      },
      "getProtocolFees(address)": {
        "params": {
          "asset": "Token address of interest"
        }
      },
      "initialize()": {
        "details": "\"constructor\" for proxy instances"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "stateVariables": {
      "ENTIRE_BALANCE": {
        "details": "Used for identifying cases when the entire fund's balance is to be used as an input This value is equivalent to 1<<255, i.e. a singular 1 in the most significant bit."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "collectAllFees(address[],bool)": {
        "notice": "Transfers the entire fund balance in the given assets to owner"
      },
      "collectFees(address,uint256,bool)": {
        "notice": "Transfers the specified amount in given asset to the owner"
      },
      "distributeAllFees(address[])": {
        "notice": "Allocated the entire contract's balance in spefied assets to the default fund and the protocol fees"
      },
      "distributeFees(address)": {
        "notice": "Allocated the contract's balance to the default fund and the protocol fees"
      },
      "getDefaultFund(address)": {
        "notice": "Returns the total value of the default fund"
      },
      "getProtocolFees(address)": {
        "notice": "Returns the total value of protocol fees"
      },
      "setDefaultFundPaused(bool)": {
        "notice": "Pauses/Restarts the accumulation of default funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1900,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "defaultFund",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1904,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "protocolFees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1906,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "defaultFundPaused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1913,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 527,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "_initialized",
        "offset": 0,
        "slot": "50",
        "type": "t_uint8"
      },
      {
        "astId": 530,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "_initializing",
        "offset": 1,
        "slot": "50",
        "type": "t_bool"
      },
      {
        "astId": 1091,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 509,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 806,
        "contract": "contracts/FeeCollector.sol:FeeCollector",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}