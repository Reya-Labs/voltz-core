{
  "address": "0xA63ccF5EEF24c72689d80D0839D3239DC98d9b99",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAaveV2LendingPool",
          "name": "_aaveLendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Minimal",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "uint32[]",
          "name": "_times",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_results",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AavePoolGetReserveNormalizedIncomeReturnedZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AavePoolGetReserveNormalizedVariableDebtReturnedZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CTokenExchangeRateReturnedZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "unlocked",
          "type": "bool"
        }
      ],
      "name": "CanOnlyTradeIfUnlocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotLiquidate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotSettleBeforeMaturity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "DebugError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1",
          "type": "int256"
        }
      ],
      "name": "ExpectedOppositeSigns",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint160",
          "name": "sqrtPriceX96",
          "type": "uint160"
        }
      ],
      "name": "ExpectedSqrtPriceZeroBeforeInit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IRSNotionalAmountSpecifiedMustBeNonZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMarginDelta",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LidoGetPooledEthBySharesReturnedZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "LiquidityDeltaMustBePositiveInBurn",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "LiquidityDeltaMustBePositiveInMint",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "marginRequirement",
          "type": "int256"
        }
      ],
      "name": "MarginLessThanMinimum",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "marginRequirement",
          "type": "int256"
        },
        {
          "internalType": "int24",
          "name": "tick",
          "type": "int24"
        },
        {
          "internalType": "int256",
          "name": "fixedTokenDelta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "variableTokenDelta",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeFeeIncurred",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fixedTokenDeltaUnbalanced",
          "type": "int256"
        }
      ],
      "name": "MarginRequirementNotMet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "marginRequirement",
          "type": "int256"
        }
      ],
      "name": "MarginRequirementNotMetFCM",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OOO",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyFCM",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMarginEngine",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOwnerCanUpdatePosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyVAMM",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__Exp2InputTooBig",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__FromUintOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMathUD60x18__LogInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PositionNetZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PositionNotSettled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RocketPoolGetEthValueReturnedZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawalExceedsCurrentMargin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "closeToOrBeyondMaturity",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minSecondsSinceLastUpdate",
          "type": "uint256"
        }
      ],
      "name": "MinSecondsSinceLastUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockTimestampScaled",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "index",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "observedValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "cardinality",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "cardinalityNext",
          "type": "uint16"
        }
      ],
      "name": "OracleBufferUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "observationCardinalityNextNew",
          "type": "uint16"
        }
      ],
      "name": "RateCardinalityNext",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_IN_WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNDERLYING_YIELD_BEARING_PROTOCOL_ID",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveLendingPool",
      "outputs": [
        {
          "internalType": "contract IAaveV2LendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBlockSlope",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timeChange",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "blockChange",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "getApyFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "apyFromToWad",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "getApyFromTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "apyFromToWad",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockSlope",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockChange",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "timeChange",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRateInRay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "currentRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRateSlope",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rateChange",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "timeChange",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastUpdatedRate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "resultRay",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        }
      ],
      "name": "getRateFrom",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getRateFromTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rateCardinalityNext",
          "type": "uint16"
        }
      ],
      "name": "increaseObservationCardinalityNext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "beforeOrAtRateValueRay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "apyFromBeforeOrAtToAtOrAfterWad",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeDeltaBeforeOrAtToQueriedTimeWad",
          "type": "uint256"
        }
      ],
      "name": "interpolateRateValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rateValueRay",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedBlock",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSecondsSinceLastUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "observations",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "blockTimestamp",
          "type": "uint32"
        },
        {
          "internalType": "uint216",
          "name": "observedValue",
          "type": "uint216"
        },
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleVars",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "rateIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "rateCardinality",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "rateCardinalityNext",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minSecondsSinceLastUpdate",
          "type": "uint256"
        }
      ],
      "name": "setMinSecondsSinceLastUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "settlementRateCache",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20Minimal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termStartTimestampInWeiSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "termEndTimestampInWeiSeconds",
          "type": "uint256"
        }
      ],
      "name": "variableFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "resultWad",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "termStartTimestampInWeiSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "termEndTimestampInWeiSeconds",
          "type": "uint256"
        }
      ],
      "name": "variableFactorNoCache",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "resultWad",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "writeOracleEntry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe20228ac6471b73a4d674a7fff4c22c2d43a930bfeb93428dbb3cf70e5c3a202",
  "receipt": {
    "to": null,
    "from": "0xF8F6B70a36f4398f0853a311dC6699Aba8333Cc1",
    "contractAddress": "0xA63ccF5EEF24c72689d80D0839D3239DC98d9b99",
    "transactionIndex": 2,
    "gasUsed": "2668576",
    "logsBloom": "0x
    "blockHash": "0x4ced7986eb6ee4f741764f908d8249e837bb3224b0c466d1c8e4210971026814",
    "transactionHash": "0xe20228ac6471b73a4d674a7fff4c22c2d43a930bfeb93428dbb3cf70e5c3a202",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 32867131,
        "transactionHash": "0xe20228ac6471b73a4d674a7fff4c22c2d43a930bfeb93428dbb3cf70e5c3a202",
        "address": "0xA63ccF5EEF24c72689d80D0839D3239DC98d9b99",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f8f6b70a36f4398f0853a311dc6699aba8333cc1"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x4ced7986eb6ee4f741764f908d8249e837bb3224b0c466d1c8e4210971026814"
      }
    ],
    "blockNumber": 32867131,
    "cumulativeGasUsed": "3429396",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE0fBa4Fc209b4948668006B2bE61711b7f465bAe",
    "0xe22da380ee6B445bb8273C81944ADEB6E8450422",
    [],
    []
  ],
  "numDeployments": 1,
  "solcInputHash": "2e530e1ebe6cfc6c2be15f9bdda7d3d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAaveV2LendingPool\",\"name\":\"_aaveLendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Minimal\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"uint32[]\",\"name\":\"_times\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_results\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AavePoolGetReserveNormalizedIncomeReturnedZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AavePoolGetReserveNormalizedVariableDebtReturnedZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CTokenExchangeRateReturnedZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"unlocked\",\"type\":\"bool\"}],\"name\":\"CanOnlyTradeIfUnlocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotLiquidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotSettleBeforeMaturity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"DebugError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1\",\"type\":\"int256\"}],\"name\":\"ExpectedOppositeSigns\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"}],\"name\":\"ExpectedSqrtPriceZeroBeforeInit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IRSNotionalAmountSpecifiedMustBeNonZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMarginDelta\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LidoGetPooledEthBySharesReturnedZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"LiquidityDeltaMustBePositiveInBurn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"LiquidityDeltaMustBePositiveInMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\"}],\"name\":\"MarginLessThanMinimum\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\"},{\"internalType\":\"int24\",\"name\":\"tick\",\"type\":\"int24\"},{\"internalType\":\"int256\",\"name\":\"fixedTokenDelta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"variableTokenDelta\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeFeeIncurred\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fixedTokenDeltaUnbalanced\",\"type\":\"int256\"}],\"name\":\"MarginRequirementNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"marginRequirement\",\"type\":\"int256\"}],\"name\":\"MarginRequirementNotMetFCM\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"NotEnoughFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OOO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyFCM\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMarginEngine\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOwnerCanUpdatePosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyVAMM\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__Exp2InputTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__FromUintOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMathUD60x18__LogInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionNetZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PositionNotSettled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RocketPoolGetEthValueReturnedZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalExceedsCurrentMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"closeToOrBeyondMaturity\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\"}],\"name\":\"MinSecondsSinceLastUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTimestampScaled\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"index\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"observedValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cardinality\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"cardinalityNext\",\"type\":\"uint16\"}],\"name\":\"OracleBufferUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"observationCardinalityNextNew\",\"type\":\"uint16\"}],\"name\":\"RateCardinalityNext\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_IN_WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNDERLYING_YIELD_BEARING_PROTOCOL_ID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveLendingPool\",\"outputs\":[{\"internalType\":\"contract IAaveV2LendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBlockSlope\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"}],\"name\":\"getApyFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getApyFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apyFromToWad\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockChange\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRateInRay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"currentRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRateSlope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateChange\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"timeChange\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdatedRate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"resultRay\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"}],\"name\":\"getRateFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getRateFromTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\"}],\"name\":\"increaseObservationCardinalityNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"beforeOrAtRateValueRay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"apyFromBeforeOrAtToAtOrAfterWad\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeDeltaBeforeOrAtToQueriedTimeWad\",\"type\":\"uint256\"}],\"name\":\"interpolateRateValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateValueRay\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSecondsSinceLastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"observations\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"blockTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint216\",\"name\":\"observedValue\",\"type\":\"uint216\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleVars\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"rateIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateCardinality\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"rateCardinalityNext\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minSecondsSinceLastUpdate\",\"type\":\"uint256\"}],\"name\":\"setMinSecondsSinceLastUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"settlementRateCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20Minimal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\"}],\"name\":\"variableFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"termStartTimestampInWeiSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"termEndTimestampInWeiSeconds\",\"type\":\"uint256\"}],\"name\":\"variableFactorNoCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultWad\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"writeOracleEntry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AavePoolGetReserveNormalizedIncomeReturnedZero()\":[{\"details\":\"getReserveNormalizedIncome() returned zero for underlying asset. Oracle only supports active Aave-V2 assets.\"}],\"AavePoolGetReserveNormalizedVariableDebtReturnedZero()\":[{\"details\":\"getReserveNormalizedVariableDebt() returned zero for underlying asset. Oracle only supports active Aave-V2 assets.\"}],\"CTokenExchangeRateReturnedZero()\":[{\"details\":\"ctoken.exchangeRateStored() returned zero for a given Compound ctoken. Oracle only supports active Compound assets.\"}],\"CanOnlyTradeIfUnlocked(bool)\":[{\"details\":\"Error which ensures the VAMM is unlocked\"}],\"ExpectedOppositeSigns(int256,int256)\":[{\"details\":\"The two values were expected to have oppostite sigs, but do not\"}],\"ExpectedSqrtPriceZeroBeforeInit(uint160)\":[{\"details\":\"Error which is reverted if the sqrt price of the vamm is non-zero before a vamm is initialized\"}],\"IRSNotionalAmountSpecifiedMustBeNonZero()\":[{\"details\":\"Error which ensures the amount of notional specified when initiating an IRS contract (via the swap function in the vamm) is non-zero\"}],\"LidoGetPooledEthBySharesReturnedZero()\":[{\"details\":\"getPooledEthByShares() returned zero for Lido's stETH.\"}],\"LiquidityDeltaMustBePositiveInBurn(uint128)\":[{\"details\":\"Error which ensures the liquidity delta is positive if a given LP wishes to burn liquidity in the vamm\"}],\"LiquidityDeltaMustBePositiveInMint(uint128)\":[{\"details\":\"Error which ensures the liquidity delta is positive if a given LP wishes to mint further liquidity in the vamm\"}],\"MarginLessThanMinimum(int256)\":[{\"details\":\"Cannot have less margin than the minimum requirement\"}],\"NotEnoughFunds(uint256,uint256)\":[{\"details\":\"There are not enough funds available for the requested operation\"}],\"OOO()\":[{\"details\":\"currentTime < queriedTime\"}],\"OnlyMarginEngine()\":[{\"details\":\"only the margin engine can run a certain function\"}],\"PositionNetZero()\":[{\"details\":\"No need to unwind a net zero position\"}],\"PositionNotSettled()\":[{\"details\":\"Position must be settled after AMM has reached maturity\"}],\"RocketPoolGetEthValueReturnedZero()\":[{\"details\":\"getEthValue() returned zero for RocketPool's RETH.\"}],\"WithdrawalExceedsCurrentMargin()\":[{\"details\":\"We can't withdraw more margin than we have\"}]},\"kind\":\"dev\",\"methods\":{\"getApyFrom(uint256)\":{\"details\":\"Reverts if we have no data point for `from`\",\"params\":{\"from\":\"The timestamp of the start of the period, in seconds\"},\"returns\":{\"apyFromToWad\":\"The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\"}},\"getApyFromTo(uint256,uint256)\":{\"details\":\"Reverts if we have no data point for either timestamp\",\"params\":{\"from\":\"The timestamp of the start of the period, in seconds\",\"to\":\"The timestamp of the end of the period, in seconds\"},\"returns\":{\"apyFromToWad\":\"The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\"}},\"getCurrentRateInRay()\":{\"details\":\"For convenience, the rate is normalised to Ray for storage, so that we can perform consistent math across all rates.This function should revert if a valid rate cannot be discerned\",\"returns\":{\"currentRate\":\"the rate in Ray (decimal scaled up by 10^27 for storage in a uint256)\"}},\"getLastUpdatedRate()\":{\"details\":\"FOr convenience, the rate is normalised to Ray for storage, so that we can perform consistent math across all rates.This function should revert if a valid rate cannot be discerned\",\"returns\":{\"resultRay\":\"the rate in Ray (decimal scaled up by 10^27 for storage in a uint256)\",\"timestamp\":\"the timestamp corresponding to the known rate (could be the current time, or a time in the past)\"}},\"getRateFrom(uint256)\":{\"details\":\"Reverts if we have no data point for `_from`\",\"params\":{\"_from\":\"The timestamp of the start of the period, in seconds\"},\"returns\":{\"_0\":\"The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\"}},\"getRateFromTo(uint256,uint256)\":{\"details\":\"Reverts if we have no data point for either timestamp\",\"params\":{\"_from\":\"The timestamp of the start of the period, in seconds\",\"_to\":\"The timestamp of the end of the period, in seconds\"},\"returns\":{\"_0\":\"The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\"}},\"increaseObservationCardinalityNext(uint16)\":{\"details\":\"This method is no-op if the RateOracle already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.\",\"params\":{\"rateCardinalityNext\":\"The desired minimum number of observations for the pool to store\"}},\"interpolateRateValue(uint256,uint256,uint256)\":{\"details\":\"Given [beforeOrAt, atOrAfter] where the timestamp for which the counterfactual is calculated is within that range (but does not touch any of the bounds)We can calculate the apy for [beforeOrAt, atOrAfter] --> refer to this value as apyFromBeforeOrAtToAtOrAfterThen we want a counterfactual rate value which results in apy_before_after if the apy is calculated between [beforeOrAt, timestampForCounterfactual]Hence (1+rateValueWei/beforeOrAtRateValueWei)^(1/timeInYears) = apyFromBeforeOrAtToAtOrAfterHence rateValueWei = beforeOrAtRateValueWei * (1+apyFromBeforeOrAtToAtOrAfter)^timeInYears - 1)\",\"params\":{\"apyFromBeforeOrAtToAtOrAfterWad\":\"Apy in the period between the timestamp of the beforeOrAt Rate and the atOrAfter Rate\",\"beforeOrAtRateValueRay\":\"Rate Value (in ray) before the timestamp for which we want to calculate the counterfactual rate value\",\"timeDeltaBeforeOrAtToQueriedTimeWad\":\"Time Delta (in wei seconds) between the timestamp of the beforeOrAt Rate and the atOrAfter Rate\"},\"returns\":{\"rateValueRay\":\"Counterfactual (interpolated) rate value in ray\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMinSecondsSinceLastUpdate(uint256)\":{\"details\":\"Can only be set by the Factory Owner\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"variableFactor(uint256,uint256)\":{\"details\":\"If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). Term end timestamps are cached for quick retrieval later.If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());if queried before maturity then returns the rate of return between pool initiation and current timestamp (in wad)if queried after maturity then returns the rate of return between pool initiation and maturity timestamp (in wad)\",\"returns\":{\"resultWad\":\"The variable factor\"}},\"variableFactorNoCache(uint256,uint256)\":{\"details\":\"If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). No caching takes place.If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());\",\"returns\":{\"resultWad\":\"The variable factor\"}}},\"stateVariables\":{\"UNDERLYING_YIELD_BEARING_PROTOCOL_ID\":{\"return\":\"yieldBearingProtocolID unique id of the underlying yield bearing protocol\",\"returns\":{\"_0\":\"yieldBearingProtocolID unique id of the underlying yield bearing protocol\"}},\"aaveLendingPool\":{\"return\":\"Address of the Aave Lending Pool\",\"returns\":{\"_0\":\"Address of the Aave Lending Pool\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"CannotLiquidate()\":[{\"notice\":\"The position/trader needs to be below the liquidation threshold to be liquidated\"}],\"CannotSettleBeforeMaturity()\":[{\"notice\":\"Positions and Traders cannot be settled before the applicable interest rate swap has matured\"}],\"InvalidMarginDelta()\":[{\"notice\":\"Margin delta must not equal zero\"}],\"MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)\":[{\"notice\":\"The resulting margin does not meet minimum requirements\"}],\"MarginRequirementNotMetFCM(int256)\":[{\"notice\":\"The resulting margin does not meet minimum requirements\"}],\"OnlyOwnerCanUpdatePosition()\":[{\"notice\":\"Only the position/trade owner can update the LP/Trader margin\"}],\"PRBMathUD60x18__Exp2InputTooBig(uint256)\":[{\"notice\":\"Emitted when the input is greater than 192.\"}],\"PRBMathUD60x18__FromUintOverflow(uint256)\":[{\"notice\":\"Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\"}],\"PRBMathUD60x18__LogInputTooSmall(uint256)\":[{\"notice\":\"Emitted when the input is less than 1.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"events\":{\"RateCardinalityNext(uint16)\":{\"notice\":\"Emitted by the rate oracle for increases to the number of observations that can be stored\"}},\"kind\":\"user\",\"methods\":{\"UNDERLYING_YIELD_BEARING_PROTOCOL_ID()\":{\"notice\":\"unique ID of the underlying yield bearing protocol (e.g. Aave v2 has id 1)\"},\"aaveLendingPool()\":{\"notice\":\"Gets the address of the Aave Lending Pool\"},\"getApyFrom(uint256)\":{\"notice\":\"Calculates the observed APY returned by the rate oracle between the given timestamp and the current time\"},\"getApyFromTo(uint256,uint256)\":{\"notice\":\"Calculates the observed APY returned by the rate oracle in a given period\"},\"getBlockSlope()\":{\"notice\":\"returns the last change in block number and timestamp  Some implementations may use this data to estimate timestamps for recent rate readings, if we only know the block number\"},\"getCurrentRateInRay()\":{\"notice\":\"Get the current \\\"rate\\\" in Ray at the current timestamp. This might be a direct reading if real-time readings are available, or it might be an extrapolation from recent known rates. The source and expected values of \\\"rate\\\" may differ by rate oracle type. All that matters is that we can divide one \\\"rate\\\" by another \\\"rate\\\" to get the factor of growth between the two timestamps. For example if we have rates of { (t=0, rate=5), (t=100, rate=5.5) }, we can divide 5.5 by 5 to get a growth factor of 1.1, suggesting that 10% growth in capital was experienced between timesamp 0 and timestamp 100.\"},\"getLastRateSlope()\":{\"notice\":\"returns the last change in rate and time Gets the last two observations and returns the change in rate and time. This can help us to extrapolate an estiamte of the current rate from recent known rates. \"},\"getLastUpdatedRate()\":{\"notice\":\"Get the last updated rate in Ray with the accompanying truncated timestamp This data point must be a known data point from the source of the data, and not extrapolated or interpolated by us. The source and expected values of \\\"rate\\\" may differ by rate oracle type. All that matters is that we can divide one \\\"rate\\\" by another \\\"rate\\\" to get the factor of growth between the two timestamps. For example if we have rates of { (t=0, rate=5), (t=100, rate=5.5) }, we can divide 5.5 by 5 to get a growth factor of 1.1, suggesting that 10% growth in capital was experienced between timesamp 0 and timestamp 100.\"},\"getRateFrom(uint256)\":{\"notice\":\"Calculates the observed interest returned by the underlying in a given period\"},\"getRateFromTo(uint256,uint256)\":{\"notice\":\"Calculates the observed interest returned by the underlying in a given period\"},\"increaseObservationCardinalityNext(uint16)\":{\"notice\":\"Increase the maximum number of rates observations that this RateOracle will store\"},\"interpolateRateValue(uint256,uint256,uint256)\":{\"notice\":\"Calculates the interpolated (counterfactual) rate value\"},\"observations(uint256)\":{\"notice\":\"the observations tracked over time by this oracle\"},\"setMinSecondsSinceLastUpdate(uint256)\":{\"notice\":\"Sets minSecondsSinceLastUpdate: The minimum number of seconds that need to pass since the last update to the rates array\"},\"settlementRateCache(uint32,uint32)\":{\"notice\":\"a cache of settlement rates for interest rate swaps associated with this rate oracle, indexed by start time and then end time\"},\"underlying()\":{\"notice\":\"Gets the address of the underlying token of the RateOracle\"},\"variableFactor(uint256,uint256)\":{\"notice\":\"Gets the variable factor between termStartTimestamp and termEndTimestamp\"},\"variableFactorNoCache(uint256,uint256)\":{\"notice\":\"Gets the variable factor between termStartTimestamp and termEndTimestamp\"},\"writeOracleEntry()\":{\"notice\":\"Writes a rate observation to the rates array given the current rate cardinality, rate index and rate cardinality next Write oracle entry is called whenever a new position is minted via the vamm or when a swap is initiated via the vamm That way the gas costs of Rate Oracle updates can be distributed across organic interactions with the protocol\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/rate_oracles/AaveBorrowRateOracle.sol\":\"AaveBorrowRateOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5c6caab697d302ad7eb59c234a4d2dbc965c1bae87709bd2850060b7695b28c7\",\"license\":\"MIT\"},\"contracts/core_libraries/FixedAndVariableMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport \\\"./Time.sol\\\";\\n\\n/// @title A utility library for mathematics of fixed and variable token amounts.\\nlibrary FixedAndVariableMath {\\n    using PRBMathSD59x18 for int256;\\n    using PRBMathUD60x18 for uint256;\\n\\n    /// @notice Number of wei-seconds in a year\\n    /// @dev Ignoring leap years since we're only using it to calculate the eventual APY rate\\n\\n    uint256 public constant SECONDS_IN_YEAR_IN_WAD = 31536000e18;\\n    uint256 public constant ONE_HUNDRED_IN_WAD = 100e18;\\n\\n    /// @notice Caclulate the remaining cashflow to settle a position\\n    /// @param fixedTokenBalance The current balance of the fixed side of the position\\n    /// @param variableTokenBalance The current balance of the variable side of the position\\n    /// @param termStartTimestampWad When did the position begin, in seconds\\n    /// @param termEndTimestampWad When does the position reach maturity, in seconds\\n    /// @param variableFactorToMaturityWad What factor expresses the current remaining variable rate, up to position maturity? (in wad)\\n    /// @return cashflow The remaining cashflow of the position\\n    function calculateSettlementCashflow(\\n        int256 fixedTokenBalance,\\n        int256 variableTokenBalance,\\n        uint256 termStartTimestampWad,\\n        uint256 termEndTimestampWad,\\n        uint256 variableFactorToMaturityWad\\n    ) internal view returns (int256 cashflow) {\\n        /// @dev convert fixed and variable token balances to their respective fixed token representations\\n\\n        int256 fixedTokenBalanceWad = fixedTokenBalance.fromInt();\\n        int256 variableTokenBalanceWad = variableTokenBalance.fromInt();\\n        int256 fixedCashflowWad = fixedTokenBalanceWad.mul(\\n            int256(\\n                fixedFactor(true, termStartTimestampWad, termEndTimestampWad)\\n            )\\n        );\\n\\n        int256 variableCashflowWad = variableTokenBalanceWad.mul(\\n            int256(variableFactorToMaturityWad)\\n        );\\n\\n        int256 cashflowWad = fixedCashflowWad + variableCashflowWad;\\n\\n        /// @dev convert back to non-fixed point representation\\n        cashflow = cashflowWad.toInt();\\n    }\\n\\n    /// @notice Divide a given time in seconds by the number of seconds in a year\\n    /// @param timeInSecondsAsWad A time in seconds in Wad (i.e. scaled up by 10^18)\\n    /// @return timeInYearsWad An annualised factor of timeInSeconds, also in Wad\\n    function accrualFact(uint256 timeInSecondsAsWad)\\n        internal\\n        pure\\n        returns (uint256 timeInYearsWad)\\n    {\\n        timeInYearsWad = timeInSecondsAsWad.div(SECONDS_IN_YEAR_IN_WAD);\\n    }\\n\\n    /// @notice Calculate the fixed factor for a position - that is, the percentage earned over\\n    /// the specified period of time, assuming 1% per year\\n    /// @param atMaturity Whether to calculate the factor at maturity (true), or now (false)\\n    /// @param termStartTimestampWad When does the period of time begin, in wei-seconds\\n    /// @param termEndTimestampWad When does the period of time end, in wei-seconds\\n    /// @return fixedFactorValueWad The fixed factor for the position (in Wad)\\n    function fixedFactor(\\n        bool atMaturity,\\n        uint256 termStartTimestampWad,\\n        uint256 termEndTimestampWad\\n    ) internal view returns (uint256 fixedFactorValueWad) {\\n        require(termEndTimestampWad > termStartTimestampWad, \\\"E<=S\\\");\\n\\n        uint256 currentTimestampWad = Time.blockTimestampScaled();\\n\\n        require(currentTimestampWad >= termStartTimestampWad, \\\"B.T<S\\\");\\n\\n        uint256 timeInSecondsWad;\\n\\n        if (atMaturity || (currentTimestampWad >= termEndTimestampWad)) {\\n            timeInSecondsWad = termEndTimestampWad - termStartTimestampWad;\\n        } else {\\n            timeInSecondsWad = currentTimestampWad - termStartTimestampWad;\\n        }\\n\\n        fixedFactorValueWad = accrualFact(timeInSecondsWad).div(\\n            ONE_HUNDRED_IN_WAD\\n        );\\n    }\\n\\n    /// @notice Calculate the fixed token balance for a position over a timespan\\n    /// @param amountFixedWad  A fixed amount\\n    /// @param excessBalanceWad Cashflows accrued to the fixed and variable token amounts since the inception of the IRS AMM\\n    /// @param termStartTimestampWad When does the period of time begin, in wei-seconds\\n    /// @param termEndTimestampWad When does the period of time end, in wei-seconds\\n    /// @return fixedTokenBalanceWad The fixed token balance for that time period\\n    function calculateFixedTokenBalance(\\n        int256 amountFixedWad,\\n        int256 excessBalanceWad,\\n        uint256 termStartTimestampWad,\\n        uint256 termEndTimestampWad\\n    ) internal view returns (int256 fixedTokenBalanceWad) {\\n        require(termEndTimestampWad > termStartTimestampWad, \\\"E<=S\\\");\\n\\n        return\\n            amountFixedWad -\\n            excessBalanceWad.div(\\n                int256(\\n                    fixedFactor(\\n                        true,\\n                        termStartTimestampWad,\\n                        termEndTimestampWad\\n                    )\\n                )\\n            );\\n    }\\n\\n    /// @notice Calculate the excess balance of both sides of a position in Wad\\n    /// @param amountFixedWad A fixed balance\\n    /// @param amountVariableWad A variable balance\\n    /// @param accruedVariableFactorWad An annualised factor in wei-years\\n    /// @param termStartTimestampWad When does the period of time begin, in wei-seconds\\n    /// @param termEndTimestampWad When does the period of time end, in wei-seconds\\n    /// @return excessBalanceWad The excess balance in wad\\n    function getExcessBalance(\\n        int256 amountFixedWad,\\n        int256 amountVariableWad,\\n        uint256 accruedVariableFactorWad,\\n        uint256 termStartTimestampWad,\\n        uint256 termEndTimestampWad\\n    ) internal view returns (int256) {\\n        /// @dev cashflows accrued since the inception of the IRS AMM\\n\\n        return\\n            amountFixedWad.mul(\\n                int256(\\n                    fixedFactor(\\n                        false,\\n                        termStartTimestampWad,\\n                        termEndTimestampWad\\n                    )\\n                )\\n            ) + amountVariableWad.mul(int256(accruedVariableFactorWad));\\n    }\\n\\n    /// @notice Calculate the fixed token balance given both fixed and variable balances\\n    /// @param amountFixed A fixed balance\\n    /// @param amountVariable A variable balance\\n    /// @param accruedVariableFactorWad An annualised factor in wei-years\\n    /// @param termStartTimestampWad When does the period of time begin, in wei-seconds\\n    /// @param termEndTimestampWad When does the period of time end, in wei-seconds\\n    /// @return fixedTokenBalance The fixed token balance for that time period\\n    function getFixedTokenBalance(\\n        int256 amountFixed,\\n        int256 amountVariable,\\n        uint256 accruedVariableFactorWad,\\n        uint256 termStartTimestampWad,\\n        uint256 termEndTimestampWad\\n    ) internal view returns (int256 fixedTokenBalance) {\\n        require(termEndTimestampWad > termStartTimestampWad, \\\"E<=S\\\");\\n\\n        if (amountFixed == 0 && amountVariable == 0) return 0;\\n\\n        int256 amountFixedWad = amountFixed.fromInt();\\n        int256 amountVariableWad = amountVariable.fromInt();\\n\\n        int256 excessBalanceWad = getExcessBalance(\\n            amountFixedWad,\\n            amountVariableWad,\\n            accruedVariableFactorWad,\\n            termStartTimestampWad,\\n            termEndTimestampWad\\n        );\\n\\n        int256 fixedTokenBalanceWad = calculateFixedTokenBalance(\\n            amountFixedWad,\\n            excessBalanceWad,\\n            termStartTimestampWad,\\n            termEndTimestampWad\\n        );\\n\\n        fixedTokenBalance = fixedTokenBalanceWad.toInt();\\n    }\\n}\\n\",\"keccak256\":\"0xdf89374bdc02ab9a570e51eeb46ba259ced3bb3ef5560574bc0d7ab2b060879a\",\"license\":\"Apache-2.0\"},\"contracts/core_libraries/Position.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../utils/LiquidityMath.sol\\\";\\nimport \\\"../utils/FixedPoint128.sol\\\";\\nimport \\\"../core_libraries/Tick.sol\\\";\\nimport \\\"../utils/FullMath.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/// @title Position\\n/// @notice Positions represent an owner address' liquidity between a lower and upper tick boundary\\n/// @dev Positions store additional state for tracking fees owed to the position as well as their fixed and variable token balances\\nlibrary Position {\\n    using Position for Info;\\n\\n    // info stored for each user's position\\n    struct Info {\\n        // has the position been already burned\\n        // a burned position can no longer support new IRS contracts but still needs to cover settlement cash-flows of on-going IRS contracts it entered\\n        // bool isBurned;, equivalent to having zero liquidity\\n        // is position settled\\n        bool isSettled;\\n        // the amount of liquidity owned by this position\\n        uint128 _liquidity;\\n        // current margin of the position in terms of the underlyingToken\\n        int256 margin;\\n        // fixed token growth per unit of liquidity as of the last update to liquidity or fixed/variable token balance\\n        int256 fixedTokenGrowthInsideLastX128;\\n        // variable token growth per unit of liquidity as of the last update to liquidity or fixed/variable token balance\\n        int256 variableTokenGrowthInsideLastX128;\\n        // current Fixed Token balance of the position, 1 fixed token can be redeemed for 1% APY * (annualised amm term) at the maturity of the amm\\n        // assuming 1 token worth of notional \\\"deposited\\\" in the underlying pool at the inception of the amm\\n        // can be negative/positive/zero\\n        int256 fixedTokenBalance;\\n        // current Variable Token Balance of the position, 1 variable token can be redeemed for underlyingPoolAPY*(annualised amm term) at the maturity of the amm\\n        // assuming 1 token worth of notional \\\"deposited\\\" in the underlying pool at the inception of the amm\\n        // can be negative/positive/zero\\n        int256 variableTokenBalance;\\n        // fee growth per unit of liquidity as of the last update to liquidity or fees owed (via the margin)\\n        uint256 feeGrowthInsideLastX128;\\n        // amount of variable tokens at the initiation of liquidity\\n        uint256 rewardPerAmount;\\n        // amount of fees accumulated\\n        uint256 accumulatedFees;\\n    }\\n\\n    /// @notice Returns the Info struct of a position, given an owner and position boundaries\\n    /// @param self The mapping containing all user positions\\n    /// @param owner The address of the position owner\\n    /// @param tickLower The lower tick boundary of the position\\n    /// @param tickUpper The upper tick boundary of the position\\n    /// @return position The position info struct of the given owners' position\\n    function get(\\n        mapping(bytes32 => Info) storage self,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) internal view returns (Position.Info storage position) {\\n        Tick.checkTicks(tickLower, tickUpper);\\n\\n        position = self[\\n            keccak256(abi.encodePacked(owner, tickLower, tickUpper))\\n        ];\\n    }\\n\\n    function settlePosition(Info storage self) internal {\\n        require(!self.isSettled, \\\"already settled\\\");\\n        self.isSettled = true;\\n    }\\n\\n    /// @notice Updates the Info struct of a position by changing the amount of margin according to marginDelta\\n    /// @param self Position Info Struct of the Liquidity Provider\\n    /// @param marginDelta Change in the margin account of the position (in wei)\\n    function updateMarginViaDelta(Info storage self, int256 marginDelta)\\n        internal\\n    {\\n        self.margin += marginDelta;\\n    }\\n\\n    /// @notice Updates the Info struct of a position by changing the fixed and variable token balances of the position\\n    /// @param self Position Info struct of the liquidity provider\\n    /// @param fixedTokenBalanceDelta Change in the number of fixed tokens in the position's fixed token balance\\n    /// @param variableTokenBalanceDelta Change in the number of variable tokens in the position's variable token balance\\n    function updateBalancesViaDeltas(\\n        Info storage self,\\n        int256 fixedTokenBalanceDelta,\\n        int256 variableTokenBalanceDelta\\n    ) internal {\\n        if (fixedTokenBalanceDelta | variableTokenBalanceDelta != 0) {\\n            self.fixedTokenBalance += fixedTokenBalanceDelta;\\n            self.variableTokenBalance += variableTokenBalanceDelta;\\n        }\\n    }\\n\\n    /// @notice Returns Fee Delta = (feeGrowthInside-feeGrowthInsideLast) * liquidity of the position\\n    /// @param self position info struct represeting a liquidity provider\\n    /// @param feeGrowthInsideX128 fee growth per unit of liquidity as of now\\n    /// @return _feeDelta Fee Delta\\n    function calculateFeeDelta(Info storage self, uint256 feeGrowthInsideX128)\\n        internal\\n        pure\\n        returns (uint256 _feeDelta)\\n    {\\n        Info memory _self = self;\\n\\n        /// @dev 0xZenus: The multiplication overflows, need to wrap the below expression in an unchecked block.\\n        unchecked {\\n            _feeDelta = FullMath.mulDiv(\\n                feeGrowthInsideX128 - _self.feeGrowthInsideLastX128,\\n                _self._liquidity,\\n                FixedPoint128.Q128\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns Fixed and Variable Token Deltas\\n    /// @param self position info struct represeting a liquidity provider\\n    /// @param fixedTokenGrowthInsideX128 fixed token growth per unit of liquidity as of now (in wei)\\n    /// @param variableTokenGrowthInsideX128 variable token growth per unit of liquidity as of now (in wei)\\n    /// @return _fixedTokenDelta = (fixedTokenGrowthInside-fixedTokenGrowthInsideLast) * liquidity of a position\\n    /// @return _variableTokenDelta = (variableTokenGrowthInside-variableTokenGrowthInsideLast) * liquidity of a position\\n    function calculateFixedAndVariableDelta(\\n        Info storage self,\\n        int256 fixedTokenGrowthInsideX128,\\n        int256 variableTokenGrowthInsideX128\\n    )\\n        internal\\n        pure\\n        returns (int256 _fixedTokenDelta, int256 _variableTokenDelta)\\n    {\\n        Info memory _self = self;\\n\\n        int256 fixedTokenGrowthInsideDeltaX128 = fixedTokenGrowthInsideX128 -\\n            _self.fixedTokenGrowthInsideLastX128;\\n\\n        _fixedTokenDelta = FullMath.mulDivSigned(\\n            fixedTokenGrowthInsideDeltaX128,\\n            _self._liquidity,\\n            FixedPoint128.Q128\\n        );\\n\\n        int256 variableTokenGrowthInsideDeltaX128 = variableTokenGrowthInsideX128 -\\n                _self.variableTokenGrowthInsideLastX128;\\n\\n        _variableTokenDelta = FullMath.mulDivSigned(\\n            variableTokenGrowthInsideDeltaX128,\\n            _self._liquidity,\\n            FixedPoint128.Q128\\n        );\\n    }\\n\\n    /// @notice Updates fixedTokenGrowthInsideLast and variableTokenGrowthInsideLast to the current values\\n    /// @param self position info struct represeting a liquidity provider\\n    /// @param fixedTokenGrowthInsideX128 fixed token growth per unit of liquidity as of now\\n    /// @param variableTokenGrowthInsideX128 variable token growth per unit of liquidity as of now\\n    function updateFixedAndVariableTokenGrowthInside(\\n        Info storage self,\\n        int256 fixedTokenGrowthInsideX128,\\n        int256 variableTokenGrowthInsideX128\\n    ) internal {\\n        self.fixedTokenGrowthInsideLastX128 = fixedTokenGrowthInsideX128;\\n        self.variableTokenGrowthInsideLastX128 = variableTokenGrowthInsideX128;\\n    }\\n\\n    /// @notice Updates feeGrowthInsideLast to the current value\\n    /// @param self position info struct represeting a liquidity provider\\n    /// @param feeGrowthInsideX128 fee growth per unit of liquidity as of now\\n    function updateFeeGrowthInside(\\n        Info storage self,\\n        uint256 feeGrowthInsideX128\\n    ) internal {\\n        self.feeGrowthInsideLastX128 = feeGrowthInsideX128;\\n    }\\n\\n    /// @notice Updates position's liqudity following either mint or a burn\\n    /// @param self The individual position to update\\n    /// @param liquidityDelta The change in pool liquidity as a result of the position update\\n    function updateLiquidity(Info storage self, int128 liquidityDelta)\\n        internal\\n    {\\n        Info memory _self = self;\\n\\n        if (liquidityDelta == 0) {\\n            require(_self._liquidity > 0, \\\"NP\\\"); // disallow pokes for 0 liquidity positions\\n        } else {\\n            self._liquidity = LiquidityMath.addDelta(\\n                _self._liquidity,\\n                liquidityDelta\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf3a4f9d8f1d21382a9600a2618d7b39e5cbd9bb80a88ccdbc55a6bf18c3cf2b\",\"license\":\"BUSL-1.1\"},\"contracts/core_libraries/Tick.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\nimport \\\"../utils/LiquidityMath.sol\\\";\\nimport \\\"../utils/TickMath.sol\\\";\\nimport \\\"../utils/SafeCastUni.sol\\\";\\n\\n/// @title Tick\\n/// @notice Contains functions for managing tick processes and relevant calculations\\nlibrary Tick {\\n    using SafeCastUni for int256;\\n    using SafeCastUni for uint256;\\n\\n    int24 public constant MAXIMUM_TICK_SPACING = 16384;\\n\\n    // info stored for each initialized individual tick\\n    struct Info {\\n        /// @dev the total position liquidity that references this tick (either as tick lower or tick upper)\\n        uint128 liquidityGross;\\n        /// @dev amount of net liquidity added (subtracted) when tick is crossed from left to right (right to left),\\n        int128 liquidityNet;\\n        /// @dev fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\n        /// @dev only has relative meaning, not absolute \\u2014 the value depends on when the tick is initialized\\n        int256 fixedTokenGrowthOutsideX128;\\n        int256 variableTokenGrowthOutsideX128;\\n        uint256 feeGrowthOutsideX128;\\n        /// @dev true iff the tick is initialized, i.e. the value is exactly equivalent to the expression liquidityGross != 0\\n        /// @dev these 8 bits are set to prevent fresh sstores when crossing newly initialized ticks\\n        bool initialized;\\n    }\\n\\n    /// @notice Derives max liquidity per tick from given tick spacing\\n    /// @dev Executed within the pool constructor\\n    /// @param tickSpacing The amount of required tick separation, realized in multiples of `tickSpacing`\\n    ///     e.g., a tickSpacing of 3 requires ticks to be initialized every 3rd tick i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// @return The max liquidity per tick\\n    function tickSpacingToMaxLiquidityPerTick(int24 tickSpacing)\\n        internal\\n        pure\\n        returns (uint128)\\n    {\\n        int24 minTick = TickMath.MIN_TICK - (TickMath.MIN_TICK % tickSpacing);\\n        int24 maxTick = -minTick;\\n        uint24 numTicks = uint24((maxTick - minTick) / tickSpacing) + 1;\\n        return type(uint128).max / numTicks;\\n    }\\n\\n    /// @dev Common checks for valid tick inputs.\\n    function checkTicks(int24 tickLower, int24 tickUpper) internal pure {\\n        require(tickLower < tickUpper, \\\"TLU\\\");\\n        require(tickLower >= TickMath.MIN_TICK, \\\"TLM\\\");\\n        require(tickUpper <= TickMath.MAX_TICK, \\\"TUM\\\");\\n    }\\n\\n    struct FeeGrowthInsideParams {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int24 tickCurrent;\\n        uint256 feeGrowthGlobalX128;\\n    }\\n\\n    function _getGrowthInside(\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        int24 _tickCurrent,\\n        int256 _growthGlobalX128,\\n        int256 _lowerGrowthOutsideX128,\\n        int256 _upperGrowthOutsideX128\\n    ) private pure returns (int256) {\\n        // calculate the growth below\\n        int256 _growthBelowX128;\\n\\n        if (_tickCurrent >= _tickLower) {\\n            _growthBelowX128 = _lowerGrowthOutsideX128;\\n        } else {\\n            _growthBelowX128 = _growthGlobalX128 - _lowerGrowthOutsideX128;\\n        }\\n\\n        // calculate the growth above\\n        int256 _growthAboveX128;\\n\\n        if (_tickCurrent < _tickUpper) {\\n            _growthAboveX128 = _upperGrowthOutsideX128;\\n        } else {\\n            _growthAboveX128 = _growthGlobalX128 - _upperGrowthOutsideX128;\\n        }\\n\\n        int256 _growthInsideX128;\\n\\n        _growthInsideX128 =\\n            _growthGlobalX128 -\\n            (_growthBelowX128 + _growthAboveX128);\\n\\n        return _growthInsideX128;\\n    }\\n\\n    function getFeeGrowthInside(\\n        mapping(int24 => Tick.Info) storage self,\\n        FeeGrowthInsideParams memory params\\n    ) internal view returns (uint256 feeGrowthInsideX128) {\\n        unchecked {\\n            Info storage lower = self[params.tickLower];\\n            Info storage upper = self[params.tickUpper];\\n\\n            feeGrowthInsideX128 = uint256(\\n                _getGrowthInside(\\n                    params.tickLower,\\n                    params.tickUpper,\\n                    params.tickCurrent,\\n                    params.feeGrowthGlobalX128.toInt256(),\\n                    lower.feeGrowthOutsideX128.toInt256(),\\n                    upper.feeGrowthOutsideX128.toInt256()\\n                )\\n            );\\n        }\\n    }\\n\\n    struct VariableTokenGrowthInsideParams {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int24 tickCurrent;\\n        int256 variableTokenGrowthGlobalX128;\\n    }\\n\\n    function getVariableTokenGrowthInside(\\n        mapping(int24 => Tick.Info) storage self,\\n        VariableTokenGrowthInsideParams memory params\\n    ) internal view returns (int256 variableTokenGrowthInsideX128) {\\n        Info storage lower = self[params.tickLower];\\n        Info storage upper = self[params.tickUpper];\\n\\n        variableTokenGrowthInsideX128 = _getGrowthInside(\\n            params.tickLower,\\n            params.tickUpper,\\n            params.tickCurrent,\\n            params.variableTokenGrowthGlobalX128,\\n            lower.variableTokenGrowthOutsideX128,\\n            upper.variableTokenGrowthOutsideX128\\n        );\\n    }\\n\\n    struct FixedTokenGrowthInsideParams {\\n        int24 tickLower;\\n        int24 tickUpper;\\n        int24 tickCurrent;\\n        int256 fixedTokenGrowthGlobalX128;\\n    }\\n\\n    function getFixedTokenGrowthInside(\\n        mapping(int24 => Tick.Info) storage self,\\n        FixedTokenGrowthInsideParams memory params\\n    ) internal view returns (int256 fixedTokenGrowthInsideX128) {\\n        Info storage lower = self[params.tickLower];\\n        Info storage upper = self[params.tickUpper];\\n\\n        // do we need an unchecked block in here (given we are dealing with an int256)?\\n        fixedTokenGrowthInsideX128 = _getGrowthInside(\\n            params.tickLower,\\n            params.tickUpper,\\n            params.tickCurrent,\\n            params.fixedTokenGrowthGlobalX128,\\n            lower.fixedTokenGrowthOutsideX128,\\n            upper.fixedTokenGrowthOutsideX128\\n        );\\n    }\\n\\n    /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The tick that will be updated\\n    /// @param tickCurrent The current tick\\n    /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\n    /// @param fixedTokenGrowthGlobalX128 The fixed token growth accumulated per unit of liquidity for the entire life of the vamm\\n    /// @param variableTokenGrowthGlobalX128 The variable token growth accumulated per unit of liquidity for the entire life of the vamm\\n    /// @param upper true for updating a position's upper tick, or false for updating a position's lower tick\\n    /// @param maxLiquidity The maximum liquidity allocation for a single tick\\n    /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\n    function update(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        int24 tickCurrent,\\n        int128 liquidityDelta,\\n        int256 fixedTokenGrowthGlobalX128,\\n        int256 variableTokenGrowthGlobalX128,\\n        uint256 feeGrowthGlobalX128,\\n        bool upper,\\n        uint128 maxLiquidity\\n    ) internal returns (bool flipped) {\\n        Tick.Info storage info = self[tick];\\n\\n        uint128 liquidityGrossBefore = info.liquidityGross;\\n        require(\\n            int128(info.liquidityGross) + liquidityDelta >= 0,\\n            \\\"not enough liquidity to burn\\\"\\n        );\\n        uint128 liquidityGrossAfter = LiquidityMath.addDelta(\\n            liquidityGrossBefore,\\n            liquidityDelta\\n        );\\n\\n        require(liquidityGrossAfter <= maxLiquidity, \\\"LO\\\");\\n\\n        flipped = (liquidityGrossAfter == 0) != (liquidityGrossBefore == 0);\\n\\n        if (liquidityGrossBefore == 0) {\\n            // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\n            if (tick <= tickCurrent) {\\n                info.feeGrowthOutsideX128 = feeGrowthGlobalX128;\\n\\n                info.fixedTokenGrowthOutsideX128 = fixedTokenGrowthGlobalX128;\\n\\n                info\\n                    .variableTokenGrowthOutsideX128 = variableTokenGrowthGlobalX128;\\n            }\\n\\n            info.initialized = true;\\n        }\\n\\n        /// check shouldn't we unintialize the tick if liquidityGrossAfter = 0?\\n\\n        info.liquidityGross = liquidityGrossAfter;\\n\\n        /// add comments\\n        // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\n        info.liquidityNet = upper\\n            ? info.liquidityNet - liquidityDelta\\n            : info.liquidityNet + liquidityDelta;\\n    }\\n\\n    /// @notice Clears tick data\\n    /// @param self The mapping containing all initialized tick information for initialized ticks\\n    /// @param tick The tick that will be cleared\\n    function clear(mapping(int24 => Tick.Info) storage self, int24 tick)\\n        internal\\n    {\\n        delete self[tick];\\n    }\\n\\n    /// @notice Transitions to next tick as needed by price movement\\n    /// @param self The mapping containing all tick information for initialized ticks\\n    /// @param tick The destination tick of the transition\\n    /// @param fixedTokenGrowthGlobalX128 The fixed token growth accumulated per unit of liquidity for the entire life of the vamm\\n    /// @param variableTokenGrowthGlobalX128 The variable token growth accumulated per unit of liquidity for the entire life of the vamm\\n    /// @param feeGrowthGlobalX128 The fee growth collected per unit of liquidity for the entire life of the vamm\\n    /// @return liquidityNet The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\n    function cross(\\n        mapping(int24 => Tick.Info) storage self,\\n        int24 tick,\\n        int256 fixedTokenGrowthGlobalX128,\\n        int256 variableTokenGrowthGlobalX128,\\n        uint256 feeGrowthGlobalX128\\n    ) internal returns (int128 liquidityNet) {\\n        Tick.Info storage info = self[tick];\\n\\n        info.feeGrowthOutsideX128 =\\n            feeGrowthGlobalX128 -\\n            info.feeGrowthOutsideX128;\\n\\n        info.fixedTokenGrowthOutsideX128 =\\n            fixedTokenGrowthGlobalX128 -\\n            info.fixedTokenGrowthOutsideX128;\\n\\n        info.variableTokenGrowthOutsideX128 =\\n            variableTokenGrowthGlobalX128 -\\n            info.variableTokenGrowthOutsideX128;\\n\\n        liquidityNet = info.liquidityNet;\\n    }\\n}\\n\",\"keccak256\":\"0x139643f191b0a3c144569e59dea7984df2b8f6d7967641e51dc84b3e912d0434\",\"license\":\"BUSL-1.1\"},\"contracts/core_libraries/Time.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\n\\nlibrary Time {\\n    uint256 public constant SECONDS_IN_DAY_WAD = 86400e18;\\n\\n    /// @notice Calculate block.timestamp to wei precision\\n    /// @return Current timestamp in wei-seconds (1/1e18)\\n    function blockTimestampScaled() internal view returns (uint256) {\\n        // solhint-disable-next-line not-rely-on-time\\n        return PRBMathUD60x18.fromUint(block.timestamp);\\n    }\\n\\n    /// @dev Returns the block timestamp truncated to 32 bits, checking for overflow.\\n    function blockTimestampTruncated() internal view returns (uint32) {\\n        return timestampAsUint32(block.timestamp);\\n    }\\n\\n    function timestampAsUint32(uint256 _timestamp)\\n        internal\\n        pure\\n        returns (uint32 timestamp)\\n    {\\n        require((timestamp = uint32(_timestamp)) == _timestamp, \\\"TSOFLOW\\\");\\n    }\\n\\n    function isCloseToMaturityOrBeyondMaturity(uint256 termEndTimestampWad)\\n        internal\\n        view\\n        returns (bool vammInactive)\\n    {\\n        return\\n            Time.blockTimestampScaled() + SECONDS_IN_DAY_WAD >=\\n            termEndTimestampWad;\\n    }\\n}\\n\",\"keccak256\":\"0x7300fbd9dab46d89fc5e1c537a280457dbf1539bd971ca4620f9a802d5222393\",\"license\":\"Apache-2.0\"},\"contracts/core_libraries/TraderWithYieldBearingAssets.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\nimport \\\"./FixedAndVariableMath.sol\\\";\\n\\n/// @title Trader\\nlibrary TraderWithYieldBearingAssets {\\n    // info stored for each user's position\\n    struct Info {\\n        // For Aave v2 The scaled balance is the sum of all the updated stored balances in the\\n        // underlying token, divided by the reserve's liquidity index at the moment of the update\\n        //\\n        // For componund, the scaled balance is the sum of all the updated stored balances in the\\n        // underlying token, divided by the cToken exchange rate at the moment of the update.\\n        // This is simply the number of cTokens!\\n        uint256 marginInScaledYieldBearingTokens;\\n        int256 fixedTokenBalance;\\n        int256 variableTokenBalance;\\n        bool isSettled;\\n    }\\n\\n    function updateMarginInScaledYieldBearingTokens(\\n        Info storage self,\\n        uint256 _marginInScaledYieldBearingTokens\\n    ) internal {\\n        self\\n            .marginInScaledYieldBearingTokens = _marginInScaledYieldBearingTokens;\\n    }\\n\\n    function settleTrader(Info storage self) internal {\\n        require(!self.isSettled, \\\"already settled\\\");\\n        self.isSettled = true;\\n    }\\n\\n    function updateBalancesViaDeltas(\\n        Info storage self,\\n        int256 fixedTokenBalanceDelta,\\n        int256 variableTokenBalanceDelta\\n    )\\n        internal\\n        returns (int256 _fixedTokenBalance, int256 _variableTokenBalance)\\n    {\\n        _fixedTokenBalance = self.fixedTokenBalance + fixedTokenBalanceDelta;\\n        _variableTokenBalance =\\n            self.variableTokenBalance +\\n            variableTokenBalanceDelta;\\n\\n        self.fixedTokenBalance = _fixedTokenBalance;\\n        self.variableTokenBalance = _variableTokenBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x6956ccf10c7808721133b4b41f3c432982bcd31f029989908806e2cff795e8ad\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\n\\n/// @title Minimal ERC20 interface for Voltz\\n/// @notice Contains a subset of the full ERC20 interface that is used in Voltz\\ninterface IERC20Minimal {\\n    /// @notice Returns the balance of a token\\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\n    /// @return The number of tokens held by the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\n    /// @param recipient The account that will receive the amount transferred\\n    /// @param amount The number of tokens to send from the sender to the recipient\\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    /// @notice Returns the current allowance given to a spender by an owner\\n    /// @param owner The account of the token owner\\n    /// @param spender The account of the token spender\\n    /// @return The current allowance granted by `owner` to `spender`\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\n    /// @param amount The amount of tokens allowed to be used by `spender`\\n    /// @return Returns true for a successful approval, false for unsuccessful\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\n    /// @param sender The account from which the transfer will be initiated\\n    /// @param recipient The recipient of the transfer\\n    /// @param amount The amount of the transfer\\n    /// @return Returns true for a successful transfer, false for unsuccessful\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /// @dev Returns the number of decimals used to get its user representation.\\n    // For example, if decimals equals 2, a balance of 505 tokens should be displayed to a user as 5,05 (505 / 10 ** 2).\\n    // Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\\n    function decimals() external view returns (uint8);\\n\\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\\n    /// @param value The amount of tokens that were transferred\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\n    /// @param owner The account that approved spending of its tokens\\n    /// @param spender The account for which the spending allowance was modified\\n    /// @param value The new allowance from the owner to the spender\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0x02da6860dec48b896db133292b09ec66e3ed67635ed5c0f7d26c6aa14bbcd6e2\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"contracts/utils/CustomErrors.sol\\\";\\nimport \\\"./rate_oracles/IRateOracle.sol\\\";\\nimport \\\"./IMarginEngine.sol\\\";\\nimport \\\"./IVAMM.sol\\\";\\nimport \\\"./fcms/IFCM.sol\\\";\\nimport \\\"./IERC20Minimal.sol\\\";\\nimport \\\"./IPeriphery.sol\\\";\\n\\n/// @title The interface for the Voltz AMM Factory\\n/// @notice The AMM Factory facilitates creation of Voltz AMMs\\ninterface IFactory is CustomErrors {\\n    event IrsInstance(\\n        IERC20Minimal indexed underlyingToken,\\n        IRateOracle indexed rateOracle,\\n        uint256 termStartTimestampWad,\\n        uint256 termEndTimestampWad,\\n        int24 tickSpacing,\\n        IMarginEngine marginEngine,\\n        IVAMM vamm,\\n        IFCM fcm,\\n        uint8 yieldBearingProtocolID,\\n        uint8 underlyingTokenDecimals\\n    );\\n\\n    event MasterFCM(IFCM masterFCMAddress, uint8 yieldBearingProtocolID);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed intAddress,\\n        bool indexed isApproved\\n    );\\n\\n    event PeripheryUpdate(IPeriphery periphery);\\n\\n    // view functions\\n\\n    function isApproved(address _owner, address intAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    function masterVAMM() external view returns (IVAMM);\\n\\n    function masterMarginEngine() external view returns (IMarginEngine);\\n\\n    function periphery() external view returns (IPeriphery);\\n\\n    // settters\\n\\n    function setApproval(address intAddress, bool allowIntegration) external;\\n\\n    function setMasterFCM(IFCM masterFCM, uint8 yieldBearingProtocolID)\\n        external;\\n\\n    function setMasterVAMM(IVAMM _masterVAMM) external;\\n\\n    function setMasterMarginEngine(IMarginEngine _masterMarginEngine) external;\\n\\n    function setPeriphery(IPeriphery _periphery) external;\\n\\n    /// @notice Deploys the contracts required for a new Interest Rate Swap instance\\n    function deployIrsInstance(\\n        IERC20Minimal _underlyingToken,\\n        IRateOracle _rateOracle,\\n        uint256 _termStartTimestampWad,\\n        uint256 _termEndTimestampWad,\\n        int24 _tickSpacing\\n    )\\n        external\\n        returns (\\n            IMarginEngine marginEngineProxy,\\n            IVAMM vammProxy,\\n            IFCM fcmProxy\\n        );\\n\\n    function masterFCMs(uint8 yieldBearingProtocolID)\\n        external\\n        view\\n        returns (IFCM masterFCM);\\n}\\n\",\"keccak256\":\"0xa43225214fd2276490d9672330ce2638a405021f03134387d19d030b11513b7a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IMarginEngine.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\nimport \\\"./IVAMM.sol\\\";\\nimport \\\"./IPositionStructs.sol\\\";\\nimport \\\"../core_libraries/Position.sol\\\";\\nimport \\\"./rate_oracles/IRateOracle.sol\\\";\\nimport \\\"./fcms/IFCM.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./IERC20Minimal.sol\\\";\\nimport \\\"contracts/utils/CustomErrors.sol\\\";\\n\\ninterface IMarginEngine is IPositionStructs, CustomErrors {\\n    // structs\\n\\n    function setPausability(bool state) external;\\n\\n    struct MarginCalculatorParameters {\\n        /// @dev Upper bound of the underlying pool (e.g. Aave v2 USDC lending pool) APY from the initiation of the IRS AMM and until its maturity (18 decimals fixed point number)\\n        uint256 apyUpperMultiplierWad;\\n        /// @dev Lower bound of the underlying pool (e.g. Aave v2 USDC lending pool) APY from the initiation of the IRS AMM and until its maturity (18 decimals)\\n        uint256 apyLowerMultiplierWad;\\n        /// @dev The volatility of the underlying pool APY (settable by the owner of the Margin Engine) (18 decimals)\\n        int256 sigmaSquaredWad;\\n        /// @dev Margin Engine Parameter estimated via CIR model calibration (for details refer to litepaper) (18 decimals)\\n        int256 alphaWad;\\n        /// @dev Margin Engine Parameter estimated via CIR model calibration (for details refer to litepaper) (18 decimals)\\n        int256 betaWad;\\n        /// @dev Standard normal critical value used in the computation of the Upper APY Bound of the underlying pool\\n        int256 xiUpperWad;\\n        /// @dev Standard normal critical value used in the computation of the Lower APY Bound of the underlying pool\\n        int256 xiLowerWad;\\n        /// @dev Max term possible for a Voltz IRS AMM in seconds (18 decimals)\\n        int256 tMaxWad;\\n        /// @dev multiplier of the starting fixed rate (refer to the litepaper) if simulating a counterfactual fixed taker unwind (moving to the left along the VAMM) for purposes of calculating liquidation margin requirement\\n        uint256 devMulLeftUnwindLMWad;\\n        /// @dev multiplier of the starting fixed rate (refer to the litepaper) if simulating a counterfactual variable taker unwind (moving to the right along the VAMM) for purposes of calculating liquidation margin requirement\\n        uint256 devMulRightUnwindLMWad;\\n        /// @dev same as devMulLeftUnwindLMWad but for purposes of calculating the initial margin requirement\\n        uint256 devMulLeftUnwindIMWad;\\n        /// @dev same as devMulRightUnwindLMWad but for purposes of calculating the initial margin requirement\\n        uint256 devMulRightUnwindIMWad;\\n        /// @dev r_min from the litepaper eq. 11 for a scenario where counterfactual is a simulated fixed taker unwind (left unwind along the VAMM), used for liquidation margin calculation\\n        uint256 fixedRateDeviationMinLeftUnwindLMWad;\\n        /// @dev r_min from the litepaper eq. 11 for a scenario where counterfactual is a simulated variable taker unwind (right unwind along the VAMM), used for liquidation margin calculation\\n        uint256 fixedRateDeviationMinRightUnwindLMWad;\\n        /// @dev same as fixedRateDeviationMinLeftUnwindLMWad but for Initial Margin Requirement\\n        uint256 fixedRateDeviationMinLeftUnwindIMWad;\\n        /// @dev same as fixedRateDeviationMinRightUnwindLMWad but for Initial Margin Requirement\\n        uint256 fixedRateDeviationMinRightUnwindIMWad;\\n        /// @dev gamma from eqn. 12 [append this logic to the litepaper] from the litepaper, gamma is an adjustable parameter necessary to calculate scaled deviations to the fixed rate in counterfactual unwinds for minimum margin requirement calculations\\n        uint256 gammaWad;\\n        /// @dev settable parameter that ensures that minimumMarginRequirement is always above or equal to the minMarginToIncentiviseLiquidators which ensures there is always sufficient incentive for liquidators to liquidate positions given the fact their income is a proportion of position margin\\n        uint256 minMarginToIncentiviseLiquidators;\\n    }\\n\\n    // Events\\n    event HistoricalApyWindowSetting(uint256 secondsAgo);\\n    event CacheMaxAgeSetting(uint256 cacheMaxAgeInSeconds);\\n    event RateOracle(uint256 cacheMaxAgeInSeconds);\\n\\n    event ProtocolCollection(\\n        address sender,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n    event LiquidatorRewardSetting(uint256 liquidatorRewardWad);\\n\\n    event VAMMSetting(IVAMM indexed vamm);\\n\\n    event RateOracleSetting(IRateOracle indexed rateOracle);\\n\\n    event FCMSetting(IFCM indexed fcm);\\n\\n    event MarginCalculatorParametersSetting(\\n        MarginCalculatorParameters marginCalculatorParameters\\n    );\\n\\n    event PositionMarginUpdate(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        int256 marginDelta\\n    );\\n\\n    event HistoricalApy(uint256 value);\\n\\n    event PositionSettlement(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        int256 settlementCashflow\\n    );\\n\\n    event PositionLiquidation(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        address liquidator,\\n        int256 notionalUnwound,\\n        uint256 liquidatorReward\\n    );\\n\\n    event PositionUpdate(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 _liquidity,\\n        int256 margin,\\n        int256 fixedTokenBalance,\\n        int256 variableTokenBalance,\\n        uint256 accumulatedFees\\n    );\\n\\n    /// @dev emitted after the _isAlpha boolean is updated by the owner of the Margin Engine\\n    /// @dev _isAlpha boolean dictates whether the Margin Engine is in the Alpha State, i.e. margin updates can only be done via the periphery\\n    /// @dev additionally, the periphery has the logic to take care of lp margin caps in the Alpha State phase of the Margin Engine\\n    /// @dev __isAlpha is the newly set value for the _isAlpha boolean\\n    event IsAlpha(bool __isAlpha);\\n\\n    // immutables\\n\\n    /// @notice The Full Collateralisation Module (FCM)\\n    /// @dev The FCM is a smart contract that acts as an intermediary Position between the Voltz Core and traders who wish to take fully collateralised fixed taker positions\\n    /// @dev An example FCM is the AaveFCM.sol module which inherits from the IFCM interface, it lets fixed takers deposit underlying yield bearing tokens (e.g.) aUSDC as margin to enter into a fixed taker swap without the need to worry about liquidations\\n    /// @dev since the MarginEngine is confident the FCM is always fully collateralised, it does not let liquidators liquidate the FCM Position\\n    /// @return The Full Collateralisation Module linked to the MarginEngine\\n    function fcm() external view returns (IFCM);\\n\\n    /// @notice The Factory\\n    /// @dev the factory that deployed the master Margin Engine\\n    function factory() external view returns (IFactory);\\n\\n    /// @notice The address of the underlying (non-yield bearing) token - e.g. USDC\\n    /// @return The underlying ERC20 token (e.g. USDC)\\n    function underlyingToken() external view returns (IERC20Minimal);\\n\\n    /// @notice The rateOracle contract which lets the protocol access historical apys in the yield bearing pools it is built on top of\\n    /// @return The underlying ERC20 token (e.g. USDC)\\n    function rateOracle() external view returns (IRateOracle);\\n\\n    /// @notice The unix termStartTimestamp of the MarginEngine in Wad\\n    /// @return Term Start Timestamp in Wad\\n    function termStartTimestampWad() external view returns (uint256);\\n\\n    /// @notice The unix termEndTimestamp of the MarginEngine in Wad\\n    /// @return Term End Timestamp in Wad\\n    function termEndTimestampWad() external view returns (uint256);\\n\\n    /// @dev \\\"constructor\\\" for proxy instances\\n    function initialize(\\n        IERC20Minimal __underlyingToken,\\n        IRateOracle __rateOracle,\\n        uint256 __termStartTimestampWad,\\n        uint256 __termEndTimestampWad\\n    ) external;\\n\\n    // view functions\\n\\n    /// @notice The liquidator Reward Percentage (in Wad)\\n    /// @dev liquidatorReward (in wad) is the percentage of the margin (of a liquidated position) that is sent to the liquidator\\n    /// @dev following a successful liquidation that results in a trader/position unwind; example value:  2 * 10**16 => 2% of position margin is used to cover liquidator reward\\n    /// @return Liquidator Reward in Wad\\n    function liquidatorRewardWad() external view returns (uint256);\\n\\n    /// @notice VAMM (Virtual Automated Market Maker) linked to the MarginEngine\\n    /// @dev The VAMM is responsible for pricing only (determining the effective fixed rate at which a given Interest Rate Swap notional will be executed)\\n    /// @return The VAMM\\n    function vamm() external view returns (IVAMM);\\n\\n    /// @return If true, the Margin Engine Proxy is currently in alpha state, hence margin updates of LPs can only be done via the periphery. If false, lps can directly update their margin via Margin Engine.\\n    function isAlpha() external view returns (bool);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param _owner The address of the position owner\\n    /// @param _tickLower The lower tick boundary of the position\\n    /// @param _tickUpper The upper tick boundary of the position\\n    /// Returns position The Position.Info corresponding to the requested position\\n    function getPosition(\\n        address _owner,\\n        int24 _tickLower,\\n        int24 _tickUpper\\n    ) external returns (Position.Info memory position);\\n\\n    /// @notice Gets the look-back window size that's used to request the historical APY from the rate Oracle\\n    /// @dev The historical APY of the Rate Oracle is necessary for MarginEngine computations\\n    /// @dev The look-back window is seconds from the current timestamp\\n    /// @dev This value is only settable by the the Factory owner and may be unique for each MarginEngine\\n    /// @dev When setting secondAgo, the setter needs to take into consideration the underlying volatility of the APYs in the reference yield-bearing pool (e.g. Aave v2 USDC)\\n    function lookbackWindowInSeconds() external view returns (uint256);\\n\\n    // non-view functions\\n\\n    /// @notice Sets secondsAgo: The look-back window size used to calculate the historical APY for margin purposes\\n    /// @param _secondsAgo the duration of the lookback window in seconds\\n    /// @dev Can only be set by the Factory Owner\\n    function setLookbackWindowInSeconds(uint256 _secondsAgo) external;\\n\\n    /// @notice Set the MarginCalculatorParameters (each margin engine can have its own custom set of margin calculator parameters)\\n    /// @param _marginCalculatorParameters the MarginCalculatorParameters to set\\n    /// @dev marginCalculatorParameteres is of type MarginCalculatorParameters (refer to the definition of the struct for elaboration on what each parameter means)\\n    function setMarginCalculatorParameters(\\n        MarginCalculatorParameters memory _marginCalculatorParameters\\n    ) external;\\n\\n    /// @notice Sets the liquidator reward: proportion of liquidated position's margin paid as a reward to the liquidator\\n    function setLiquidatorReward(uint256 _liquidatorRewardWad) external;\\n\\n    /// @notice Function that sets the _isAlpha state variable, if it is set to true the protocol is in the Alpha State\\n    /// @dev if the Margin Engine is at the alpha state, lp margin updates can only be done via the periphery which in turn takes care of margin caps for the LPs\\n    /// @dev this function can only be called by the owner of the VAMM\\n    function setIsAlpha(bool __isAlpha) external;\\n\\n    /// @notice updates the margin account of a position which can be uniquily identified with its _owner, tickLower, tickUpper\\n    /// @dev if the position has positive liquidity then before the margin update, we call the updatePositionTokenBalancesAndAccountForFees functon that calculates up to date\\n    /// @dev margin, fixed and variable token balances by taking into account the fee income from their tick range and fixed and variable deltas settled along their tick range\\n    /// @dev marginDelta is the delta applied to the current margin of a position, if the marginDelta is negative, the position is withdrawing margin, if the marginDelta is positive, the position is depositing funds in terms of the underlying tokens\\n    /// @dev if marginDelta is negative, we need to check if the msg.sender is either the _owner of the position or the msg.sender is apporved by the _owner to act on their behalf in Voltz Protocol\\n    /// @dev the approval logic is implemented in the Factory.sol\\n    /// @dev if marginDelta is negative, we additionally need to check if post the initial margin requirement is still satisfied post withdrawal\\n    /// @dev if marginDelta is positive, the depositor of the margin is either the msg.sender or the owner who interacted through an approved peripheral contract\\n    function updatePositionMargin(\\n        address _owner,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        int256 marginDelta\\n    ) external;\\n\\n    /// @notice Settles a Position\\n    /// @dev Can be called by anyone\\n    /// @dev A position cannot be settled before maturity\\n    /// @dev Steps to settle a position:\\n    /// @dev 1. Retrieve the current fixed and variable token growth inside the tick range of a position\\n    /// @dev 2. Calculate accumulated fixed and variable balances of the position since the last mint/poke/burn\\n    /// @dev 3. Update the postion's fixed and variable token balances\\n    /// @dev 4. Update the postion's fixed and varaible token growth inside last to enable future updates\\n    /// @dev 5. Calculates the settlement cashflow from all of the IRS contracts the position has entered since entering the AMM\\n    /// @dev 6. Updates the fixed and variable token balances of the position to be zero, adds the settlement cashflow to the position's current margin\\n    function settlePosition(\\n        address _owner,\\n        int24 _tickLower,\\n        int24 _tickUpper\\n    ) external;\\n\\n    /// @notice Liquidate a Position\\n    /// @dev Steps to liquidate: update position's fixed and variable token balances to account for balances accumulated throughout the trades made since the last mint/burn/poke,\\n    /// @dev Check if the position is liquidatable by calling the isLiquidatablePosition function of the calculator, revert if that is not the case,\\n    /// @dev Calculate the liquidation reward = current margin of the position * liquidatorReward, subtract the liquidator reward from the position margin,\\n    /// @dev Burn the position's liquidity, unwind unnetted fixed and variable balances of a position, transfer the reward to the liquidator\\n    function liquidatePosition(\\n        address _owner,\\n        int24 _tickLower,\\n        int24 _tickUpper\\n    ) external returns (uint256);\\n\\n    /// @notice Update a Position post VAMM induced mint or burn\\n    /// @dev Steps taken:\\n    /// @dev 1. Update position liquidity based on params.liquidityDelta\\n    /// @dev 2. Update fixed and variable token balances of the position based on how much has been accumulated since the last mint/burn/poke\\n    /// @dev 3. Update position's margin by taking into account the position accumulated fees since the last mint/burn/poke\\n    /// @dev 4. Update fixed and variable token growth + fee growth in the position info struct for future interactions with the position\\n    /// @param _params necessary for the purposes of referencing the position being updated (owner, tickLower, tickUpper, _) and the liquidity delta that needs to be applied to position._liquidity\\n    function updatePositionPostVAMMInducedMintBurn(\\n        IPositionStructs.ModifyPositionParams memory _params\\n    ) external returns (int256 _positionMarginRequirement);\\n\\n    // @notive Update a position post VAMM induced swap\\n    /// @dev Since every position can also engage in swaps with the VAMM, this function needs to be invoked after non-external calls are made to the VAMM's swap function\\n    /// @dev This purpose of this function is to:\\n    /// @dev 1. updatePositionTokenBalancesAndAccountForFees\\n    /// @dev 2. update position margin to account for fees paid to execute the swap\\n    /// @dev 3. calculate the position margin requrement given the swap, check if the position marigin satisfies the most up to date requirement\\n    /// @dev 4. if all the requirements are satisfied then position gets updated to take into account the swap that it just entered, if the minimum margin requirement is not satisfied then the transaction will revert\\n    function updatePositionPostVAMMInducedSwap(\\n        address _owner,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        int256 _fixedTokenDelta,\\n        int256 _variableTokenDelta,\\n        uint256 _cumulativeFeeIncurred,\\n        int256 _fixedTokenDeltaUnbalanced\\n    ) external returns (int256 _positionMarginRequirement);\\n\\n    /// @notice function that can only be called by the owner enables collection of protocol generated fees from any give margin engine\\n    /// @param _recipient the address which collects the protocol generated fees\\n    /// @param _amount the amount in terms of underlying tokens collected from the protocol's earnings\\n    function collectProtocol(address _recipient, uint256 _amount) external;\\n\\n    /// @notice sets the Virtual Automated Market Maker (VAMM) attached to the MarginEngine\\n    /// @dev the VAMM is responsible for price discovery, whereas the management of the underlying collateral and liquidations are handled by the Margin Engine\\n    function setVAMM(IVAMM _vAMM) external;\\n\\n    /// @notice sets the Virtual Automated Market Maker (VAMM) attached to the MarginEngine\\n    /// @dev the VAMM is responsible for price discovery, whereas the management of the underlying collateral and liquidations are handled by the Margin Engine\\n    function setRateOracle(IRateOracle __rateOracle) external;\\n\\n    /// @notice sets the Full Collateralisation Module\\n    function setFCM(IFCM _newFCM) external;\\n\\n    /// @notice transfers margin in terms of underlying tokens to a trader from the Full Collateralisation Module\\n    /// @dev post maturity date of the MarginEngine, the traders from the Full Collateralisation module will be able to settle with the MarginEngine\\n    /// @dev to ensure their fixed yield is guaranteed, in order to collect the funds from the MarginEngine, the FCM needs to invoke the transferMarginToFCMTrader function whcih is only callable by the FCM attached to a particular Margin Engine\\n    function transferMarginToFCMTrader(address _account, uint256 _marginDelta)\\n        external;\\n\\n    /// @notice Gets the maximum age of the cached historical APY value can be without being refreshed\\n    function cacheMaxAgeInSeconds() external view returns (uint256);\\n\\n    /// @notice Sets the maximum age that the cached historical APY value\\n    /// @param _cacheMaxAgeInSeconds The new maximum age that the historical APY cache can be before being considered stale\\n    function setCacheMaxAgeInSeconds(uint256 _cacheMaxAgeInSeconds) external;\\n\\n    /// @notice Get Historical APY\\n    /// @dev The lookback window used by this function is determined by `lookbackWindowInSeconds`\\n    /// @dev refresh the historical apy cache if necessary\\n    /// @return historicalAPY (Wad)\\n    function getHistoricalApy() external returns (uint256);\\n\\n    /// @notice Computes the historical APY value of the RateOracle, without updating the cached value\\n    /// @dev The lookback window used by this function is determined by `lookbackWindowInSeconds`\\n    function getHistoricalApyReadOnly() external view returns (uint256);\\n\\n    function getPositionMarginRequirement(\\n        address _recipient,\\n        int24 _tickLower,\\n        int24 _tickUpper,\\n        bool _isLM\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x4227079c661c7937b6ed0edc33068adaf257c655ebd13d565ca0b7e9ea585697\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPeriphery.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IMarginEngine.sol\\\";\\nimport \\\"../interfaces/IVAMM.sol\\\";\\nimport \\\"contracts/utils/CustomErrors.sol\\\";\\nimport \\\"contracts/interfaces/IWETH.sol\\\";\\n\\ninterface IPeriphery is CustomErrors {\\n    // events\\n\\n    /// @dev emitted after new lp margin cap is set\\n    event MarginCap(IVAMM vamm, int256 lpMarginCapNew);\\n\\n    // structs\\n\\n    struct MintOrBurnParams {\\n        IMarginEngine marginEngine;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 notional;\\n        bool isMint;\\n        int256 marginDelta;\\n    }\\n\\n    struct SwapPeripheryParams {\\n        IMarginEngine marginEngine;\\n        bool isFT;\\n        uint256 notional;\\n        uint160 sqrtPriceLimitX96;\\n        int24 tickLower;\\n        int24 tickUpper;\\n        uint256 marginDelta;\\n    }\\n\\n    // view functions\\n\\n    function getCurrentTick(IMarginEngine marginEngine)\\n        external\\n        view\\n        returns (int24 currentTick);\\n\\n    /// @param vamm VAMM for which to get the lp cap in underlying tokens\\n    /// @return Notional Cap for liquidity providers that mint or burn via periphery (enforced in the core if isAlpha is set to true)\\n    function lpMarginCaps(IVAMM vamm) external view returns (int256);\\n\\n    /// @param vamm VAMM for which to get the lp notional cumulative in underlying tokens\\n    /// @return Total amount of notional supplied by the LPs to a given VAMM via the periphery\\n    function lpMarginCumulatives(IVAMM vamm) external view returns (int256);\\n\\n    // non-view functions\\n\\n    function mintOrBurn(MintOrBurnParams memory params)\\n        external\\n        payable\\n        returns (int256 positionMarginRequirement);\\n\\n    function swap(SwapPeripheryParams memory params)\\n        external\\n        payable\\n        returns (\\n            int256 _fixedTokenDelta,\\n            int256 _variableTokenDelta,\\n            uint256 _cumulativeFeeIncurred,\\n            int256 _fixedTokenDeltaUnbalanced,\\n            int256 _marginRequirement,\\n            int24 _tickAfter\\n        );\\n\\n    function updatePositionMargin(\\n        IMarginEngine marginEngine,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        int256 marginDelta,\\n        bool fullyWithdraw\\n    ) external payable;\\n\\n    function setLPMarginCap(IVAMM vamm, int256 lpMarginCapNew) external;\\n\\n    function setLPMarginCumulative(IVAMM vamm, int256 lpMarginCumulative)\\n        external;\\n\\n    function settlePositionAndWithdrawMargin(\\n        IMarginEngine marginEngine,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper\\n    ) external;\\n\\n    function rolloverWithMint(\\n        IMarginEngine marginEngine,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        MintOrBurnParams memory paramsNewPosition\\n    ) external payable returns (int256 newPositionMarginRequirement);\\n\\n    function rolloverWithSwap(\\n        IMarginEngine marginEngine,\\n        address owner,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        SwapPeripheryParams memory paramsNewPosition\\n    )\\n        external\\n        payable\\n        returns (\\n            int256 _fixedTokenDelta,\\n            int256 _variableTokenDelta,\\n            uint256 _cumulativeFeeIncurred,\\n            int256 _fixedTokenDeltaUnbalanced,\\n            int256 _marginRequirement,\\n            int24 _tickAfter\\n        );\\n}\\n\",\"keccak256\":\"0xff3d29d1698110f2a0a8d2544b09d0b54775687000e7879be1fd8ec8e4ad1b16\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPositionStructs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\n\\ninterface IPositionStructs {\\n    struct ModifyPositionParams {\\n        // the address that owns the position\\n        address owner;\\n        // the lower and upper tick of the position\\n        int24 tickLower;\\n        int24 tickUpper;\\n        // any change in liquidity\\n        int128 liquidityDelta;\\n    }\\n}\\n\",\"keccak256\":\"0x9a075e4f30b70a2261c4e4406bebd9ae12b77445bfa3986f4bc220730fe3f493\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVAMM.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\nimport \\\"./IMarginEngine.sol\\\";\\nimport \\\"./IFactory.sol\\\";\\nimport \\\"./IPositionStructs.sol\\\";\\nimport \\\"../core_libraries/Tick.sol\\\";\\nimport \\\"contracts/utils/CustomErrors.sol\\\";\\n\\ninterface IVAMM is IPositionStructs, CustomErrors {\\n    function setPausability(bool state) external;\\n\\n    // events\\n    event Swap(\\n        address sender,\\n        address indexed recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        int256 desiredNotional,\\n        uint160 sqrtPriceLimitX96,\\n        uint256 cumulativeFeeIncurred,\\n        int256 fixedTokenDelta,\\n        int256 variableTokenDelta,\\n        int256 fixedTokenDeltaUnbalanced\\n    );\\n\\n    /// @dev emitted after a given vamm is successfully initialized\\n    event VAMMInitialization(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @dev emitted after a successful minting of a given LP position\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount\\n    );\\n\\n    /// @dev emitted after a successful burning of a given LP position\\n    event Burn(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount\\n    );\\n\\n    /// @dev emitted after setting feeProtocol\\n    event FeeProtocol(uint8 feeProtocol);\\n\\n    /// @dev emitted after fee is set\\n    event Fee(uint256 feeWad);\\n\\n    /// @dev emitted after the _isAlpha boolean is updated by the owner of the VAMM\\n    /// @dev _isAlpha boolean dictates whether the VAMM is in the Alpha State, i.e. mints can only be done via the periphery\\n    /// @dev additionally, the periphery has the logic to take care of lp notional caps in the Alpha State phase of VAMM\\n    /// @dev __isAlpha is the newly set value for the _isAlpha boolean\\n    event IsAlpha(bool __isAlpha);\\n\\n    event VAMMPriceChange(int24 tick);\\n\\n    // structs\\n\\n    struct VAMMVars {\\n        /// @dev The current price of the pool as a sqrt(variableToken/fixedToken) Q64.96 value\\n        uint160 sqrtPriceX96;\\n        /// @dev The current tick of the vamm, i.e. according to the last tick transition that was run.\\n        int24 tick;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)\\n        uint8 feeProtocol;\\n    }\\n\\n    struct SwapParams {\\n        /// @dev Address of the trader initiating the swap\\n        address recipient;\\n        /// @dev The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n        int256 amountSpecified;\\n        /// @dev The Q64.96 sqrt price limit. If !isFT, the price cannot be less than this\\n        uint160 sqrtPriceLimitX96;\\n        /// @dev lower tick of the position\\n        int24 tickLower;\\n        /// @dev upper tick of the position\\n        int24 tickUpper;\\n    }\\n\\n    struct SwapCache {\\n        /// @dev liquidity at the beginning of the swap\\n        uint128 liquidityStart;\\n        // the current protocol fee as a percentage of the swap fee taken on withdrawal\\n        // represented as an integer denominator (1/x)%\\n        uint8 feeProtocol;\\n    }\\n\\n    /// @dev the top level state of the swap, the results of which are recorded in storage at the end\\n    struct SwapState {\\n        /// @dev the amount remaining to be swapped in/out of the input/output asset\\n        int256 amountSpecifiedRemaining;\\n        /// @dev the amount already swapped out/in of the output/input asset\\n        int256 amountCalculated;\\n        /// @dev current sqrt(price)\\n        uint160 sqrtPriceX96;\\n        /// @dev the tick associated with the current price\\n        int24 tick;\\n        /// @dev the global fixed token growth\\n        int256 fixedTokenGrowthGlobalX128;\\n        /// @dev the global variable token growth\\n        int256 variableTokenGrowthGlobalX128;\\n        /// @dev the current liquidity in range\\n        uint128 liquidity;\\n        /// @dev the global fee growth of the underlying token\\n        uint256 feeGrowthGlobalX128;\\n        /// @dev amount of underlying token paid as protocol fee\\n        uint256 protocolFee;\\n        /// @dev cumulative fee incurred while initiating a swap\\n        uint256 cumulativeFeeIncurred;\\n        /// @dev fixedTokenDelta that will be applied to the fixed token balance of the position executing the swap (recipient)\\n        int256 fixedTokenDeltaCumulative;\\n        /// @dev variableTokenDelta that will be applied to the variable token balance of the position executing the swap (recipient)\\n        int256 variableTokenDeltaCumulative;\\n        /// @dev fixed token delta cumulative but without rebalancings applied\\n        int256 fixedTokenDeltaUnbalancedCumulative;\\n    }\\n\\n    struct StepComputations {\\n        /// @dev the price at the beginning of the step\\n        uint160 sqrtPriceStartX96;\\n        /// @dev the next tick to swap to from the current tick in the swap direction\\n        int24 tickNext;\\n        /// @dev whether tickNext is initialized or not\\n        bool initialized;\\n        /// @dev sqrt(price) for the next tick (1/0)\\n        uint160 sqrtPriceNextX96;\\n        /// @dev how much is being swapped in in this step\\n        uint256 amountIn;\\n        /// @dev how much is being swapped out\\n        uint256 amountOut;\\n        /// @dev how much fee is being paid in (underlying token)\\n        uint256 feeAmount;\\n        /// @dev ...\\n        uint256 feeProtocolDelta;\\n        /// @dev ...\\n        int256 fixedTokenDeltaUnbalanced; // for LP\\n        /// @dev ...\\n        int256 fixedTokenDelta; // for LP\\n        /// @dev ...\\n        int256 variableTokenDelta; // for LP\\n    }\\n\\n    /// @dev \\\"constructor\\\" for proxy instances\\n    function initialize(IMarginEngine __marginEngine, int24 __tickSpacing)\\n        external;\\n\\n    // immutables\\n\\n    /// @notice The vamm's fee (proportion) in wad\\n    /// @return The fee in wad\\n    function feeWad() external view returns (uint256);\\n\\n    /// @notice The vamm tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter should be enforced per tick (when setting) to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to the vamm\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n\\n    // state variables\\n\\n    /// @return The current VAMM Vars (see struct definition for semantics)\\n    function vammVars() external view returns (VAMMVars memory);\\n\\n    /// @return If true, the VAMM Proxy is currently in alpha state, hence minting can only be done via the periphery. If false, minting can be done directly via VAMM.\\n    function isAlpha() external view returns (bool);\\n\\n    /// @notice The fixed token growth accumulated per unit of liquidity for the entire life of the vamm\\n    /// @dev This value can overflow the uint256\\n    function fixedTokenGrowthGlobalX128() external view returns (int256);\\n\\n    /// @notice The variable token growth accumulated per unit of liquidity for the entire life of the vamm\\n    /// @dev This value can overflow the uint256\\n    function variableTokenGrowthGlobalX128() external view returns (int256);\\n\\n    /// @notice The fee growth collected per unit of liquidity for the entire life of the vamm\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobalX128() external view returns (uint256);\\n\\n    /// @notice The currently in range liquidity available to the vamm\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice The amount underlying token that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint256\\n    function protocolFees() external view returns (uint256);\\n\\n    function marginEngine() external view returns (IMarginEngine);\\n\\n    function factory() external view returns (IFactory);\\n\\n    /// @notice Function that sets the feeProtocol of the vamm\\n    /// @dev the current protocol fee as a percentage of the swap fee taken on withdrawal\\n    // represented as an integer denominator (1/x)\\n    function setFeeProtocol(uint8 feeProtocol) external;\\n\\n    /// @notice Function that sets the _isAlpha state variable, if it is set to true the protocol is in the Alpha State\\n    /// @dev if the VAMM is at the alpha state, mints can only be done via the periphery which in turn takes care of notional caps for the LPs\\n    /// @dev this function can only be called by the owner of the VAMM\\n    function setIsAlpha(bool __isAlpha) external;\\n\\n    /// @notice Function that sets fee of the vamm\\n    /// @dev The vamm's fee (proportion) in wad\\n    function setFee(uint256 _fee) external;\\n\\n    /// @notice Updates internal accounting to reflect a collection of protocol fees. The actual transfer of fees must happen separately in the AMM\\n    /// @dev can only be done via the collectProtocol function of the parent AMM of the vamm\\n    function updateProtocolFees(uint256 protocolFeesCollected) external;\\n\\n    /// @notice Sets the initial price for the vamm\\n    /// @dev Price is represented as a sqrt(amountVariableToken/amountFixedToken) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the vamm as a Q64.96\\n    function initializeVAMM(uint160 sqrtPriceX96) external;\\n\\n    /// @notice removes liquidity given recipient/tickLower/tickUpper of the position\\n    /// @param recipient The address for which the liquidity will be removed\\n    /// @param tickLower The lower tick of the position in which to remove liquidity\\n    /// @param tickUpper The upper tick of the position in which to remove liqudiity\\n    /// @param amount The amount of liquidity to burn\\n    function burn(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (int256 positionMarginRequirement);\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (int256 positionMarginRequirement);\\n\\n    /// @notice Initiate an Interest Rate Swap\\n    /// @param params SwapParams necessary to initiate an Interest Rate Swap\\n    /// @return fixedTokenDelta Fixed Token Delta\\n    /// @return variableTokenDelta Variable Token Delta\\n    /// @return cumulativeFeeIncurred Cumulative Fee Incurred\\n    function swap(SwapParams memory params)\\n        external\\n        returns (\\n            int256 fixedTokenDelta,\\n            int256 variableTokenDelta,\\n            uint256 cumulativeFeeIncurred,\\n            int256 fixedTokenDeltaUnbalanced,\\n            int256 marginRequirement\\n        );\\n\\n    /// @notice Look up information about a specific tick in the amm\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross: the total amount of position liquidity that uses the vamm either as tick lower or tick upper,\\n    /// liquidityNet: how much liquidity changes when the vamm price crosses the tick,\\n    /// feeGrowthOutsideX128: the fee growth on the other side of the tick from the current tick in underlying token. i.e. if liquidityGross is greater than 0. In addition, these values are only relative.\\n    function ticks(int24 tick) external view returns (Tick.Info memory);\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Computes the current fixed and variable token growth inside a given tick range given the current tick in the vamm\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @return fixedTokenGrowthInsideX128 Fixed Token Growth inside the given tick range\\n    /// @return variableTokenGrowthInsideX128 Variable Token Growth inside the given tick range\\n    /// @return feeGrowthInsideX128 Fee Growth Inside given tick range\\n    function computeGrowthInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int256 fixedTokenGrowthInsideX128,\\n            int256 variableTokenGrowthInsideX128,\\n            uint256 feeGrowthInsideX128\\n        );\\n\\n    /// @notice refreshes the Rate Oracle attached to the Margin Engine\\n    function refreshRateOracle() external;\\n\\n    /// @notice The rateOracle contract which lets the protocol access historical apys in the yield bearing pools it is built on top of\\n    /// @return The underlying ERC20 token (e.g. USDC)\\n    function getRateOracle() external view returns (IRateOracle);\\n}\\n\",\"keccak256\":\"0x08118bc23107c8458e9282cf1f01d4d93b8819fee14864b796dea1161886fa41\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/IERC20Minimal.sol\\\";\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x092e1e18c72b66b6825907014447da14390460f0fdf924123ebe38983ae73017\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/aave/IAaveV2LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\npragma solidity =0.8.9;\\nimport \\\"../IERC20Minimal.sol\\\";\\n\\n// Adapted from https://github.com/pendle-finance/pendle-core/blob/master/contracts/interfaces/IAaveV2LendingPool.sol\\ninterface IAaveV2LendingPool {\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    // function deposit(\\n    //     address asset,\\n    //     uint256 amount,\\n    //     address onBehalfOf,\\n    //     uint16 referralCode\\n    // ) external;\\n\\n    function getReserveData(IERC20Minimal asset) external view returns (ReserveData memory);\\n\\n    function getReserveNormalizedIncome(IERC20Minimal underlyingAsset) external view returns (uint256);\\n\\n    function getReserveNormalizedVariableDebt(IERC20Minimal underlyingAsset) external view returns (uint256);\\n\\n    /**\\n    * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n    * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n    * @param asset The address of the underlying asset to withdraw\\n    * @param amount The underlying amount to be withdrawn\\n    *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n    * @param to Address that will receive the underlying, same as msg.sender if the user\\n    *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n    *   different wallet\\n    * @return The final amount withdrawn\\n    **/\\n    function withdraw(\\n        IERC20Minimal asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    // /**\\n    //  * @dev Returns the user account data across all the reserves\\n    //  * @param user The address of the user\\n    //  * @return totalCollateralETH the total collateral in ETH of the user\\n    //  * @return totalDebtETH the total debt in ETH of the user\\n    //  * @return availableBorrowsETH the borrowing power left of the user\\n    //  * @return currentLiquidationThreshold the liquidation threshold of the user\\n    //  * @return ltv the loan to value of the user\\n    //  * @return healthFactor the current health factor of the user\\n    //  **/\\n    // function getUserAccountData(address user)\\n    //     external\\n    //     view\\n    //     returns (\\n    //         uint256 totalCollateralETH,\\n    //         uint256 totalDebtETH,\\n    //         uint256 availableBorrowsETH,\\n    //         uint256 currentLiquidationThreshold,\\n    //         uint256 ltv,\\n    //         uint256 healthFactor\\n    //     );\\n}\",\"keccak256\":\"0x6a97a6b2f31ade925af119528e0b6fa7518514bc2f2790cefe0b6d05b7a2b981\",\"license\":\"MIT\"},\"contracts/interfaces/fcms/IFCM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../IMarginEngine.sol\\\";\\nimport \\\"../../utils/CustomErrors.sol\\\";\\nimport \\\"../IERC20Minimal.sol\\\";\\nimport \\\"../../core_libraries/TraderWithYieldBearingAssets.sol\\\";\\nimport \\\"../IVAMM.sol\\\";\\nimport \\\"../rate_oracles/IRateOracle.sol\\\";\\n\\ninterface IFCM is CustomErrors {\\n    function setPausability(bool state) external;\\n\\n    function getTraderWithYieldBearingAssets(address trader)\\n        external\\n        view\\n        returns (TraderWithYieldBearingAssets.Info memory traderInfo);\\n\\n    /// @notice Initiate a Fully Collateralised Fixed Taker Swap\\n    /// @param notional amount of notional (in terms of the underlying token) to trade\\n    /// @param sqrtPriceLimitX96 the sqrtPriceLimit (in binary fixed point math notation) beyond which swaps won't be executed\\n    /// @dev An example of an initiated fully collateralised fixed taker swap is a scenario where a trader with 100 aTokens wishes to get a fixed return on them\\n    /// @dev they can choose to deposit their 100aTokens into the FCM (enter into a fixed taker position with a notional of 100) to swap variable cashflows from the aTokens\\n    /// @dev with the fixed cashflows from the variable takers\\n    function initiateFullyCollateralisedFixedTakerSwap(\\n        uint256 notional,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (int256 fixedTokenDelta, int256 variableTokenDelta, uint256 cumulativeFeeIncurred, int256 fixedTokenDeltaUnbalanced);\\n\\n    /// @notice Unwind a Fully Collateralised Fixed Taker Swap\\n    /// @param notionalToUnwind The amount of notional of the original Fully Collateralised Fixed Taker swap to be unwound at the current VAMM fixed rates\\n    /// @param sqrtPriceLimitX96 the sqrtPriceLimit (in binary fixed point math notation) beyond which the unwind swaps won't be executed\\n    /// @dev The purpose of this function is to let fully collateralised fixed takers to exist their swaps by entering into variable taker positions against the VAMM\\n    /// @dev thus effectively releasing the margin in yield bearing tokens from the fixed swap contract\\n    function unwindFullyCollateralisedFixedTakerSwap(\\n        uint256 notionalToUnwind,\\n        uint160 sqrtPriceLimitX96\\n    ) external returns (int256 fixedTokenDelta, int256 variableTokenDelta, uint256 cumulativeFeeIncurred, int256 fixedTokenDeltaUnbalanced);\\n\\n    /// @notice Settle Trader\\n    /// @dev this function in the fcm let's traders settle with the MarginEngine based on their settlement cashflows which is a functon of their fixed and variable token balances\\n    function settleTrader() external returns (int256);\\n\\n    /// @notice\\n    /// @param account address of the position owner from the MarginEngine who wishes to settle with the FCM in underlying tokens\\n    /// @param marginDeltaInUnderlyingTokens amount in terms of underlying tokens that needs to be settled with the trader from the MarginEngine\\n    function transferMarginToMarginEngineTrader(\\n        address account,\\n        uint256 marginDeltaInUnderlyingTokens\\n    ) external;\\n\\n    /// @notice initialize is the constructor for the proxy instances of the FCM\\n    /// @dev \\\"constructor\\\" for proxy instances\\n    /// @dev in the initialize function we set the vamm and the margiEngine associated with the fcm\\n    /// @dev different FCM implementations are free to have different implementations for the initialisation logic\\n    function initialize(IVAMM __vamm, IMarginEngine __marginEngine)\\n        external;\\n\\n    /// @notice Margine Engine linked to the Full Collateralisation Module\\n    /// @return marginEngine Margine Engine linked to the Full Collateralisation Module\\n    function marginEngine() external view returns (IMarginEngine);\\n\\n    /// @notice VAMM linked to the Full Collateralisation Module\\n    /// @return VAMM linked to the Full Collateralisation Module\\n    function vamm() external view returns (IVAMM);\\n\\n    /// @notice Rate Oracle linked to the Full Collateralisation Module\\n    /// @return Rate Oracle linked to the Full Collateralisation Module\\n    function rateOracle() external view returns (IRateOracle);\\n\\n    event FullyCollateralisedSwap(\\n        address indexed trader,\\n        uint256 desiredNotional,\\n        uint160 sqrtPriceLimitX96,\\n        uint256 cumulativeFeeIncurred,\\n        int256 fixedTokenDelta,\\n        int256 variableTokenDelta,\\n        int256 fixedTokenDeltaUnbalanced\\n    );\\n\\n    event FullyCollateralisedUnwind(\\n        address indexed trader,\\n        uint256 desiredNotional,\\n        uint160 sqrtPriceLimitX96,\\n        uint256 cumulativeFeeIncurred,\\n        int256 fixedTokenDelta,\\n        int256 variableTokenDelta,\\n        int256 fixedTokenDeltaUnbalanced\\n    );\\n\\n    event fcmPositionSettlement(\\n        address indexed trader,\\n        int256 settlementCashflow\\n    );\\n\\n    event FCMTraderUpdate(\\n        address indexed trader,\\n        uint256 marginInScaledYieldBearingTokens,\\n        int256 fixedTokenBalance,\\n        int256 variableTokenBalance\\n    );\\n}\\n\",\"keccak256\":\"0x9bbea9ba8db9f5ddf1c464207452571684e292832f75e11f8047a302acf2688e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/rate_oracles/IAaveRateOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\nimport \\\"../aave/IAaveV2LendingPool.sol\\\";\\nimport \\\"../rate_oracles/IRateOracle.sol\\\";\\n\\ninterface IAaveRateOracle is IRateOracle {\\n\\n    /// @notice Gets the address of the Aave Lending Pool\\n    /// @return Address of the Aave Lending Pool\\n    function aaveLendingPool() external view returns (IAaveV2LendingPool);\\n\\n}\",\"keccak256\":\"0x02605b96930c154f95738e2e647ac2ca943854f851d6fa7bf86d70dab991679e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/rate_oracles/IRateOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\nimport \\\"contracts/utils/CustomErrors.sol\\\";\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"contracts/utils/CustomErrors.sol\\\";\\nimport \\\"../IERC20Minimal.sol\\\";\\n\\n/// @dev The RateOracle is used for two purposes on the Voltz Protocol\\n/// @dev Settlement: in order to be able to settle IRS positions after the termEndTimestamp of a given AMM\\n/// @dev Margin Engine Computations: getApyFromTo is used by the MarginCalculator and MarginEngine\\n/// @dev It is necessary to produce margin requirements for Trader and Liquidity Providers\\ninterface IRateOracle is CustomErrors {\\n\\n    // events\\n    event MinSecondsSinceLastUpdate(uint256 _minSecondsSinceLastUpdate);\\n    event OracleBufferUpdate(\\n        uint256 blockTimestampScaled,\\n        address source,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        uint256 observedValue,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    );\\n\\n    /// @notice Emitted by the rate oracle for increases to the number of observations that can be stored\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event RateCardinalityNext(\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    // view functions\\n\\n    /// @notice Gets minimum number of seconds that need to pass since the last update to the rates array\\n    /// @dev This is a throttling mechanic that needs to ensure we don't run out of space in the rates array\\n    /// @dev The maximum size of the rates array is 65535 entries\\n    // AB: as long as this doesn't affect the termEndTimestamp rateValue too much\\n    // AB: can have a different minSecondsSinceLastUpdate close to termEndTimestamp to have more granularity for settlement purposes\\n    /// @return minSecondsSinceLastUpdate in seconds\\n    function minSecondsSinceLastUpdate() external view returns (uint256);\\n\\n    /// @notice Gets the address of the underlying token of the RateOracle\\n    /// @dev may be unset (`address(0)`) if the underlying is ETH\\n    /// @return underlying The address of the underlying token\\n    function underlying() external view returns (IERC20Minimal);\\n\\n    /// @notice Gets the variable factor between termStartTimestamp and termEndTimestamp\\n    /// @return result The variable factor\\n    /// @dev If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). Term end timestamps are cached for quick retrieval later.\\n    /// @dev If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());\\n    /// @dev if queried before maturity then returns the rate of return between pool initiation and current timestamp (in wad)\\n    /// @dev if queried after maturity then returns the rate of return between pool initiation and maturity timestamp (in wad)\\n    function variableFactor(uint256 termStartTimestamp, uint256 termEndTimestamp) external returns(uint256 result);\\n\\n    /// @notice Gets the variable factor between termStartTimestamp and termEndTimestamp\\n    /// @return result The variable factor\\n    /// @dev If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). No caching takes place.\\n    /// @dev If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());\\n    function variableFactorNoCache(uint256 termStartTimestamp, uint256 termEndTimestamp) external view returns(uint256 result);\\n    \\n    /// @notice Calculates the observed interest returned by the underlying in a given period\\n    /// @dev Reverts if we have no data point for `_from`\\n    /// @param _from The timestamp of the start of the period, in seconds\\n    /// @return The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\\n    function getRateFrom(uint256 _from)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Calculates the observed interest returned by the underlying in a given period\\n    /// @dev Reverts if we have no data point for either timestamp\\n    /// @param _from The timestamp of the start of the period, in seconds\\n    /// @param _to The timestamp of the end of the period, in seconds\\n    /// @return The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\\n    function getRateFromTo(uint256 _from, uint256 _to)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// @notice Calculates the observed APY returned by the rate oracle between the given timestamp and the current time\\n    /// @param from The timestamp of the start of the period, in seconds\\n    /// @dev Reverts if we have no data point for `from`\\n    /// @return apyFromTo The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\\n    function getApyFrom(uint256 from)\\n        external\\n        view\\n        returns (uint256 apyFromTo);\\n\\n    /// @notice Calculates the observed APY returned by the rate oracle in a given period\\n    /// @param from The timestamp of the start of the period, in seconds\\n    /// @param to The timestamp of the end of the period, in seconds\\n    /// @dev Reverts if we have no data point for either timestamp\\n    /// @return apyFromTo The \\\"floating rate\\\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16\\n    function getApyFromTo(uint256 from, uint256 to)\\n        external\\n        view\\n        returns (uint256 apyFromTo);\\n\\n    // non-view functions\\n\\n    /// @notice Sets minSecondsSinceLastUpdate: The minimum number of seconds that need to pass since the last update to the rates array\\n    /// @dev Can only be set by the Factory Owner\\n    function setMinSecondsSinceLastUpdate(uint256 _minSecondsSinceLastUpdate) external;\\n\\n    /// @notice Increase the maximum number of rates observations that this RateOracle will store\\n    /// @dev This method is no-op if the RateOracle already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param rateCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 rateCardinalityNext) external;\\n\\n    /// @notice Writes a rate observation to the rates array given the current rate cardinality, rate index and rate cardinality next\\n    /// Write oracle entry is called whenever a new position is minted via the vamm or when a swap is initiated via the vamm\\n    /// That way the gas costs of Rate Oracle updates can be distributed across organic interactions with the protocol\\n    function writeOracleEntry() external;\\n\\n    /// @notice unique ID of the underlying yield bearing protocol (e.g. Aave v2 has id 1)\\n    /// @return yieldBearingProtocolID unique id of the underlying yield bearing protocol\\n    function UNDERLYING_YIELD_BEARING_PROTOCOL_ID() external view returns(uint8 yieldBearingProtocolID);\\n\\n    /// @notice returns the last change in rate and time\\n    /// Gets the last two observations and returns the change in rate and time.\\n    /// This can help us to extrapolate an estiamte of the current rate from recent known rates. \\n    function getLastRateSlope()\\n        external\\n        view\\n        returns (uint256 rateChange, uint32 timeChange);\\n\\n    /// @notice Get the current \\\"rate\\\" in Ray at the current timestamp.\\n    /// This might be a direct reading if real-time readings are available, or it might be an extrapolation from recent known rates.\\n    /// The source and expected values of \\\"rate\\\" may differ by rate oracle type. All that\\n    /// matters is that we can divide one \\\"rate\\\" by another \\\"rate\\\" to get the factor of growth between the two timestamps.\\n    /// For example if we have rates of { (t=0, rate=5), (t=100, rate=5.5) }, we can divide 5.5 by 5 to get a growth factor\\n    /// of 1.1, suggesting that 10% growth in capital was experienced between timesamp 0 and timestamp 100.\\n    /// @dev For convenience, the rate is normalised to Ray for storage, so that we can perform consistent math across all rates.\\n    /// @dev This function should revert if a valid rate cannot be discerned\\n    /// @return currentRate the rate in Ray (decimal scaled up by 10^27 for storage in a uint256)\\n    function getCurrentRateInRay()\\n        external\\n        view\\n        returns (uint256 currentRate);\\n\\n    /// @notice returns the last change in block number and timestamp \\n    /// Some implementations may use this data to estimate timestamps for recent rate readings, if we only know the block number\\n    function getBlockSlope()\\n        external\\n        view\\n        returns (uint256 blockChange, uint32 timeChange);\\n}\\n\",\"keccak256\":\"0x8088426b08443082b49a842020462c118b9d39186655af557330ab35bde67eba\",\"license\":\"Apache-2.0\"},\"contracts/rate_oracles/AaveBorrowRateOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"../interfaces/rate_oracles/IAaveRateOracle.sol\\\";\\nimport \\\"../interfaces/aave/IAaveV2LendingPool.sol\\\";\\nimport \\\"../rate_oracles/BaseRateOracle.sol\\\";\\n\\ncontract AaveBorrowRateOracle is BaseRateOracle, IAaveRateOracle {\\n    /// @inheritdoc IAaveRateOracle\\n    IAaveV2LendingPool public override aaveLendingPool;\\n\\n    uint8 public constant override UNDERLYING_YIELD_BEARING_PROTOCOL_ID = 5; // id of aave borrow v2 is 5\\n\\n    constructor(\\n        IAaveV2LendingPool _aaveLendingPool,\\n        IERC20Minimal _underlying,\\n        uint32[] memory _times,\\n        uint256[] memory _results\\n    ) BaseRateOracle(_underlying) {\\n        require(\\n            address(_aaveLendingPool) != address(0),\\n            \\\"aave pool must exist\\\"\\n        );\\n        // Check that underlying was set in BaseRateOracle\\n        require(address(underlying) != address(0), \\\"underlying must exist\\\");\\n        aaveLendingPool = _aaveLendingPool;\\n\\n        _populateInitialObservations(_times, _results);\\n    }\\n\\n    /// @inheritdoc BaseRateOracle\\n    function getLastUpdatedRate()\\n        public\\n        view\\n        override\\n        returns (uint32 timestamp, uint256 resultRay)\\n    {\\n        resultRay = aaveLendingPool.getReserveNormalizedVariableDebt(underlying);\\n        if (resultRay == 0) {\\n            revert CustomErrors.AavePoolGetReserveNormalizedVariableDebtReturnedZero();\\n        }\\n\\n        return (Time.blockTimestampTruncated(), resultRay);\\n    }\\n}\\n\",\"keccak256\":\"0x2462ed4e6a59ecb84418cb54d2c07045bfc63edd327de3b181c1405390858403\",\"license\":\"Apache-2.0\"},\"contracts/rate_oracles/BaseRateOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\nimport \\\"./OracleBuffer.sol\\\";\\nimport \\\"../interfaces/rate_oracles/IRateOracle.sol\\\";\\nimport \\\"../core_libraries/FixedAndVariableMath.sol\\\";\\nimport \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport \\\"../interfaces/IFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../core_libraries/Time.sol\\\";\\nimport \\\"../utils/WadRayMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @notice Common contract base for a Rate Oracle implementation.\\n///  This contract is abstract. To make the contract deployable override the\\n/// `getCurrentRateInRay` and `getLastUpdatedRate` functions and the `UNDERLYING_YIELD_BEARING_PROTOCOL_ID` constant.\\n/// @dev Each specific rate oracle implementation will need to implement the virtual functions\\nabstract contract BaseRateOracle is IRateOracle, Ownable {\\n    uint256 public constant ONE_IN_WAD = 1e18;\\n\\n    using OracleBuffer for OracleBuffer.Observation[65535];\\n\\n    /// @notice a cache of settlement rates for interest rate swaps associated with this rate oracle, indexed by start time and then end time\\n    mapping(uint32 => mapping(uint32 => uint256)) public settlementRateCache;\\n    struct OracleVars {\\n        /// @dev the most-recently updated index of the rates array\\n        uint16 rateIndex;\\n        /// @dev the current maximum number of rates that are being stored\\n        uint16 rateCardinality;\\n        /// @dev the next maximum number of rates to store, triggered in rates.write\\n        uint16 rateCardinalityNext;\\n    }\\n\\n    struct BlockInfo {\\n        uint32 timestamp;\\n        uint256 number;\\n    }\\n\\n    struct BlockSlopeInfo {\\n        uint32 timeChange;\\n        uint256 blockChange;\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    IERC20Minimal public immutable override underlying;\\n\\n    /// @inheritdoc IRateOracle\\n    uint256 public override minSecondsSinceLastUpdate;\\n\\n    OracleVars public oracleVars;\\n\\n    /// @notice the observations tracked over time by this oracle\\n    OracleBuffer.Observation[65535] public observations;\\n\\n    BlockInfo public lastUpdatedBlock;\\n    BlockSlopeInfo public currentBlockSlope;\\n\\n    /// @inheritdoc IRateOracle\\n    function setMinSecondsSinceLastUpdate(uint256 _minSecondsSinceLastUpdate)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (minSecondsSinceLastUpdate != _minSecondsSinceLastUpdate) {\\n            minSecondsSinceLastUpdate = _minSecondsSinceLastUpdate;\\n\\n            emit MinSecondsSinceLastUpdate(_minSecondsSinceLastUpdate);\\n        }\\n    }\\n\\n    constructor(IERC20Minimal _underlying) {\\n        underlying = _underlying;\\n\\n        lastUpdatedBlock.number = block.number;\\n        lastUpdatedBlock.timestamp = Time.blockTimestampTruncated();\\n\\n        currentBlockSlope.timeChange = 1500;\\n        currentBlockSlope.blockChange = 100;\\n    }\\n\\n    /// @dev this must be called at the *end* of the constructor, after the contract member variables have been set, because it needs to read rates.\\n    function _populateInitialObservations(\\n        uint32[] memory _times,\\n        uint256[] memory _results\\n    ) internal {\\n        // If we're using even half the max buffer size, something has gone wrong\\n        require(_times.length < OracleBuffer.MAX_BUFFER_LENGTH / 2, \\\"MAXT\\\");\\n        uint16 length = uint16(_times.length);\\n        require(length == _results.length, \\\"Lengths must match\\\");\\n\\n        // We must pass equal-sized dynamic arrays containing initial timestamps and observed values\\n        uint32[] memory times = new uint32[](length + 1);\\n        uint256[] memory results = new uint256[](length + 1);\\n        for (uint256 i = 0; i < length; i++) {\\n            times[i] = _times[i];\\n            results[i] = _results[i];\\n        }\\n\\n        (\\n            uint32 lastUpdatedTimestamp,\\n            uint256 lastUpdatedRate\\n        ) = getLastUpdatedRate();\\n\\n        // `observations.initialize` will check that all times are correctly sorted so no need to check here\\n        times[length] = lastUpdatedTimestamp;\\n        results[length] = lastUpdatedRate;\\n\\n        (\\n            oracleVars.rateCardinality,\\n            oracleVars.rateCardinalityNext,\\n            oracleVars.rateIndex\\n        ) = observations.initialize(times, results);\\n    }\\n\\n    /// @notice Calculates the interpolated (counterfactual) rate value\\n    /// @param beforeOrAtRateValueRay  Rate Value (in ray) before the timestamp for which we want to calculate the counterfactual rate value\\n    /// @param apyFromBeforeOrAtToAtOrAfterWad Apy in the period between the timestamp of the beforeOrAt Rate and the atOrAfter Rate\\n    /// @param timeDeltaBeforeOrAtToQueriedTimeWad Time Delta (in wei seconds) between the timestamp of the beforeOrAt Rate and the atOrAfter Rate\\n    /// @return rateValueRay Counterfactual (interpolated) rate value in ray\\n    /// @dev Given [beforeOrAt, atOrAfter] where the timestamp for which the counterfactual is calculated is within that range (but does not touch any of the bounds)\\n    /// @dev We can calculate the apy for [beforeOrAt, atOrAfter] --> refer to this value as apyFromBeforeOrAtToAtOrAfter\\n    /// @dev Then we want a counterfactual rate value which results in apy_before_after if the apy is calculated between [beforeOrAt, timestampForCounterfactual]\\n    /// @dev Hence (1+rateValueWei/beforeOrAtRateValueWei)^(1/timeInYears) = apyFromBeforeOrAtToAtOrAfter\\n    /// @dev Hence rateValueWei = beforeOrAtRateValueWei * (1+apyFromBeforeOrAtToAtOrAfter)^timeInYears - 1)\\n    function interpolateRateValue(\\n        uint256 beforeOrAtRateValueRay,\\n        uint256 apyFromBeforeOrAtToAtOrAfterWad,\\n        uint256 timeDeltaBeforeOrAtToQueriedTimeWad\\n    ) public pure virtual returns (uint256 rateValueRay) {\\n        uint256 timeInYearsWad = FixedAndVariableMath.accrualFact(\\n            timeDeltaBeforeOrAtToQueriedTimeWad\\n        );\\n        uint256 apyPlusOne = apyFromBeforeOrAtToAtOrAfterWad + ONE_IN_WAD;\\n        uint256 factorInWad = PRBMathUD60x18.pow(apyPlusOne, timeInYearsWad);\\n        uint256 factorInRay = WadRayMath.wadToRay(factorInWad);\\n        rateValueRay = WadRayMath.rayMul(beforeOrAtRateValueRay, factorInRay);\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function increaseObservationCardinalityNext(uint16 rateCardinalityNext)\\n        external\\n        override\\n    {\\n        uint16 rateCardinalityNextOld = oracleVars.rateCardinalityNext; // for the event\\n\\n        uint16 rateCardinalityNextNew = observations.grow(\\n            rateCardinalityNextOld,\\n            rateCardinalityNext\\n        );\\n\\n        oracleVars.rateCardinalityNext = rateCardinalityNextNew;\\n\\n        if (rateCardinalityNextOld != rateCardinalityNextNew) {\\n            emit RateCardinalityNext(rateCardinalityNextNew);\\n        }\\n    }\\n\\n    /// @notice Get the last updated rate in Ray with the accompanying truncated timestamp\\n    /// This data point must be a known data point from the source of the data, and not extrapolated or interpolated by us.\\n    /// The source and expected values of \\\"rate\\\" may differ by rate oracle type. All that\\n    /// matters is that we can divide one \\\"rate\\\" by another \\\"rate\\\" to get the factor of growth between the two timestamps.\\n    /// For example if we have rates of { (t=0, rate=5), (t=100, rate=5.5) }, we can divide 5.5 by 5 to get a growth factor\\n    /// of 1.1, suggesting that 10% growth in capital was experienced between timesamp 0 and timestamp 100.\\n    /// @dev FOr convenience, the rate is normalised to Ray for storage, so that we can perform consistent math across all rates.\\n    /// @dev This function should revert if a valid rate cannot be discerned\\n    /// @return timestamp the timestamp corresponding to the known rate (could be the current time, or a time in the past)\\n    /// @return rate the rate in Ray (decimal scaled up by 10^27 for storage in a uint256)\\n    function getLastUpdatedRate()\\n        public\\n        view\\n        virtual\\n        returns (uint32 timestamp, uint256 rate);\\n\\n    /// @inheritdoc IRateOracle\\n    function getRateFromTo(uint256 _from, uint256 _to)\\n        public\\n        view\\n        override(IRateOracle)\\n        returns (uint256)\\n    {\\n        require(_from <= _to, \\\"from > to\\\");\\n\\n        if (_from == _to) {\\n            return 0;\\n        }\\n\\n        // note that we have to convert the rate multiple into a \\\"floating rate\\\" for\\n        // swap calculations, e.g. an index multiple of 1.04*10**27 corresponds to\\n        // 0.04*10**27 = 4*10*25\\n        uint32 currentTime = Time.blockTimestampTruncated();\\n        uint32 from = Time.timestampAsUint32(_from);\\n        uint32 to = Time.timestampAsUint32(_to);\\n\\n        uint256 rateFromRay = observeSingle(\\n            currentTime,\\n            from,\\n            oracleVars.rateIndex,\\n            oracleVars.rateCardinality\\n        );\\n        uint256 rateToRay = observeSingle(\\n            currentTime,\\n            to,\\n            oracleVars.rateIndex,\\n            oracleVars.rateCardinality\\n        );\\n\\n        if (rateToRay > rateFromRay) {\\n            uint256 result = WadRayMath.rayToWad(\\n                WadRayMath.rayDiv(rateToRay, rateFromRay) - WadRayMath.RAY\\n            );\\n            return result;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function getRateFrom(uint256 _from)\\n        public\\n        view\\n        override(IRateOracle)\\n        returns (uint256)\\n    {\\n        return getRateFromTo(_from, block.timestamp);\\n    }\\n\\n    function observeSingle(\\n        uint32 currentTime,\\n        uint32 queriedTime,\\n        uint16 index,\\n        uint16 cardinality\\n    ) internal view returns (uint256 rateValueRay) {\\n        if (currentTime < queriedTime) revert CustomErrors.OOO();\\n\\n        if (currentTime == queriedTime) {\\n            OracleBuffer.Observation memory rate;\\n            rate = observations[index];\\n            if (rate.blockTimestamp != currentTime) {\\n                rateValueRay = getCurrentRateInRay();\\n            } else {\\n                rateValueRay = rate.observedValue;\\n            }\\n            return rateValueRay;\\n        }\\n\\n        uint256 currentValueRay = getCurrentRateInRay();\\n        (\\n            OracleBuffer.Observation memory beforeOrAt,\\n            OracleBuffer.Observation memory atOrAfter\\n        ) = observations.getSurroundingObservations(\\n                queriedTime,\\n                currentTime,\\n                currentValueRay,\\n                index,\\n                cardinality\\n            );\\n\\n        if (queriedTime == beforeOrAt.blockTimestamp) {\\n            // we are at the left boundary\\n            rateValueRay = beforeOrAt.observedValue;\\n        } else if (queriedTime == atOrAfter.blockTimestamp) {\\n            // we are at the right boundary\\n            rateValueRay = atOrAfter.observedValue;\\n        } else {\\n            // we are in the middle\\n            // find apy between beforeOrAt and atOrAfter\\n\\n            uint256 rateFromBeforeOrAtToAtOrAfterWad;\\n\\n            // more generally, what should our terminology be to distinguish cases where we represetn a 5% APY as = 1.05 vs. 0.05? We should pick a clear terminology and be use it throughout our descriptions / Hungarian notation / user defined types.\\n\\n            if (atOrAfter.observedValue > beforeOrAt.observedValue) {\\n                uint256 rateFromBeforeOrAtToAtOrAfterRay = WadRayMath.rayDiv(\\n                    atOrAfter.observedValue,\\n                    beforeOrAt.observedValue\\n                ) - WadRayMath.RAY;\\n\\n                rateFromBeforeOrAtToAtOrAfterWad = WadRayMath.rayToWad(\\n                    rateFromBeforeOrAtToAtOrAfterRay\\n                );\\n            }\\n\\n            uint256 timeInYearsWad = FixedAndVariableMath.accrualFact(\\n                (atOrAfter.blockTimestamp - beforeOrAt.blockTimestamp) *\\n                    WadRayMath.WAD\\n            );\\n\\n            uint256 apyFromBeforeOrAtToAtOrAfterWad = computeApyFromRate(\\n                rateFromBeforeOrAtToAtOrAfterWad,\\n                timeInYearsWad\\n            );\\n\\n            // interpolate rateValue for queriedTime\\n            rateValueRay = interpolateRateValue(\\n                beforeOrAt.observedValue,\\n                apyFromBeforeOrAtToAtOrAfterWad,\\n                (queriedTime - beforeOrAt.blockTimestamp) * WadRayMath.WAD\\n            );\\n        }\\n    }\\n\\n    /// @notice Computes the APY based on the un-annualised rateFromTo value and timeInYears (in wei)\\n    /// @param rateFromToWad Un-annualised rate (in wei)\\n    /// @param timeInYearsWad Time in years for the period for which we want to calculate the apy (in wei)\\n    /// @return apyWad APY for a given rateFromTo and timeInYears\\n    function computeApyFromRate(uint256 rateFromToWad, uint256 timeInYearsWad)\\n        internal\\n        pure\\n        returns (uint256 apyWad)\\n    {\\n        if (rateFromToWad == 0) {\\n            return 0;\\n        }\\n\\n        uint256 exponentWad = PRBMathUD60x18.div(\\n            PRBMathUD60x18.fromUint(1),\\n            timeInYearsWad\\n        );\\n        uint256 apyPlusOneWad = PRBMathUD60x18.pow(\\n            (PRBMathUD60x18.fromUint(1) + rateFromToWad),\\n            exponentWad\\n        );\\n        apyWad = apyPlusOneWad - PRBMathUD60x18.fromUint(1);\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function getApyFromTo(uint256 from, uint256 to)\\n        public\\n        view\\n        override\\n        returns (uint256 apyFromToWad)\\n    {\\n        require(from <= to, \\\"Misordered dates\\\");\\n\\n        uint256 rateFromToWad = getRateFromTo(from, to);\\n\\n        uint256 timeInSeconds = to - from;\\n\\n        uint256 timeInSecondsWad = PRBMathUD60x18.fromUint(timeInSeconds);\\n\\n        uint256 timeInYearsWad = FixedAndVariableMath.accrualFact(\\n            timeInSecondsWad\\n        );\\n\\n        apyFromToWad = computeApyFromRate(rateFromToWad, timeInYearsWad);\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function getApyFrom(uint256 from)\\n        public\\n        view\\n        override\\n        returns (uint256 apyFromToWad)\\n    {\\n        return getApyFromTo(from, block.timestamp);\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function variableFactor(\\n        uint256 termStartTimestampInWeiSeconds,\\n        uint256 termEndTimestampInWeiSeconds\\n    ) public override(IRateOracle) returns (uint256 resultWad) {\\n        bool cacheable;\\n\\n        (resultWad, cacheable) = _variableFactor(\\n            termStartTimestampInWeiSeconds,\\n            termEndTimestampInWeiSeconds\\n        );\\n\\n        if (cacheable) {\\n            uint32 termStartTimestamp = Time.timestampAsUint32(\\n                PRBMathUD60x18.toUint(termStartTimestampInWeiSeconds)\\n            );\\n            uint32 termEndTimestamp = Time.timestampAsUint32(\\n                PRBMathUD60x18.toUint(termEndTimestampInWeiSeconds)\\n            );\\n            settlementRateCache[termStartTimestamp][\\n                termEndTimestamp\\n            ] = resultWad;\\n        }\\n\\n        return resultWad;\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function variableFactorNoCache(\\n        uint256 termStartTimestampInWeiSeconds,\\n        uint256 termEndTimestampInWeiSeconds\\n    ) public view override(IRateOracle) returns (uint256 resultWad) {\\n        (resultWad, ) = _variableFactor(\\n            termStartTimestampInWeiSeconds,\\n            termEndTimestampInWeiSeconds\\n        );\\n    }\\n\\n    function _variableFactor(\\n        uint256 termStartTimestampInWeiSeconds,\\n        uint256 termEndTimestampInWeiSeconds\\n    ) private view returns (uint256 resultWad, bool cacheable) {\\n        uint32 termStartTimestamp = Time.timestampAsUint32(\\n            PRBMathUD60x18.toUint(termStartTimestampInWeiSeconds)\\n        );\\n        uint32 termEndTimestamp = Time.timestampAsUint32(\\n            PRBMathUD60x18.toUint(termEndTimestampInWeiSeconds)\\n        );\\n\\n        require(termStartTimestamp > 0 && termEndTimestamp > 0, \\\"UNITS\\\");\\n        if (settlementRateCache[termStartTimestamp][termEndTimestamp] != 0) {\\n            resultWad = settlementRateCache[termStartTimestamp][\\n                termEndTimestamp\\n            ];\\n            cacheable = false;\\n        } else if (Time.blockTimestampTruncated() >= termEndTimestamp) {\\n            resultWad = getRateFromTo(termStartTimestamp, termEndTimestamp);\\n            cacheable = true;\\n        } else {\\n            resultWad = getRateFromTo(\\n                termStartTimestamp,\\n                Time.blockTimestampTruncated()\\n            );\\n            cacheable = false;\\n        }\\n    }\\n\\n    /// @notice Store the last updated rate (returned by getLastUpdatedRate) into our buffer, unless a rate was written less than minSecondsSinceLastUpdate ago\\n    /// @param index The index of the Observation that was most recently written to the observations buffer. (Note that at least one Observation is written at contract construction time, so this is always defined.)\\n    /// @param cardinality The number of populated elements in the observations buffer\\n    /// @param cardinalityNext The new length of the observations buffer, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function writeRate(\\n        uint16 index,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        OracleBuffer.Observation memory last = observations[index];\\n\\n        (\\n            uint32 lastUpdatedTimestamp,\\n            uint256 lastUpdatedRate\\n        ) = getLastUpdatedRate();\\n\\n        // early return (to increase ttl of data in the observations buffer) if we've already written an observation recently\\n        if (\\n            lastUpdatedTimestamp <\\n            last.blockTimestamp + minSecondsSinceLastUpdate\\n        ) return (index, cardinality);\\n\\n        emit OracleBufferUpdate(\\n            Time.blockTimestampScaled(),\\n            address(this),\\n            index,\\n            lastUpdatedTimestamp,\\n            lastUpdatedRate,\\n            cardinality,\\n            cardinalityNext\\n        );\\n\\n        currentBlockSlope.blockChange = block.number - lastUpdatedBlock.number;\\n        currentBlockSlope.timeChange =\\n            Time.blockTimestampTruncated() -\\n            lastUpdatedBlock.timestamp;\\n\\n        lastUpdatedBlock.number = block.number;\\n        lastUpdatedBlock.timestamp = Time.blockTimestampTruncated();\\n\\n        return\\n            observations.write(\\n                index,\\n                lastUpdatedTimestamp,\\n                lastUpdatedRate,\\n                cardinality,\\n                cardinalityNext\\n            );\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function writeOracleEntry() external override(IRateOracle) {\\n        (oracleVars.rateIndex, oracleVars.rateCardinality) = writeRate(\\n            oracleVars.rateIndex,\\n            oracleVars.rateCardinality,\\n            oracleVars.rateCardinalityNext\\n        );\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function getLastRateSlope()\\n        public\\n        view\\n        override\\n        returns (uint256 rateChange, uint32 timeChange)\\n    {\\n        uint16 last = oracleVars.rateIndex;\\n        uint16 lastButOne = (oracleVars.rateIndex >= 1)\\n            ? oracleVars.rateIndex - 1\\n            : oracleVars.rateCardinality - 1;\\n\\n        // check if there are at least two points in the rate oracle\\n        // otherwise, revert with \\\"Not Enough Points\\\"\\n        require(\\n            oracleVars.rateCardinality >= 2 &&\\n                observations[lastButOne].initialized &&\\n                observations[lastButOne].observedValue <=\\n                observations[last].observedValue,\\n            \\\"NEP\\\"\\n        );\\n\\n        rateChange =\\n            observations[last].observedValue -\\n            observations[lastButOne].observedValue;\\n        timeChange =\\n            observations[last].blockTimestamp -\\n            observations[lastButOne].blockTimestamp;\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function getCurrentRateInRay()\\n        public\\n        view\\n        override\\n        returns (uint256 currentRate)\\n    {\\n        (\\n            uint32 lastUpdatedTimestamp,\\n            uint256 lastUpdatedRate\\n        ) = getLastUpdatedRate();\\n\\n        if (lastUpdatedTimestamp >= Time.blockTimestampTruncated()) {\\n            return lastUpdatedRate;\\n        }\\n\\n        // We can't get the current rate from the underlying platform, perhaps because it only pushes\\n        // rates to chain periodically. So we extrapolate the likely current rate from recent rates.\\n        (uint256 rateChange, uint32 timeChange) = getLastRateSlope();\\n\\n        currentRate =\\n            lastUpdatedRate +\\n            ((Time.blockTimestampTruncated() - lastUpdatedTimestamp) *\\n                rateChange) /\\n            timeChange;\\n    }\\n\\n    /// @inheritdoc IRateOracle\\n    function getBlockSlope()\\n        public\\n        view\\n        override\\n        returns (uint256 blockChange, uint32 timeChange)\\n    {\\n        return (currentBlockSlope.blockChange, currentBlockSlope.timeChange);\\n    }\\n}\\n\",\"keccak256\":\"0x82d9241fa6955cf95fe09860a07d91ffe11f7e7d1889e45f30bf3b728aa07c6c\",\"license\":\"Apache-2.0\"},\"contracts/rate_oracles/OracleBuffer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.9;\\n\\n/// @title OracleBuffer\\n/// @notice Provides the value history needed by multiple oracle contracts\\n/// @dev Instances of stored oracle data, \\\"observations\\\", are collected in the oracle array\\n/// Every pool is initialized with an oracle array length of 1. Anyone can pay the SSTOREs to increase the\\n/// maximum length of the oracle array. New slots will be added when the array is fully populated.\\n/// Observations are overwritten when the full length of the oracle array is populated.\\n/// The most recent observation is available, independent of the length of the oracle array, by passing 0 to observe()\\nlibrary OracleBuffer {\\n    uint256 public constant MAX_BUFFER_LENGTH = 65535;\\n\\n    /// @dev An Observation fits in one storage slot, keeping gas costs down and allowing `grow()` to pre-pay for gas\\n    struct Observation {\\n        // The timesamp in seconds. uint32 allows tiemstamps up to the year 2105. Future versions may wish to use uint40.\\n        uint32 blockTimestamp;\\n        /// @dev Even if observedVale is a decimal with 27 decimal places, this still allows decimal values up to 1.053122916685572e+38\\n        uint216 observedValue;\\n        bool initialized;\\n    }\\n\\n    /// @notice Creates an observation struct from the current timestamp and observed value\\n    /// @dev blockTimestamp _must_ be chronologically equal to or greater than last.blockTimestamp, safe for 0 or 1 overflows\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param observedValue The observed value (semantics may differ for different types of rate oracle)\\n    /// @return Observation The newly populated observation\\n    function observation(uint32 blockTimestamp, uint256 observedValue)\\n        private\\n        pure\\n        returns (Observation memory)\\n    {\\n        require(observedValue <= type(uint216).max, \\\">216\\\");\\n        return\\n            Observation({\\n                blockTimestamp: blockTimestamp,\\n                observedValue: uint216(observedValue),\\n                initialized: true\\n            });\\n    }\\n\\n    /// @notice Initialize the oracle array by writing the first slot(s). Called once for the lifecycle of the observations array\\n    /// @param self The stored oracle array\\n    /// @param times The times to populate in the Oracle buffe (block.timestamps truncated to uint32)\\n    /// @param observedValues The observed values to populate in the oracle buffer (semantics may differ for different types of rate oracle)\\n    /// @return cardinality The number of populated elements in the oracle array\\n    /// @return cardinalityNext The new length of the oracle array, independent of population\\n    /// @return rateIndex The index of the most recently populated element of the array\\n    function initialize(\\n        Observation[MAX_BUFFER_LENGTH] storage self,\\n        uint32[] memory times,\\n        uint256[] memory observedValues\\n    )\\n        internal\\n        returns (\\n            uint16 cardinality,\\n            uint16 cardinalityNext,\\n            uint16 rateIndex\\n        )\\n    {\\n        require(times.length < MAX_BUFFER_LENGTH, \\\"MAXT\\\");\\n        uint16 length = uint16(times.length);\\n        require(length == observedValues.length, \\\"Lengths must match\\\");\\n        require(length > 0, \\\"0T\\\");\\n        uint32 prevTime = 0;\\n        for (uint16 i = 0; i < length; i++) {\\n            require(prevTime < times[i], \\\"input unordered\\\");\\n\\n            self[i] = observation(times[i], observedValues[i]);\\n            prevTime = times[i];\\n        }\\n        return (length, length, length - 1);\\n    }\\n\\n    /// @notice Writes an oracle observation to the array\\n    /// @dev Writable at most once per block. Index represents the most recently written element. cardinality and index must be tracked externally.\\n    /// If the index is at the end of the allowable array length (according to cardinality), and the next cardinality\\n    /// is greater than the current one, cardinality may be increased. This restriction is created to preserve ordering.\\n    /// @param self The stored oracle array\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param blockTimestamp The timestamp of the new observation\\n    /// @param observedValue The observed value (semantics may differ for different types of rate oracle)\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @param cardinalityNext The new length of the oracle array, independent of population\\n    /// @return indexUpdated The new index of the most recently written element in the oracle array\\n    /// @return cardinalityUpdated The new cardinality of the oracle array\\n    function write(\\n        Observation[MAX_BUFFER_LENGTH] storage self,\\n        uint16 index,\\n        uint32 blockTimestamp,\\n        uint256 observedValue,\\n        uint16 cardinality,\\n        uint16 cardinalityNext\\n    ) internal returns (uint16 indexUpdated, uint16 cardinalityUpdated) {\\n        Observation memory last = self[index];\\n\\n        // early return if we've already written an observation this block\\n        if (last.blockTimestamp == blockTimestamp) return (index, cardinality);\\n\\n        // if the conditions are right, we can bump the cardinality\\n        if (cardinalityNext > cardinality && index == (cardinality - 1)) {\\n            cardinalityUpdated = cardinalityNext;\\n        } else {\\n            cardinalityUpdated = cardinality;\\n        }\\n\\n        indexUpdated = (index + 1) % cardinalityUpdated;\\n        self[indexUpdated] = observation(blockTimestamp, observedValue);\\n    }\\n\\n    /// @notice Prepares the oracle array to store up to `next` observations\\n    /// @param self The stored oracle array\\n    /// @param current The current next cardinality of the oracle array\\n    /// @param next The proposed next cardinality which will be populated in the oracle array\\n    /// @return next The next cardinality which will be populated in the oracle array\\n    function grow(\\n        Observation[MAX_BUFFER_LENGTH] storage self,\\n        uint16 current,\\n        uint16 next\\n    ) internal returns (uint16) {\\n        require(current > 0, \\\"I\\\");\\n        require(next < MAX_BUFFER_LENGTH, \\\"buffer limit\\\");\\n        // no-op if the passed next value isn't greater than the current next value\\n        if (next <= current) return current;\\n        // store in each slot to prevent fresh SSTOREs in swaps\\n        // this data will not be used because the initialized boolean is still false\\n        for (uint16 i = current; i < next; i++) self[i].blockTimestamp = 1;\\n        return next;\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a target, i.e. where [beforeOrAt, atOrAfter] is satisfied.\\n    /// The result may be the same observation, or adjacent observations.\\n    /// @dev The answer must be contained in the array, used when the target is located within the stored observation\\n    /// boundaries: older than the most recent observation and younger, or the same age as, the oldest observation\\n    /// @param self The stored oracle array\\n    /// @param target The timestamp at which the reserved observation should be for\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation recorded before, or at, the target\\n    /// @return atOrAfter The observation recorded at, or after, the target\\n    function binarySearch(\\n        Observation[MAX_BUFFER_LENGTH] storage self,\\n        uint32 target,\\n        uint16 index,\\n        uint16 cardinality\\n    )\\n        internal\\n        view\\n        returns (Observation memory beforeOrAt, Observation memory atOrAfter)\\n    {\\n        uint256 l = (index + 1) % cardinality; // oldest observation\\n        uint256 r = l + cardinality - 1; // newest observation\\n        uint256 i;\\n        while (true) {\\n            // i = (l + r) / 2;\\n            i = (l + r) >> 1;\\n\\n            beforeOrAt = self[i % cardinality];\\n\\n            // we've landed on an uninitialized tick, keep searching higher (more recently)\\n            if (!beforeOrAt.initialized) {\\n                l = i + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = self[(i + 1) % cardinality];\\n\\n            bool targetAtOrAfter = beforeOrAt.blockTimestamp <= target;\\n\\n            // check if we've found the answer!\\n            if (targetAtOrAfter && target <= atOrAfter.blockTimestamp) break;\\n\\n            if (!targetAtOrAfter) r = i - 1;\\n            else l = i + 1;\\n        }\\n    }\\n\\n    /// @notice Fetches the observations beforeOrAt and atOrAfter a given target, i.e. where [beforeOrAt, atOrAfter] is satisfied\\n    /// @dev Assumes there is at least 1 initialized observation.\\n    /// Used by observeSingle() to compute the counterfactual accumulator values as of a given block timestamp.\\n    /// @param self The stored oracle array\\n    /// @param target The timestamp at which the reserved observation should be for. Must be chronologically before currentTime.\\n    /// @param currentTime The current timestamp, at which currentValue applies.\\n    /// @param currentValue The current observed value if we were writing a new observation now (semantics may differ for different types of rate oracle)\\n    /// @param index The index of the observation that was most recently written to the observations array\\n    /// @param cardinality The number of populated elements in the oracle array\\n    /// @return beforeOrAt The observation which occurred at, or before, the given timestamp\\n    /// @return atOrAfter The observation which occurred at, or after, the given timestamp\\n    function getSurroundingObservations(\\n        Observation[MAX_BUFFER_LENGTH] storage self,\\n        uint32 target,\\n        uint32 currentTime,\\n        uint256 currentValue,\\n        uint16 index,\\n        uint16 cardinality\\n    )\\n        internal\\n        view\\n        returns (Observation memory beforeOrAt, Observation memory atOrAfter)\\n    {\\n        // optimistically set before to the newest observation\\n        beforeOrAt = self[index];\\n\\n        // if the target is chronologically at or after the newest observation, we can early return\\n        if (beforeOrAt.blockTimestamp <= target) {\\n            if (beforeOrAt.blockTimestamp == target) {\\n                // if newest observation equals target, we're in the same block, so we can ignore atOrAfter\\n                return (beforeOrAt, atOrAfter);\\n            } else {\\n                // otherwise, we need to transform\\n                return (beforeOrAt, observation(currentTime, currentValue));\\n            }\\n        }\\n\\n        // now, set before to the oldest observation\\n        beforeOrAt = self[(index + 1) % cardinality];\\n        if (!beforeOrAt.initialized) beforeOrAt = self[0];\\n\\n        // ensure that the target is chronologically at or after the oldest observation\\n        require(beforeOrAt.blockTimestamp <= target, \\\"OLD\\\");\\n\\n        // if we've reached this point, we have to binary search\\n        return binarySearch(self, target, index, cardinality);\\n    }\\n}\\n\",\"keccak256\":\"0x90e54f437b1647915cdbcc57e16358d89e408b4601fcc42651795713f80d97e6\",\"license\":\"BUSL-1.1\"},\"contracts/utils/CustomErrors.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity =0.8.9;\\n\\ninterface CustomErrors {\\n    /// @dev No need to unwind a net zero position\\n    error PositionNetZero();\\n\\n    error DebugError(uint256 x, uint256 y);\\n\\n    /// @dev Cannot have less margin than the minimum requirement\\n    error MarginLessThanMinimum(int256 marginRequirement);\\n\\n    /// @dev We can't withdraw more margin than we have\\n    error WithdrawalExceedsCurrentMargin();\\n\\n    /// @dev Position must be settled after AMM has reached maturity\\n    error PositionNotSettled();\\n\\n    /// The resulting margin does not meet minimum requirements\\n    error MarginRequirementNotMet(\\n        int256 marginRequirement,\\n        int24 tick,\\n        int256 fixedTokenDelta,\\n        int256 variableTokenDelta,\\n        uint256 cumulativeFeeIncurred,\\n        int256 fixedTokenDeltaUnbalanced\\n    );\\n\\n    /// The position/trader needs to be below the liquidation threshold to be liquidated\\n    error CannotLiquidate();\\n\\n    /// Only the position/trade owner can update the LP/Trader margin\\n    error OnlyOwnerCanUpdatePosition();\\n\\n    error OnlyVAMM();\\n\\n    error OnlyFCM();\\n\\n    /// Margin delta must not equal zero\\n    error InvalidMarginDelta();\\n\\n    /// Positions and Traders cannot be settled before the applicable interest rate swap has matured\\n    error CannotSettleBeforeMaturity();\\n\\n    error closeToOrBeyondMaturity();\\n\\n    /// @dev There are not enough funds available for the requested operation\\n    error NotEnoughFunds(uint256 requested, uint256 available);\\n\\n    /// @dev The two values were expected to have oppostite sigs, but do not\\n    error ExpectedOppositeSigns(int256 amount0, int256 amount1);\\n\\n    /// @dev Error which is reverted if the sqrt price of the vamm is non-zero before a vamm is initialized\\n    error ExpectedSqrtPriceZeroBeforeInit(uint160 sqrtPriceX96);\\n\\n    /// @dev Error which ensures the liquidity delta is positive if a given LP wishes to mint further liquidity in the vamm\\n    error LiquidityDeltaMustBePositiveInMint(uint128 amount);\\n\\n    /// @dev Error which ensures the liquidity delta is positive if a given LP wishes to burn liquidity in the vamm\\n    error LiquidityDeltaMustBePositiveInBurn(uint128 amount);\\n\\n    /// @dev Error which ensures the amount of notional specified when initiating an IRS contract (via the swap function in the vamm) is non-zero\\n    error IRSNotionalAmountSpecifiedMustBeNonZero();\\n\\n    /// @dev Error which ensures the VAMM is unlocked\\n    error CanOnlyTradeIfUnlocked(bool unlocked);\\n\\n    /// @dev only the margin engine can run a certain function\\n    error OnlyMarginEngine();\\n\\n    /// The resulting margin does not meet minimum requirements\\n    error MarginRequirementNotMetFCM(int256 marginRequirement);\\n\\n    /// @dev getReserveNormalizedIncome() returned zero for underlying asset. Oracle only supports active Aave-V2 assets.\\n    error AavePoolGetReserveNormalizedIncomeReturnedZero();\\n\\n    /// @dev getReserveNormalizedVariableDebt() returned zero for underlying asset. Oracle only supports active Aave-V2 assets.\\n    error AavePoolGetReserveNormalizedVariableDebtReturnedZero();\\n\\n    /// @dev getPooledEthByShares() returned zero for Lido's stETH.\\n    error LidoGetPooledEthBySharesReturnedZero();\\n\\n    /// @dev getEthValue() returned zero for RocketPool's RETH.\\n    error RocketPoolGetEthValueReturnedZero();\\n\\n    /// @dev ctoken.exchangeRateStored() returned zero for a given Compound ctoken. Oracle only supports active Compound assets.\\n    error CTokenExchangeRateReturnedZero();\\n\\n    /// @dev currentTime < queriedTime\\n    error OOO();\\n}\\n\",\"keccak256\":\"0xe0568af52c5cea37114427f90538f55d3858b217628c76175ecf42474116df8c\",\"license\":\"Apache-2.0\"},\"contracts/utils/FixedPoint128.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\n\\n/// @title FixedPoint128\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\nlibrary FixedPoint128 {\\n    uint256 internal constant Q128 = 0x100000000000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x59b42298ab82d267fc82d244b03ff9196b4ebccda02d3773ff56456ab2b8a1e8\",\"license\":\"BUSL-1.1\"},\"contracts/utils/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable no-inline-assembly\\n\\npragma solidity =0.8.9;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n\\n    function mulDivSigned(\\n        int256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (a < 0) return -int256(mulDiv(uint256(-a), b, denominator));\\n        return int256(mulDiv(uint256(a), b, denominator));\\n    }\\n\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n\\n        unchecked {\\n            assembly {\\n                let mm := mulmod(a, b, not(0))\\n                prod0 := mul(a, b)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division\\n            if (prod1 == 0) {\\n                require(denominator > 0, \\\"Division by zero\\\");\\n                assembly {\\n                    result := div(prod0, denominator)\\n                }\\n                return result;\\n            }\\n\\n            // Make sure the result is less than 2**256.\\n            // Also prevents denominator == 0\\n            require(denominator > prod1, \\\"overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\n            // Compute remainder using mulmod\\n            uint256 remainder;\\n            assembly {\\n                remainder := mulmod(a, b, denominator)\\n            }\\n            // Subtract 256 bit number from 512 bit number\\n            assembly {\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator\\n            // Compute largest power of two divisor of denominator.\\n            // Always >= 1.\\n            // uint256 twos = -denominator & denominator;\\n            // https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\n            uint256 twos = (type(uint256).max - denominator + 1) & denominator;\\n            // Divide denominator by power of two\\n            assembly {\\n                denominator := div(denominator, twos)\\n            }\\n\\n            // Divide [prod1 prod0] by the factors of two\\n            assembly {\\n                prod0 := div(prod0, twos)\\n            }\\n            // Shift in bits from prod1 into prod0. For this we need\\n            // to flip `twos` such that it is 2**256 / twos.\\n            // If twos is zero, then it becomes one\\n            assembly {\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2**256\\n            // Now that denominator is an odd number, it has an inverse\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n            // Compute the inverse by starting with a seed that is correct\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n            uint256 inv = (3 * denominator) ^ 2;\\n            // Now use Newton-Raphson iteration to improve the precision.\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\n            // arithmetic, doubling the correct bits in each step.\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n            // Because the division is now exact we can divide by multiplying\\n            // with the modular inverse of denominator. This will give us the\\n            // correct result modulo 2**256. Since the precoditions guarantee\\n            // that the outcome is less than 2**256, this is the final result.\\n            // We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inv;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max, \\\"overflow\\\");\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b15aa319bab9e811885806686a5300267a66530aa63cbabfa63d4ef1c479d3a\",\"license\":\"MIT\"},\"contracts/utils/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.9;\\n\\n/// @title Math library for liquidity\\nlibrary LiquidityMath {\\n    /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\n    /// @param x The liquidity before change\\n    /// @param y The delta by which liquidity should be changed\\n    /// @return z The liquidity delta\\n    function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\n        if (y < 0) {\\n            uint128 yAbsolute;\\n\\n            unchecked {\\n                yAbsolute = uint128(-y);\\n            }\\n\\n            z = x - yAbsolute;\\n        } else {\\n            z = x + uint128(y);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x884e7b2ba9573cc75330386937a4a290ab2652f2632046473585ee6f6ba3e2ce\",\"license\":\"BUSL-1.1\"},\"contracts/utils/SafeCastUni.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// With contributions from OpenZeppelin Contracts v4.4.0 (utils/math/SafeCast.sol)\\n\\npragma solidity =0.8.9;\\n\\n/// @title Safe casting methods\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCastUni {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param y The uint256 to be downcasted\\n    /// @return z The downcasted integer, now type uint160\\n    function toUint160(uint256 y) internal pure returns (uint160 z) {\\n        require((z = uint160(y)) == y, \\\"toUint160 oflo\\\");\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param y The int256 to be downcasted\\n    /// @return z The downcasted integer, now type int128\\n    function toInt128(int256 y) internal pure returns (int128 z) {\\n        require((z = int128(y)) == y, \\\"toInt128 oflo\\\");\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param y The uint256 to be casted\\n    /// @return z The casted integer, now type int256\\n    function toInt256(uint256 y) internal pure returns (int256 z) {\\n        require(y < 2**255, \\\"toInt256 oflo\\\");\\n        z = int256(y);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"toUint256 < 0\\\");\\n        return uint256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x5f9df74163e704fbd8cb3fbf5b4124521653084ca07e4c5bb9297b80c3427a57\",\"license\":\"BUSL-1.1\"},\"contracts/utils/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\n// solhint-disable no-inline-assembly\\n\\npragma solidity =0.8.9;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev MIN_TICK corresponds to an annualized fixed rate of 1000%\\n    /// @dev MAX_TICK corresponds to an annualized fixed rate of 0.001%\\n    /// @dev MIN and MAX TICKs can't be safely changed without reinstating getSqrtRatioAtTick removed lines of code from original\\n    /// TickMath.sol implementation in uniswap v3\\n\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -69100;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 2503036416286949174936592462;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 2507794810551837817144115957740;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick)\\n        internal\\n        pure\\n        returns (uint160 sqrtPriceX96)\\n    {\\n        uint256 absTick = tick < 0\\n            ? uint256(-int256(tick))\\n            : uint256(int256(tick));\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\n\\n        uint256 ratio = absTick & 0x1 != 0\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\n            : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0)\\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0)\\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0)\\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0)\\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0)\\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0)\\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0)\\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0)\\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0)\\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0)\\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0)\\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0)\\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0)\\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0)\\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0)\\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0)\\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160(\\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\\n        );\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\\n        internal\\n        pure\\n        returns (int24 tick)\\n    {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(\\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\\n            \\\"R\\\"\\n        );\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        // solhint-disable-next-line var-name-mixedcase\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        // solhint-disable-next-line var-name-mixedcase\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24(\\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\\n        );\\n        int24 tickHi = int24(\\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\\n        );\\n\\n        tick = tickLow == tickHi\\n            ? tickLow\\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\n            ? tickHi\\n            : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0xc9fa4bb4c9d7f67b24933ac5331f96ebf9a3e2af93105fe97e9f544f7950c002\",\"license\":\"BUSL-1.1\"},\"contracts/utils/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// solhint-disable const-name-snakecase\\n\\npragma solidity =0.8.9;\\n\\n/**\\n * @title WadRayMath library\\n * @author Voltz, matching an interface and terminology used by Aave for consistency\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\nlibrary WadRayMath {\\n    enum Mode {\\n        WAD_MODE,\\n        RAY_MODE\\n    }\\n\\n    uint256 public constant WAD = 1e18;\\n    uint256 public constant RAY = 1e27;\\n\\n    uint256 public constant HALF_WAD = WAD / 2;\\n    uint256 public constant HALF_RAY = RAY / 2;\\n\\n    uint256 public constant WAD_RAY_RATIO = RAY / WAD;\\n    uint256 internal constant HALF_RATIO = WAD_RAY_RATIO / 2;\\n\\n    // Multiplies two values in WAD_MODE or RAY_MODE, rounding up\\n    function _mul(\\n        uint256 a,\\n        uint256 b,\\n        Mode m\\n    ) private pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n\\n        return\\n            (a * b + (m == Mode.RAY_MODE ? HALF_RAY : HALF_WAD)) /\\n            (m == Mode.RAY_MODE ? RAY : WAD);\\n    }\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return _mul(a, b, Mode.WAD_MODE);\\n    }\\n\\n    /**\\n     * @dev Multiplies two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a*b, in ray\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return _mul(a, b, Mode.RAY_MODE);\\n    }\\n\\n    // Divides two values in WAD_MODE or RAY_MODE, rounding up\\n    function _div(\\n        uint256 a,\\n        uint256 b,\\n        Mode m\\n    ) private pure returns (uint256) {\\n        require(b != 0, \\\"DIV0\\\");\\n        uint256 halfB = b / 2;\\n\\n        return (a * (m == Mode.RAY_MODE ? RAY : WAD) + halfB) / b;\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @param a Wad\\n     * @param b Wad\\n     * @return The result of a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return _div(a, b, Mode.WAD_MODE);\\n    }\\n\\n    /**\\n     * @dev Divides two ray, rounding half up to the nearest ray\\n     * @param a Ray\\n     * @param b Ray\\n     * @return The result of a/b, in ray\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return _div(a, b, Mode.RAY_MODE);\\n    }\\n\\n    /**\\n     * @dev Scales a value in WAD up to a value in RAY\\n     * @param a WAD value\\n     * @return a, scaled up to a value in RAY\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a * WAD_RAY_RATIO;\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Scales a value in RAY down to a value in WAD\\n     * @param a RAY value\\n     * @return a, scaled down to a value in WAD (rounded up to the nearest WAD)\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256) {\\n        uint256 result = a / WAD_RAY_RATIO;\\n\\n        if (a % WAD_RAY_RATIO >= HALF_RATIO) {\\n            result += 1;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xd814547e755fcfe5d257d352d2a8f87949b1b66e4b56bc50e974d41ae376579f\",\"license\":\"Apache-2.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620036a6380380620036a683398101604081905262000034916200094c565b82620000403362000184565b6001600160a01b03811660805243620100045562000069620001d4602090811b62000c2917901c565b62010003805463ffffffff9290921663ffffffff199283161790556201000580549091166105dc17905550606462010006556001600160a01b038416620000f75760405162461bcd60e51b815260206004820152601460248201527f6161766520706f6f6c206d75737420657869737400000000000000000000000060448201526064015b60405180910390fd5b6080516001600160a01b0316620001515760405162461bcd60e51b815260206004820152601560248201527f756e6465726c79696e67206d75737420657869737400000000000000000000006044820152606401620000ee565b6201000780546001600160a01b0319166001600160a01b0386161790556200017a8282620001e6565b5050505062000b98565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000620001e14262000471565b905090565b620001f5600261ffff62000a69565b825110620002175760405162461bcd60e51b8152600401620000ee9062000a8c565b8151815161ffff821614620002405760405162461bcd60e51b8152600401620000ee9062000aaa565b60006200024f82600162000ad6565b61ffff166001600160401b038111156200026d576200026d6200086a565b60405190808252806020026020018201604052801562000297578160200160208202803683370190505b5090506000620002a983600162000ad6565b61ffff166001600160401b03811115620002c757620002c76200086a565b604051908082528060200260200182016040528015620002f1578160200160208202803683370190505b50905060005b8361ffff16811015620003a25785818151811062000319576200031962000aff565b602002602001015183828151811062000336576200033662000aff565b602002602001019063ffffffff16908163ffffffff168152505084818151811062000365576200036562000aff565b602002602001015182828151811062000382576200038262000aff565b602090810291909101015280620003998162000b15565b915050620002f7565b50600080620003b0620004b8565b9150915081848661ffff1681518110620003ce57620003ce62000aff565b602002602001019063ffffffff16908163ffffffff168152505080838661ffff168151811062000402576200040262000aff565b6020026020010181815250506200042b848460046200057d60201b62000c39179092919060201c565b6003805461ffff948516620100000263ffff0000199486166401000000000265ffff0000ffff199092169590931694909417939093179190911617905550505050505050565b8063ffffffff81168114620004b35760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b6044820152606401620000ee565b919050565b620100075460805160405163386497fd60e01b81526001600160a01b0391821660048201526000928392169063386497fd9060240160206040518083038186803b1580156200050657600080fd5b505afa1580156200051b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000541919062000b33565b905080620005625760405163c34b693d60e01b815260040160405180910390fd5b62000577620001d460201b62000c291760201c565b91509091565b600080600061ffff855110620005a75760405162461bcd60e51b8152600401620000ee9062000a8c565b8451845161ffff821614620005d05760405162461bcd60e51b8152600401620000ee9062000aaa565b60008161ffff16116200060b5760405162461bcd60e51b81526020600482015260026024820152610c1560f21b6044820152606401620000ee565b6000805b8261ffff168161ffff161015620007a157878161ffff168151811062000639576200063962000aff565b602002602001015163ffffffff168263ffffffff16106200068f5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b6044820152606401620000ee565b620006e1888261ffff1681518110620006ac57620006ac62000aff565b6020026020010151888361ffff1681518110620006cd57620006cd62000aff565b6020026020010151620007c260201b60201c565b898261ffff1661ffff8110620006fb57620006fb62000aff565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516640100000000027fff0000000000000000000000000000000000000000000000000000000000000090921663ffffffff9094169390931717929092161790558751889061ffff831690811062000781576200078162000aff565b602002602001015191508080620007989062000b4d565b9150506200060f565b508180620007b160018262000b72565b945094509450505093509350939050565b60408051606081018252600080825260208201819052918101919091526001600160d81b03821115620008215760405162461bcd60e51b8152600401620000ee906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b6001600160a01b03811681146200086757600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620008ab57620008ab6200086a565b604052919050565b60006001600160401b03821115620008cf57620008cf6200086a565b5060051b60200190565b600082601f830112620008eb57600080fd5b8151602062000904620008fe83620008b3565b62000880565b82815260059290921b840181019181810190868411156200092457600080fd5b8286015b8481101562000941578051835291830191830162000928565b509695505050505050565b600080600080608085870312156200096357600080fd5b8451620009708162000851565b80945050602080860151620009858162000851565b60408701519094506001600160401b0380821115620009a357600080fd5b818801915088601f830112620009b857600080fd5b8151620009c9620008fe82620008b3565b81815260059190911b8301840190848101908b831115620009e957600080fd5b938501935b8285101562000a1d57845163ffffffff8116811462000a0d5760008081fd5b82529385019390850190620009ee565b60608b0151909750945050508083111562000a3757600080fd5b505062000a4787828801620008d9565b91505092959194509250565b634e487b7160e01b600052601160045260246000fd5b60008262000a8757634e487b7160e01b600052601260045260246000fd5b500490565b6020808252600490820152631350561560e21b604082015260600190565b602080825260129082015271098cadccee8d0e640daeae6e840dac2e8c6d60731b604082015260600190565b600061ffff80831681851680830382111562000af65762000af662000a53565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b600060001982141562000b2c5762000b2c62000a53565b5060010190565b60006020828403121562000b4657600080fd5b5051919050565b600061ffff8083168181141562000b685762000b6862000a53565b6001019392505050565b600061ffff8381169083168181101562000b905762000b9062000a53565b039392505050565b608051612aeb62000bbb6000396000818161029201526106710152612aeb6000f3fe608060405234801561001057600080fd5b50600436106101495760003560e01c80631195082e1461014e578063163e9c4f1461018c57806317221ef11461019f57806322ff6568146101b257806324b18b17146101cc578063252c09d71461020057806325f258dd1461023f57806332148f6714610252578063414535281461026757806354124c641461027a5780636f307dc31461028d578063715018a6146102c15780637aa4db13146102c95780637cf2cc9f146102d15780638a6b8c5d146102da5780638da5cb5b146102e257806391aa375d146102ea57806393556dbd14610315578063bdb0509214610328578063c330c98d1461033b578063c7db359b1461034a578063e9d337b814610392578063efdf5d8b146103a7578063f2fde38b146103af578063f739670c146103c2578063f90ce5ba146103d5578063fe115fbe146103ed575b600080fd5b61017961015c3660046127d5565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61017961019a366004612808565b6103f5565b6101796101ad366004612808565b610407565b6101ba600581565b60405160ff9091168152602001610183565b620100055462010006546101e49163ffffffff169082565b6040805163ffffffff9093168352602083019190915201610183565b61021361020e366004612808565b610413565b6040805163ffffffff90941684526001600160d81b039092166020840152151590820152606001610183565b61017961024d366004612821565b61044d565b610265610260366004612843565b6104c3565b005b610179610275366004612821565b610548565b610179610288366004612867565b61055c565b6102b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516101839190612893565b6102656105b1565b6102656105f5565b61017960025481565b6101e4610642565b6102b4610717565b6201000654620100055463ffffffff165b6040805192835263ffffffff909116602083015201610183565b610179610323366004612821565b610726565b610265610336366004612808565b6107b6565b610179670de0b6b3a764000081565b60035461036d9061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff94851681529284166020840152921691810191909152606001610183565b62010007546102b4906001600160a01b031681565b61017961082a565b6102656103bd3660046128a7565b6108b2565b6101796103d0366004612821565b61094f565b620100035462010004546101e49163ffffffff169082565b6102fb610a59565b6000610401824261094f565b92915050565b60006104018242610726565b60048161ffff811061042457600080fd5b015463ffffffff81169150600160201b81046001600160d81b031690600160f81b900460ff1683565b60008061045a8484610e7c565b909250905080156104bc57600061047a670de0b6b3a76400008604610fba565b90506000610491670de0b6b3a76400008604610fba565b63ffffffff928316600090815260016020908152604080832095909316825293909352909120839055505b5092915050565b600354600160201b900461ffff1660006104df60048385610fff565b6003805461ffff808416600160201b810261ffff60201b19909316929092179092559192508316146105435760405161ffff821681527f8a96a9c4bca0fb28be0fc5c84e95aff121a64e2533021e9d638bdc1f03b14ece9060200160405180910390a15b505050565b60006105548383610e7c565b509392505050565b600080610568836110f4565b9050600061057e670de0b6b3a7640000866128e6565b9050600061058c828461110b565b905060006105998261114a565b90506105a58882611174565b98975050505050505050565b336105ba610717565b6001600160a01b0316146105e95760405162461bcd60e51b81526004016105e0906128fe565b60405180910390fd5b6105f36000611182565b565b60035461061a9061ffff80821691620100008104821691600160201b909104166111d2565b6003805463ffffffff19166201000061ffff9384160261ffff19161792909116919091179055565b620100075460405163386497fd60e01b815260009182916001600160a01b039091169063386497fd90610699907f000000000000000000000000000000000000000000000000000000000000000090600401612893565b60206040518083038186803b1580156106b157600080fd5b505afa1580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190612933565b9050806107095760405163c34b693d60e01b815260040160405180910390fd5b610711610c29565b91509091565b6000546001600160a01b031690565b60008183111561076b5760405162461bcd60e51b815260206004820152601060248201526f4d69736f72646572656420646174657360801b60448201526064016105e0565b6000610777848461094f565b90506000610785858561294c565b9050600061079282611375565b9050600061079f826110f4565b90506107ab84826113c2565b979650505050505050565b336107bf610717565b6001600160a01b0316146107e55760405162461bcd60e51b81526004016105e0906128fe565b80600254146108275760028190556040518181527f88bd1242a1ad7dbba4967e0120324f17c382e4e3006e01dc3ffc0bf43e4b2a399060200160405180910390a15b50565b6000806000610837610642565b91509150610843610c29565b63ffffffff168263ffffffff161061085b5792915050565b600080610866610a59565b915091508063ffffffff16828561087b610c29565b6108859190612963565b63ffffffff166108959190612988565b61089f91906129bd565b6108a990846128e6565b94505050505090565b336108bb610717565b6001600160a01b0316146108e15760405162461bcd60e51b81526004016105e0906128fe565b6001600160a01b0381166109465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e0565b61082781611182565b60008183111561098d5760405162461bcd60e51b815260206004820152600960248201526866726f6d203e20746f60b81b60448201526064016105e0565b8183141561099d57506000610401565b60006109a7610c29565b905060006109b485610fba565b905060006109c185610fba565b6003549091506000906109e5908590859061ffff8082169162010000900416611427565b600354909150600090610a09908690859061ffff8082169162010000900416611427565b905081811115610a4b576000610a3d676765c793fa10079d601b1b610a2e8486611673565b610a38919061294c565b611681565b965061040195505050505050565b600095505050505050610401565b600354600090819061ffff16816001821015610a8d57600354610a889060019062010000900461ffff166129d1565b610aa0565b600354610aa09060019061ffff166129d1565b60035490915060026201000090910461ffff1610801590610ae1575060048161ffff1661ffff8110610ad457610ad46129ec565b0154600160f81b900460ff165b8015610b3e575060048261ffff1661ffff8110610b0057610b006129ec565b0154600160201b90046001600160d81b0316600461ffff838116908110610b2957610b296129ec565b0154600160201b90046001600160d81b031611155b610b705760405162461bcd60e51b815260206004820152600360248201526204e45560ec1b60448201526064016105e0565b60048161ffff1661ffff8110610b8857610b886129ec565b0154600160201b90046001600160d81b0316600461ffff848116908110610bb157610bb16129ec565b0154610bcd9190600160201b90046001600160d81b0316612a02565b6001600160d81b0316935060048161ffff1661ffff8110610bf057610bf06129ec565b015463ffffffff16600461ffff808516908110610c0f57610c0f6129ec565b0154610c21919063ffffffff16612963565b925050509091565b6000610c3442610fba565b905090565b600080600061ffff855110610c795760405162461bcd60e51b81526004016105e0906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614610cc45760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b60448201526064016105e0565b60008161ffff1611610cfd5760405162461bcd60e51b81526020600482015260026024820152610c1560f21b60448201526064016105e0565b6000805b8261ffff168161ffff161015610e5d57878161ffff1681518110610d2757610d276129ec565b602002602001015163ffffffff168263ffffffff1610610d7b5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b60448201526064016105e0565b610dbf888261ffff1681518110610d9457610d946129ec565b6020026020010151888361ffff1681518110610db257610db26129ec565b602002602001015161170d565b898261ffff1661ffff8110610dd657610dd66129ec565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff9094169390931717929092161790558751889061ffff8316908110610e4057610e406129ec565b602002602001015191508080610e5590612a22565b915050610d01565b508180610e6b6001826129d1565b945094509450505093509350939050565b60008080610e93670de0b6b3a76400008604610fba565b90506000610eaa670de0b6b3a76400008604610fba565b905060008263ffffffff16118015610ec8575060008163ffffffff16115b610efc5760405162461bcd60e51b8152602060048201526005602482015264554e49545360d81b60448201526064016105e0565b63ffffffff80831660009081526001602090815260408083209385168352929052205415610f525763ffffffff808316600090815260016020908152604080832093851683529290529081205494509250610fb1565b8063ffffffff16610f61610c29565b63ffffffff1610610f8d57610f828263ffffffff168263ffffffff1661094f565b935060019250610fb1565b610faa8263ffffffff16610f9f610c29565b63ffffffff1661094f565b9350600092505b50509250929050565b8063ffffffff81168114610ffa5760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b60448201526064016105e0565b919050565b6000808361ffff16116110385760405162461bcd60e51b81526020600482015260016024820152604960f81b60448201526064016105e0565b61ffff8261ffff161061107c5760405162461bcd60e51b815260206004820152600c60248201526b189d5999995c881b1a5b5a5d60a21b60448201526064016105e0565b8261ffff168261ffff16116110925750816110ed565b825b8261ffff168161ffff1610156110e8576001858261ffff1661ffff81106110bd576110bd6129ec565b01805463ffffffff191663ffffffff92909216919091179055806110e081612a22565b915050611094565b508190505b9392505050565b6000610401826a1a1601fc4ea7109e000000611785565b60008261113057811561111f576000611129565b670de0b6b3a76400005b9050610401565b6110ed61114561113f8561179a565b8461184a565b611856565b60008061116a670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6110ed9084612988565b60006110ed8383600161189c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060048661ffff1661ffff81106111ef576111ef6129ec565b60408051606081018252929091015463ffffffff811683526001600160d81b03600160201b820416602084015260ff600160f81b90910416151590820152905060008061123a610642565b60025485519294509092506112549163ffffffff166128e6565b8263ffffffff16101561126f5787879450945050505061136d565b7f5aec68e6980e788266f2f59f6fddb85f3e256ce6da46fdfab920b9b06aaa737561129861194f565b6040805191825230602083015261ffff8b81168383015263ffffffff86166060840152608083018590528a811660a0840152891660c0830152519081900360e00190a162010004546112ea904361294c565b6201000655620100035463ffffffff16611302610c29565b61130c9190612963565b62010005805463ffffffff191663ffffffff92909216919091179055436201000455611336610c29565b62010003805463ffffffff191663ffffffff928316179055611365906004908a90859085908c908c9061195a16565b945094505050505b935093915050565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211156113b457604051633492ffd960e01b8152600481018390526024016105e0565b50670de0b6b3a76400000290565b6000826113d157506000610401565b60006113e66113e06001611375565b84611785565b90506000611408856113f86001611375565b61140291906128e6565b8361110b565b90506114146001611375565b61141e908261294c565b95945050505050565b60008363ffffffff168563ffffffff16101561145657604051632ff198e560e21b815260040160405180910390fd5b8363ffffffff168563ffffffff1614156114fe576114726127a1565b60048461ffff1661ffff811061148a5761148a6129ec565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff16151593830193909352909250908716146114e7576114e061082a565b91506114f8565b80602001516001600160d81b031691505b5061166b565b600061150861082a565b905060008061151c6004888a868a8a611aa2565b91509150816000015163ffffffff168763ffffffff16141561154d5781602001516001600160d81b03169350611667565b805163ffffffff888116911614156115745780602001516001600160d81b03169350611667565b600082602001516001600160d81b031682602001516001600160d81b031611156115e3576000676765c793fa10079d601b1b6115ca84602001516001600160d81b031686602001516001600160d81b0316611673565b6115d4919061294c565b90506115df81611681565b9150505b8251825160009161161691670de0b6b3a76400009161160191612963565b63ffffffff166116119190612988565b6110f4565b9050600061162483836113c2565b905061166185602001516001600160d81b031682670de0b6b3a764000088600001518e6116519190612963565b63ffffffff166102889190612988565b96505050505b5050505b949350505050565b60006110ed83836001611c54565b6000806116a1670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6116ab90846129bd565b905060026116cc670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6116d691906129bd565b6116f3670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6116fd9085612a44565b10610401576110ed6001826128e6565b6117156127a1565b6001600160d81b038211156117555760405162461bcd60e51b81526004016105e0906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b60006110ed83670de0b6b3a764000084611cef565b6000670de0b6b3a76400008210156117c857604051633621413760e21b8152600481018390526024016105e0565b60006117dd670de0b6b3a76400008404611dbd565b670de0b6b3a7640000808202935090915083821c90811415611800575050919050565b6706f05b59d3b200005b801561184257670de0b6b3a7640000828002049150671bc16d674ec80000821061183a579283019260019190911c905b60011c61180a565b505050919050565b60006110ed8383611e9b565b6000680a688906bd8b000000821061188457604051634a4f26f160e01b8152600481018390526024016105e0565b670de0b6b3a7640000604083901b046110ed81611f5d565b60008315806118a9575082155b156118b6575060006110ed565b60018260018111156118ca576118ca612a58565b146118dd57670de0b6b3a76400006118ea565b676765c793fa10079d601b1b5b60018360018111156118fe576118fe612a58565b1461191b576119166002670de0b6b3a76400006129bd565b611931565b6119316002676765c793fa10079d601b1b6129bd565b61193b8587612988565b61194591906128e6565b61166b91906129bd565b6000610c3442611375565b6000806000888861ffff1661ffff8110611976576119766129ec565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff1615159383019390935290925090881614156119d15787859250925050611a97565b8461ffff168461ffff161180156119f957506119ee6001866129d1565b61ffff168861ffff16145b15611a0657839150611a0a565b8491505b81611a16896001612a6e565b611a209190612a94565b9250611a2c878761170d565b898461ffff1661ffff8110611a4357611a436129ec565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff909416939093171792909216179055505b965096945050505050565b611aaa6127a1565b611ab26127a1565b878461ffff1661ffff8110611ac957611ac96129ec565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff1615159383019390935290935090881610611b48578663ffffffff16826000015163ffffffff161415611b3457611a97565b81611b3f878761170d565b91509150611a97565b8783611b55866001612a6e565b611b5f9190612a94565b61ffff1661ffff8110611b7457611b746129ec565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181018290529250611bf95760408051606081018252895463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181019190915291505b815163ffffffff80891691161115611c395760405162461bcd60e51b815260206004820152600360248201526213d31160ea1b60448201526064016105e0565b611c45888886866125ef565b91509150965096945050505050565b600082611c8c5760405162461bcd60e51b81526004016105e0906020808252600490820152630444956360e41b604082015260600190565b6000611c996002856129bd565b905083816001856001811115611cb157611cb1612a58565b14611cc457670de0b6b3a7640000611cd1565b676765c793fa10079d601b1b5b611cdb9088612988565b611ce591906128e6565b61141e91906129bd565b600080806000198587098587029250828110838203039150508060001415611d2a57838281611d2057611d206129a7565b04925050506110ed565b838110611d5457604051631dcf306360e21b815260048101829052602481018590526044016105e0565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160801b8210611ddd57608091821c91611dda90826128e6565b90505b600160401b8210611dfb57604091821c91611df890826128e6565b90505b600160201b8210611e1957602091821c91611e1690826128e6565b90505b620100008210611e3657601091821c91611e3390826128e6565b90505b6101008210611e5257600891821c91611e4f90826128e6565b90505b60108210611e6d57600491821c91611e6a90826128e6565b90505b60048210611e8857600291821c91611e8590826128e6565b90505b60028210610ffa576104016001826128e6565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110611edf5760405163698d9a0160e11b8152600481018290526024016105e0565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff811182611f195780670de0b6b3a7640000850401945050505050610401565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b821615611f7d5768016a09e667f3bcc9090260401c5b6001603e1b821615611f98576801306fe0a31b7152df0260401c5b6001603d1b821615611fb3576801172b83c7d517adce0260401c5b6001603c1b821615611fce5768010b5586cf9890f62a0260401c5b6001603b1b821615611fe9576801059b0d31585743ae0260401c5b6001603a1b82161561200457680102c9a3e778060ee70260401c5b600160391b82161561201f5768010163da9fb33356d80260401c5b600160381b82161561203a57680100b1afa5abcbed610260401c5b600160371b8216156120555768010058c86da1c09ea20260401c5b600160361b821615612070576801002c605e2e8cec500260401c5b600160351b82161561208b57680100162f3904051fa10260401c5b600160341b8216156120a6576801000b175effdc76ba0260401c5b600160331b8216156120c157680100058ba01fb9f96d0260401c5b600160321b8216156120dc5768010002c5cc37da94920260401c5b600160311b8216156120f7576801000162e525ee05470260401c5b600160301b8216156121125768010000b17255775c040260401c5b6001602f1b82161561212d576801000058b91b5bc9ae0260401c5b6001602e1b82161561214857680100002c5c89d5ec6d0260401c5b6001602d1b8216156121635768010000162e43f4f8310260401c5b6001602c1b82161561217e57680100000b1721bcfc9a0260401c5b6001602b1b8216156121995768010000058b90cf1e6e0260401c5b6001602a1b8216156121b4576801000002c5c863b73f0260401c5b600160291b8216156121cf57680100000162e430e5a20260401c5b600160281b8216156121ea576801000000b1721835510260401c5b600160271b82161561220557680100000058b90c0b490260401c5b600160261b8216156122205768010000002c5c8601cc0260401c5b600160251b82161561223b576801000000162e42fff00260401c5b600160241b8216156122565768010000000b17217fbb0260401c5b600160231b821615612271576801000000058b90bfce0260401c5b600160221b82161561228c57680100000002c5c85fe30260401c5b600160211b8216156122a75768010000000162e42ff10260401c5b600160201b8216156122c257680100000000b17217f80260401c5b63800000008216156122dd5768010000000058b90bfc0260401c5b63400000008216156122f8576801000000002c5c85fe0260401c5b632000000082161561231357680100000000162e42ff0260401c5b631000000082161561232e576801000000000b17217f0260401c5b630800000082161561234957680100000000058b90c00260401c5b63040000008216156123645768010000000002c5c8600260401c5b630200000082161561237f576801000000000162e4300260401c5b630100000082161561239a5768010000000000b172180260401c5b628000008216156123b4576801000000000058b90c0260401c5b624000008216156123ce57680100000000002c5c860260401c5b622000008216156123e85768010000000000162e430260401c5b6210000082161561240257680100000000000b17210260401c5b6208000082161561241c5768010000000000058b910260401c5b62040000821615612436576801000000000002c5c80260401c5b6202000082161561245057680100000000000162e40260401c5b620100008216156124695761b172600160401b010260401c5b618000821615612481576158b9600160401b010260401c5b61400082161561249957612c5d600160401b010260401c5b6120008216156124b15761162e600160401b010260401c5b6110008216156124c957610b17600160401b010260401c5b6108008216156124e15761058c600160401b010260401c5b6104008216156124f9576102c6600160401b010260401c5b61020082161561251157610163600160401b010260401c5b6101008216156125285760b1600160401b010260401c5b608082161561253e576059600160401b010260401c5b604082161561255457602c600160401b010260401c5b602082161561256a576016600160401b010260401c5b601082161561258057600b600160401b010260401c5b6008821615612596576006600160401b010260401c5b60048216156125ac576003600160401b010260401c5b60028216156125c2576001600160401b010260401c5b60018216156125d8576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6125f76127a1565b6125ff6127a1565b60008361260d866001612a6e565b6126179190612a94565b61ffff169050600060018561ffff168361263191906128e6565b61263b919061294c565b905060005b600161264c83856128e6565b901c90508861265f61ffff881683612a44565b61ffff8110612670576126706129ec565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff16151591810182905295506126c7576126c08160016128e6565b9250612640565b8861ffff87166126d88360016128e6565b6126e29190612a44565b61ffff81106126f3576126f36129ec565b60408051606081018252919092015463ffffffff8082168352600160201b82046001600160d81b03166020840152600160f81b90910460ff161515928201929092528651909550898216911611801590819061275f5750846000015163ffffffff168963ffffffff1611155b1561276a5750612795565b806127815761277a60018361294c565b925061278f565b61278c8260016128e6565b93505b50612640565b50505094509492505050565b604080516060810182526000808252602082018190529181019190915290565b803563ffffffff81168114610ffa57600080fd5b600080604083850312156127e857600080fd5b6127f1836127c1565b91506127ff602084016127c1565b90509250929050565b60006020828403121561281a57600080fd5b5035919050565b6000806040838503121561283457600080fd5b50508035926020909101359150565b60006020828403121561285557600080fd5b813561ffff811681146110ed57600080fd5b60008060006060848603121561287c57600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b6000602082840312156128b957600080fd5b81356001600160a01b03811681146110ed57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156128f9576128f96128d0565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561294557600080fd5b5051919050565b60008282101561295e5761295e6128d0565b500390565b600063ffffffff83811690831681811015612980576129806128d0565b039392505050565b60008160001904831182151516156129a2576129a26128d0565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826129cc576129cc6129a7565b500490565b600061ffff83811690831681811015612980576129806128d0565b634e487b7160e01b600052603260045260246000fd5b60006001600160d81b0383811690831681811015612980576129806128d0565b600061ffff80831681811415612a3a57612a3a6128d0565b6001019392505050565b600082612a5357612a536129a7565b500690565b634e487b7160e01b600052602160045260246000fd5b600061ffff808316818516808303821115612a8b57612a8b6128d0565b01949350505050565b600061ffff80841680612aa957612aa96129a7565b9216919091069291505056fea26469706673582212200559d1c7fdeb1e6885a1d8d6a89c50a1e11839f6a5ae2262024f24d0ece7393c64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101495760003560e01c80631195082e1461014e578063163e9c4f1461018c57806317221ef11461019f57806322ff6568146101b257806324b18b17146101cc578063252c09d71461020057806325f258dd1461023f57806332148f6714610252578063414535281461026757806354124c641461027a5780636f307dc31461028d578063715018a6146102c15780637aa4db13146102c95780637cf2cc9f146102d15780638a6b8c5d146102da5780638da5cb5b146102e257806391aa375d146102ea57806393556dbd14610315578063bdb0509214610328578063c330c98d1461033b578063c7db359b1461034a578063e9d337b814610392578063efdf5d8b146103a7578063f2fde38b146103af578063f739670c146103c2578063f90ce5ba146103d5578063fe115fbe146103ed575b600080fd5b61017961015c3660046127d5565b600160209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61017961019a366004612808565b6103f5565b6101796101ad366004612808565b610407565b6101ba600581565b60405160ff9091168152602001610183565b620100055462010006546101e49163ffffffff169082565b6040805163ffffffff9093168352602083019190915201610183565b61021361020e366004612808565b610413565b6040805163ffffffff90941684526001600160d81b039092166020840152151590820152606001610183565b61017961024d366004612821565b61044d565b610265610260366004612843565b6104c3565b005b610179610275366004612821565b610548565b610179610288366004612867565b61055c565b6102b47f000000000000000000000000000000000000000000000000000000000000000081565b6040516101839190612893565b6102656105b1565b6102656105f5565b61017960025481565b6101e4610642565b6102b4610717565b6201000654620100055463ffffffff165b6040805192835263ffffffff909116602083015201610183565b610179610323366004612821565b610726565b610265610336366004612808565b6107b6565b610179670de0b6b3a764000081565b60035461036d9061ffff80821691620100008104821691600160201b9091041683565b6040805161ffff94851681529284166020840152921691810191909152606001610183565b62010007546102b4906001600160a01b031681565b61017961082a565b6102656103bd3660046128a7565b6108b2565b6101796103d0366004612821565b61094f565b620100035462010004546101e49163ffffffff169082565b6102fb610a59565b6000610401824261094f565b92915050565b60006104018242610726565b60048161ffff811061042457600080fd5b015463ffffffff81169150600160201b81046001600160d81b031690600160f81b900460ff1683565b60008061045a8484610e7c565b909250905080156104bc57600061047a670de0b6b3a76400008604610fba565b90506000610491670de0b6b3a76400008604610fba565b63ffffffff928316600090815260016020908152604080832095909316825293909352909120839055505b5092915050565b600354600160201b900461ffff1660006104df60048385610fff565b6003805461ffff808416600160201b810261ffff60201b19909316929092179092559192508316146105435760405161ffff821681527f8a96a9c4bca0fb28be0fc5c84e95aff121a64e2533021e9d638bdc1f03b14ece9060200160405180910390a15b505050565b60006105548383610e7c565b509392505050565b600080610568836110f4565b9050600061057e670de0b6b3a7640000866128e6565b9050600061058c828461110b565b905060006105998261114a565b90506105a58882611174565b98975050505050505050565b336105ba610717565b6001600160a01b0316146105e95760405162461bcd60e51b81526004016105e0906128fe565b60405180910390fd5b6105f36000611182565b565b60035461061a9061ffff80821691620100008104821691600160201b909104166111d2565b6003805463ffffffff19166201000061ffff9384160261ffff19161792909116919091179055565b620100075460405163386497fd60e01b815260009182916001600160a01b039091169063386497fd90610699907f000000000000000000000000000000000000000000000000000000000000000090600401612893565b60206040518083038186803b1580156106b157600080fd5b505afa1580156106c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e99190612933565b9050806107095760405163c34b693d60e01b815260040160405180910390fd5b610711610c29565b91509091565b6000546001600160a01b031690565b60008183111561076b5760405162461bcd60e51b815260206004820152601060248201526f4d69736f72646572656420646174657360801b60448201526064016105e0565b6000610777848461094f565b90506000610785858561294c565b9050600061079282611375565b9050600061079f826110f4565b90506107ab84826113c2565b979650505050505050565b336107bf610717565b6001600160a01b0316146107e55760405162461bcd60e51b81526004016105e0906128fe565b80600254146108275760028190556040518181527f88bd1242a1ad7dbba4967e0120324f17c382e4e3006e01dc3ffc0bf43e4b2a399060200160405180910390a15b50565b6000806000610837610642565b91509150610843610c29565b63ffffffff168263ffffffff161061085b5792915050565b600080610866610a59565b915091508063ffffffff16828561087b610c29565b6108859190612963565b63ffffffff166108959190612988565b61089f91906129bd565b6108a990846128e6565b94505050505090565b336108bb610717565b6001600160a01b0316146108e15760405162461bcd60e51b81526004016105e0906128fe565b6001600160a01b0381166109465760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e0565b61082781611182565b60008183111561098d5760405162461bcd60e51b815260206004820152600960248201526866726f6d203e20746f60b81b60448201526064016105e0565b8183141561099d57506000610401565b60006109a7610c29565b905060006109b485610fba565b905060006109c185610fba565b6003549091506000906109e5908590859061ffff8082169162010000900416611427565b600354909150600090610a09908690859061ffff8082169162010000900416611427565b905081811115610a4b576000610a3d676765c793fa10079d601b1b610a2e8486611673565b610a38919061294c565b611681565b965061040195505050505050565b600095505050505050610401565b600354600090819061ffff16816001821015610a8d57600354610a889060019062010000900461ffff166129d1565b610aa0565b600354610aa09060019061ffff166129d1565b60035490915060026201000090910461ffff1610801590610ae1575060048161ffff1661ffff8110610ad457610ad46129ec565b0154600160f81b900460ff165b8015610b3e575060048261ffff1661ffff8110610b0057610b006129ec565b0154600160201b90046001600160d81b0316600461ffff838116908110610b2957610b296129ec565b0154600160201b90046001600160d81b031611155b610b705760405162461bcd60e51b815260206004820152600360248201526204e45560ec1b60448201526064016105e0565b60048161ffff1661ffff8110610b8857610b886129ec565b0154600160201b90046001600160d81b0316600461ffff848116908110610bb157610bb16129ec565b0154610bcd9190600160201b90046001600160d81b0316612a02565b6001600160d81b0316935060048161ffff1661ffff8110610bf057610bf06129ec565b015463ffffffff16600461ffff808516908110610c0f57610c0f6129ec565b0154610c21919063ffffffff16612963565b925050509091565b6000610c3442610fba565b905090565b600080600061ffff855110610c795760405162461bcd60e51b81526004016105e0906020808252600490820152631350561560e21b604082015260600190565b8451845161ffff821614610cc45760405162461bcd60e51b8152602060048201526012602482015271098cadccee8d0e640daeae6e840dac2e8c6d60731b60448201526064016105e0565b60008161ffff1611610cfd5760405162461bcd60e51b81526020600482015260026024820152610c1560f21b60448201526064016105e0565b6000805b8261ffff168161ffff161015610e5d57878161ffff1681518110610d2757610d276129ec565b602002602001015163ffffffff168263ffffffff1610610d7b5760405162461bcd60e51b815260206004820152600f60248201526e1a5b9c1d5d081d5b9bdc99195c9959608a1b60448201526064016105e0565b610dbf888261ffff1681518110610d9457610d946129ec565b6020026020010151888361ffff1681518110610db257610db26129ec565b602002602001015161170d565b898261ffff1661ffff8110610dd657610dd66129ec565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff9094169390931717929092161790558751889061ffff8316908110610e4057610e406129ec565b602002602001015191508080610e5590612a22565b915050610d01565b508180610e6b6001826129d1565b945094509450505093509350939050565b60008080610e93670de0b6b3a76400008604610fba565b90506000610eaa670de0b6b3a76400008604610fba565b905060008263ffffffff16118015610ec8575060008163ffffffff16115b610efc5760405162461bcd60e51b8152602060048201526005602482015264554e49545360d81b60448201526064016105e0565b63ffffffff80831660009081526001602090815260408083209385168352929052205415610f525763ffffffff808316600090815260016020908152604080832093851683529290529081205494509250610fb1565b8063ffffffff16610f61610c29565b63ffffffff1610610f8d57610f828263ffffffff168263ffffffff1661094f565b935060019250610fb1565b610faa8263ffffffff16610f9f610c29565b63ffffffff1661094f565b9350600092505b50509250929050565b8063ffffffff81168114610ffa5760405162461bcd60e51b815260206004820152600760248201526654534f464c4f5760c81b60448201526064016105e0565b919050565b6000808361ffff16116110385760405162461bcd60e51b81526020600482015260016024820152604960f81b60448201526064016105e0565b61ffff8261ffff161061107c5760405162461bcd60e51b815260206004820152600c60248201526b189d5999995c881b1a5b5a5d60a21b60448201526064016105e0565b8261ffff168261ffff16116110925750816110ed565b825b8261ffff168161ffff1610156110e8576001858261ffff1661ffff81106110bd576110bd6129ec565b01805463ffffffff191663ffffffff92909216919091179055806110e081612a22565b915050611094565b508190505b9392505050565b6000610401826a1a1601fc4ea7109e000000611785565b60008261113057811561111f576000611129565b670de0b6b3a76400005b9050610401565b6110ed61114561113f8561179a565b8461184a565b611856565b60008061116a670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6110ed9084612988565b60006110ed8383600161189c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060048661ffff1661ffff81106111ef576111ef6129ec565b60408051606081018252929091015463ffffffff811683526001600160d81b03600160201b820416602084015260ff600160f81b90910416151590820152905060008061123a610642565b60025485519294509092506112549163ffffffff166128e6565b8263ffffffff16101561126f5787879450945050505061136d565b7f5aec68e6980e788266f2f59f6fddb85f3e256ce6da46fdfab920b9b06aaa737561129861194f565b6040805191825230602083015261ffff8b81168383015263ffffffff86166060840152608083018590528a811660a0840152891660c0830152519081900360e00190a162010004546112ea904361294c565b6201000655620100035463ffffffff16611302610c29565b61130c9190612963565b62010005805463ffffffff191663ffffffff92909216919091179055436201000455611336610c29565b62010003805463ffffffff191663ffffffff928316179055611365906004908a90859085908c908c9061195a16565b945094505050505b935093915050565b60007812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218211156113b457604051633492ffd960e01b8152600481018390526024016105e0565b50670de0b6b3a76400000290565b6000826113d157506000610401565b60006113e66113e06001611375565b84611785565b90506000611408856113f86001611375565b61140291906128e6565b8361110b565b90506114146001611375565b61141e908261294c565b95945050505050565b60008363ffffffff168563ffffffff16101561145657604051632ff198e560e21b815260040160405180910390fd5b8363ffffffff168563ffffffff1614156114fe576114726127a1565b60048461ffff1661ffff811061148a5761148a6129ec565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff16151593830193909352909250908716146114e7576114e061082a565b91506114f8565b80602001516001600160d81b031691505b5061166b565b600061150861082a565b905060008061151c6004888a868a8a611aa2565b91509150816000015163ffffffff168763ffffffff16141561154d5781602001516001600160d81b03169350611667565b805163ffffffff888116911614156115745780602001516001600160d81b03169350611667565b600082602001516001600160d81b031682602001516001600160d81b031611156115e3576000676765c793fa10079d601b1b6115ca84602001516001600160d81b031686602001516001600160d81b0316611673565b6115d4919061294c565b90506115df81611681565b9150505b8251825160009161161691670de0b6b3a76400009161160191612963565b63ffffffff166116119190612988565b6110f4565b9050600061162483836113c2565b905061166185602001516001600160d81b031682670de0b6b3a764000088600001518e6116519190612963565b63ffffffff166102889190612988565b96505050505b5050505b949350505050565b60006110ed83836001611c54565b6000806116a1670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6116ab90846129bd565b905060026116cc670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6116d691906129bd565b6116f3670de0b6b3a7640000676765c793fa10079d601b1b6129bd565b6116fd9085612a44565b10610401576110ed6001826128e6565b6117156127a1565b6001600160d81b038211156117555760405162461bcd60e51b81526004016105e0906020808252600490820152631f19189b60e11b604082015260600190565b506040805160608101825263ffffffff9390931683526001600160d81b0391909116602083015260019082015290565b60006110ed83670de0b6b3a764000084611cef565b6000670de0b6b3a76400008210156117c857604051633621413760e21b8152600481018390526024016105e0565b60006117dd670de0b6b3a76400008404611dbd565b670de0b6b3a7640000808202935090915083821c90811415611800575050919050565b6706f05b59d3b200005b801561184257670de0b6b3a7640000828002049150671bc16d674ec80000821061183a579283019260019190911c905b60011c61180a565b505050919050565b60006110ed8383611e9b565b6000680a688906bd8b000000821061188457604051634a4f26f160e01b8152600481018390526024016105e0565b670de0b6b3a7640000604083901b046110ed81611f5d565b60008315806118a9575082155b156118b6575060006110ed565b60018260018111156118ca576118ca612a58565b146118dd57670de0b6b3a76400006118ea565b676765c793fa10079d601b1b5b60018360018111156118fe576118fe612a58565b1461191b576119166002670de0b6b3a76400006129bd565b611931565b6119316002676765c793fa10079d601b1b6129bd565b61193b8587612988565b61194591906128e6565b61166b91906129bd565b6000610c3442611375565b6000806000888861ffff1661ffff8110611976576119766129ec565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff1615159383019390935290925090881614156119d15787859250925050611a97565b8461ffff168461ffff161180156119f957506119ee6001866129d1565b61ffff168861ffff16145b15611a0657839150611a0a565b8491505b81611a16896001612a6e565b611a209190612a94565b9250611a2c878761170d565b898461ffff1661ffff8110611a4357611a436129ec565b82519101805460208401516040909401511515600160f81b026001600160f81b036001600160d81b03909516600160201b026001600160f81b031990921663ffffffff909416939093171792909216179055505b965096945050505050565b611aaa6127a1565b611ab26127a1565b878461ffff1661ffff8110611ac957611ac96129ec565b60408051606081018252919092015463ffffffff808216808452600160201b83046001600160d81b03166020850152600160f81b90920460ff1615159383019390935290935090881610611b48578663ffffffff16826000015163ffffffff161415611b3457611a97565b81611b3f878761170d565b91509150611a97565b8783611b55866001612a6e565b611b5f9190612a94565b61ffff1661ffff8110611b7457611b746129ec565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181018290529250611bf95760408051606081018252895463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff1615159181019190915291505b815163ffffffff80891691161115611c395760405162461bcd60e51b815260206004820152600360248201526213d31160ea1b60448201526064016105e0565b611c45888886866125ef565b91509150965096945050505050565b600082611c8c5760405162461bcd60e51b81526004016105e0906020808252600490820152630444956360e41b604082015260600190565b6000611c996002856129bd565b905083816001856001811115611cb157611cb1612a58565b14611cc457670de0b6b3a7640000611cd1565b676765c793fa10079d601b1b5b611cdb9088612988565b611ce591906128e6565b61141e91906129bd565b600080806000198587098587029250828110838203039150508060001415611d2a57838281611d2057611d206129a7565b04925050506110ed565b838110611d5457604051631dcf306360e21b815260048101829052602481018590526044016105e0565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6000600160801b8210611ddd57608091821c91611dda90826128e6565b90505b600160401b8210611dfb57604091821c91611df890826128e6565b90505b600160201b8210611e1957602091821c91611e1690826128e6565b90505b620100008210611e3657601091821c91611e3390826128e6565b90505b6101008210611e5257600891821c91611e4f90826128e6565b90505b60108210611e6d57600491821c91611e6a90826128e6565b90505b60048210611e8857600291821c91611e8590826128e6565b90505b60028210610ffa576104016001826128e6565b60008080600019848609848602925082811083820303915050670de0b6b3a76400008110611edf5760405163698d9a0160e11b8152600481018290526024016105e0565b600080670de0b6b3a76400008688099150506706f05b59d3b1ffff811182611f195780670de0b6b3a7640000850401945050505050610401565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b821615611f7d5768016a09e667f3bcc9090260401c5b6001603e1b821615611f98576801306fe0a31b7152df0260401c5b6001603d1b821615611fb3576801172b83c7d517adce0260401c5b6001603c1b821615611fce5768010b5586cf9890f62a0260401c5b6001603b1b821615611fe9576801059b0d31585743ae0260401c5b6001603a1b82161561200457680102c9a3e778060ee70260401c5b600160391b82161561201f5768010163da9fb33356d80260401c5b600160381b82161561203a57680100b1afa5abcbed610260401c5b600160371b8216156120555768010058c86da1c09ea20260401c5b600160361b821615612070576801002c605e2e8cec500260401c5b600160351b82161561208b57680100162f3904051fa10260401c5b600160341b8216156120a6576801000b175effdc76ba0260401c5b600160331b8216156120c157680100058ba01fb9f96d0260401c5b600160321b8216156120dc5768010002c5cc37da94920260401c5b600160311b8216156120f7576801000162e525ee05470260401c5b600160301b8216156121125768010000b17255775c040260401c5b6001602f1b82161561212d576801000058b91b5bc9ae0260401c5b6001602e1b82161561214857680100002c5c89d5ec6d0260401c5b6001602d1b8216156121635768010000162e43f4f8310260401c5b6001602c1b82161561217e57680100000b1721bcfc9a0260401c5b6001602b1b8216156121995768010000058b90cf1e6e0260401c5b6001602a1b8216156121b4576801000002c5c863b73f0260401c5b600160291b8216156121cf57680100000162e430e5a20260401c5b600160281b8216156121ea576801000000b1721835510260401c5b600160271b82161561220557680100000058b90c0b490260401c5b600160261b8216156122205768010000002c5c8601cc0260401c5b600160251b82161561223b576801000000162e42fff00260401c5b600160241b8216156122565768010000000b17217fbb0260401c5b600160231b821615612271576801000000058b90bfce0260401c5b600160221b82161561228c57680100000002c5c85fe30260401c5b600160211b8216156122a75768010000000162e42ff10260401c5b600160201b8216156122c257680100000000b17217f80260401c5b63800000008216156122dd5768010000000058b90bfc0260401c5b63400000008216156122f8576801000000002c5c85fe0260401c5b632000000082161561231357680100000000162e42ff0260401c5b631000000082161561232e576801000000000b17217f0260401c5b630800000082161561234957680100000000058b90c00260401c5b63040000008216156123645768010000000002c5c8600260401c5b630200000082161561237f576801000000000162e4300260401c5b630100000082161561239a5768010000000000b172180260401c5b628000008216156123b4576801000000000058b90c0260401c5b624000008216156123ce57680100000000002c5c860260401c5b622000008216156123e85768010000000000162e430260401c5b6210000082161561240257680100000000000b17210260401c5b6208000082161561241c5768010000000000058b910260401c5b62040000821615612436576801000000000002c5c80260401c5b6202000082161561245057680100000000000162e40260401c5b620100008216156124695761b172600160401b010260401c5b618000821615612481576158b9600160401b010260401c5b61400082161561249957612c5d600160401b010260401c5b6120008216156124b15761162e600160401b010260401c5b6110008216156124c957610b17600160401b010260401c5b6108008216156124e15761058c600160401b010260401c5b6104008216156124f9576102c6600160401b010260401c5b61020082161561251157610163600160401b010260401c5b6101008216156125285760b1600160401b010260401c5b608082161561253e576059600160401b010260401c5b604082161561255457602c600160401b010260401c5b602082161561256a576016600160401b010260401c5b601082161561258057600b600160401b010260401c5b6008821615612596576006600160401b010260401c5b60048216156125ac576003600160401b010260401c5b60028216156125c2576001600160401b010260401c5b60018216156125d8576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b6125f76127a1565b6125ff6127a1565b60008361260d866001612a6e565b6126179190612a94565b61ffff169050600060018561ffff168361263191906128e6565b61263b919061294c565b905060005b600161264c83856128e6565b901c90508861265f61ffff881683612a44565b61ffff8110612670576126706129ec565b60408051606081018252919092015463ffffffff81168252600160201b81046001600160d81b03166020830152600160f81b900460ff16151591810182905295506126c7576126c08160016128e6565b9250612640565b8861ffff87166126d88360016128e6565b6126e29190612a44565b61ffff81106126f3576126f36129ec565b60408051606081018252919092015463ffffffff8082168352600160201b82046001600160d81b03166020840152600160f81b90910460ff161515928201929092528651909550898216911611801590819061275f5750846000015163ffffffff168963ffffffff1611155b1561276a5750612795565b806127815761277a60018361294c565b925061278f565b61278c8260016128e6565b93505b50612640565b50505094509492505050565b604080516060810182526000808252602082018190529181019190915290565b803563ffffffff81168114610ffa57600080fd5b600080604083850312156127e857600080fd5b6127f1836127c1565b91506127ff602084016127c1565b90509250929050565b60006020828403121561281a57600080fd5b5035919050565b6000806040838503121561283457600080fd5b50508035926020909101359150565b60006020828403121561285557600080fd5b813561ffff811681146110ed57600080fd5b60008060006060848603121561287c57600080fd5b505081359360208301359350604090920135919050565b6001600160a01b0391909116815260200190565b6000602082840312156128b957600080fd5b81356001600160a01b03811681146110ed57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156128f9576128f96128d0565b500190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561294557600080fd5b5051919050565b60008282101561295e5761295e6128d0565b500390565b600063ffffffff83811690831681811015612980576129806128d0565b039392505050565b60008160001904831182151516156129a2576129a26128d0565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826129cc576129cc6129a7565b500490565b600061ffff83811690831681811015612980576129806128d0565b634e487b7160e01b600052603260045260246000fd5b60006001600160d81b0383811690831681811015612980576129806128d0565b600061ffff80831681811415612a3a57612a3a6128d0565b6001019392505050565b600082612a5357612a536129a7565b500690565b634e487b7160e01b600052602160045260246000fd5b600061ffff808316818516808303821115612a8b57612a8b6128d0565b01949350505050565b600061ffff80841680612aa957612aa96129a7565b9216919091069291505056fea26469706673582212200559d1c7fdeb1e6885a1d8d6a89c50a1e11839f6a5ae2262024f24d0ece7393c64736f6c63430008090033",
  "devdoc": {
    "errors": {
      "AavePoolGetReserveNormalizedIncomeReturnedZero()": [
        {
          "details": "getReserveNormalizedIncome() returned zero for underlying asset. Oracle only supports active Aave-V2 assets."
        }
      ],
      "AavePoolGetReserveNormalizedVariableDebtReturnedZero()": [
        {
          "details": "getReserveNormalizedVariableDebt() returned zero for underlying asset. Oracle only supports active Aave-V2 assets."
        }
      ],
      "CTokenExchangeRateReturnedZero()": [
        {
          "details": "ctoken.exchangeRateStored() returned zero for a given Compound ctoken. Oracle only supports active Compound assets."
        }
      ],
      "CanOnlyTradeIfUnlocked(bool)": [
        {
          "details": "Error which ensures the VAMM is unlocked"
        }
      ],
      "ExpectedOppositeSigns(int256,int256)": [
        {
          "details": "The two values were expected to have oppostite sigs, but do not"
        }
      ],
      "ExpectedSqrtPriceZeroBeforeInit(uint160)": [
        {
          "details": "Error which is reverted if the sqrt price of the vamm is non-zero before a vamm is initialized"
        }
      ],
      "IRSNotionalAmountSpecifiedMustBeNonZero()": [
        {
          "details": "Error which ensures the amount of notional specified when initiating an IRS contract (via the swap function in the vamm) is non-zero"
        }
      ],
      "LidoGetPooledEthBySharesReturnedZero()": [
        {
          "details": "getPooledEthByShares() returned zero for Lido's stETH."
        }
      ],
      "LiquidityDeltaMustBePositiveInBurn(uint128)": [
        {
          "details": "Error which ensures the liquidity delta is positive if a given LP wishes to burn liquidity in the vamm"
        }
      ],
      "LiquidityDeltaMustBePositiveInMint(uint128)": [
        {
          "details": "Error which ensures the liquidity delta is positive if a given LP wishes to mint further liquidity in the vamm"
        }
      ],
      "MarginLessThanMinimum(int256)": [
        {
          "details": "Cannot have less margin than the minimum requirement"
        }
      ],
      "NotEnoughFunds(uint256,uint256)": [
        {
          "details": "There are not enough funds available for the requested operation"
        }
      ],
      "OOO()": [
        {
          "details": "currentTime < queriedTime"
        }
      ],
      "OnlyMarginEngine()": [
        {
          "details": "only the margin engine can run a certain function"
        }
      ],
      "PositionNetZero()": [
        {
          "details": "No need to unwind a net zero position"
        }
      ],
      "PositionNotSettled()": [
        {
          "details": "Position must be settled after AMM has reached maturity"
        }
      ],
      "RocketPoolGetEthValueReturnedZero()": [
        {
          "details": "getEthValue() returned zero for RocketPool's RETH."
        }
      ],
      "WithdrawalExceedsCurrentMargin()": [
        {
          "details": "We can't withdraw more margin than we have"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getApyFrom(uint256)": {
        "details": "Reverts if we have no data point for `from`",
        "params": {
          "from": "The timestamp of the start of the period, in seconds"
        },
        "returns": {
          "apyFromToWad": "The \"floating rate\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16"
        }
      },
      "getApyFromTo(uint256,uint256)": {
        "details": "Reverts if we have no data point for either timestamp",
        "params": {
          "from": "The timestamp of the start of the period, in seconds",
          "to": "The timestamp of the end of the period, in seconds"
        },
        "returns": {
          "apyFromToWad": "The \"floating rate\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16"
        }
      },
      "getCurrentRateInRay()": {
        "details": "For convenience, the rate is normalised to Ray for storage, so that we can perform consistent math across all rates.This function should revert if a valid rate cannot be discerned",
        "returns": {
          "currentRate": "the rate in Ray (decimal scaled up by 10^27 for storage in a uint256)"
        }
      },
      "getLastUpdatedRate()": {
        "details": "FOr convenience, the rate is normalised to Ray for storage, so that we can perform consistent math across all rates.This function should revert if a valid rate cannot be discerned",
        "returns": {
          "resultRay": "the rate in Ray (decimal scaled up by 10^27 for storage in a uint256)",
          "timestamp": "the timestamp corresponding to the known rate (could be the current time, or a time in the past)"
        }
      },
      "getRateFrom(uint256)": {
        "details": "Reverts if we have no data point for `_from`",
        "params": {
          "_from": "The timestamp of the start of the period, in seconds"
        },
        "returns": {
          "_0": "The \"floating rate\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16"
        }
      },
      "getRateFromTo(uint256,uint256)": {
        "details": "Reverts if we have no data point for either timestamp",
        "params": {
          "_from": "The timestamp of the start of the period, in seconds",
          "_to": "The timestamp of the end of the period, in seconds"
        },
        "returns": {
          "_0": "The \"floating rate\" expressed in Wad, e.g. 4% is encoded as 0.04*10**18 = 4*10**16"
        }
      },
      "increaseObservationCardinalityNext(uint16)": {
        "details": "This method is no-op if the RateOracle already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
        "params": {
          "rateCardinalityNext": "The desired minimum number of observations for the pool to store"
        }
      },
      "interpolateRateValue(uint256,uint256,uint256)": {
        "details": "Given [beforeOrAt, atOrAfter] where the timestamp for which the counterfactual is calculated is within that range (but does not touch any of the bounds)We can calculate the apy for [beforeOrAt, atOrAfter] --> refer to this value as apyFromBeforeOrAtToAtOrAfterThen we want a counterfactual rate value which results in apy_before_after if the apy is calculated between [beforeOrAt, timestampForCounterfactual]Hence (1+rateValueWei/beforeOrAtRateValueWei)^(1/timeInYears) = apyFromBeforeOrAtToAtOrAfterHence rateValueWei = beforeOrAtRateValueWei * (1+apyFromBeforeOrAtToAtOrAfter)^timeInYears - 1)",
        "params": {
          "apyFromBeforeOrAtToAtOrAfterWad": "Apy in the period between the timestamp of the beforeOrAt Rate and the atOrAfter Rate",
          "beforeOrAtRateValueRay": "Rate Value (in ray) before the timestamp for which we want to calculate the counterfactual rate value",
          "timeDeltaBeforeOrAtToQueriedTimeWad": "Time Delta (in wei seconds) between the timestamp of the beforeOrAt Rate and the atOrAfter Rate"
        },
        "returns": {
          "rateValueRay": "Counterfactual (interpolated) rate value in ray"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMinSecondsSinceLastUpdate(uint256)": {
        "details": "Can only be set by the Factory Owner"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "variableFactor(uint256,uint256)": {
        "details": "If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). Term end timestamps are cached for quick retrieval later.If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());if queried before maturity then returns the rate of return between pool initiation and current timestamp (in wad)if queried after maturity then returns the rate of return between pool initiation and maturity timestamp (in wad)",
        "returns": {
          "resultWad": "The variable factor"
        }
      },
      "variableFactorNoCache(uint256,uint256)": {
        "details": "If the current block timestamp is beyond the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp, termEndTimestamp). No caching takes place.If the current block timestamp is before the maturity of the AMM, then the variableFactor is getRateFromTo(termStartTimestamp,Time.blockTimestampScaled());",
        "returns": {
          "resultWad": "The variable factor"
        }
      }
    },
    "stateVariables": {
      "UNDERLYING_YIELD_BEARING_PROTOCOL_ID": {
        "return": "yieldBearingProtocolID unique id of the underlying yield bearing protocol",
        "returns": {
          "_0": "yieldBearingProtocolID unique id of the underlying yield bearing protocol"
        }
      },
      "aaveLendingPool": {
        "return": "Address of the Aave Lending Pool",
        "returns": {
          "_0": "Address of the Aave Lending Pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotLiquidate()": [
        {
          "notice": "The position/trader needs to be below the liquidation threshold to be liquidated"
        }
      ],
      "CannotSettleBeforeMaturity()": [
        {
          "notice": "Positions and Traders cannot be settled before the applicable interest rate swap has matured"
        }
      ],
      "InvalidMarginDelta()": [
        {
          "notice": "Margin delta must not equal zero"
        }
      ],
      "MarginRequirementNotMet(int256,int24,int256,int256,uint256,int256)": [
        {
          "notice": "The resulting margin does not meet minimum requirements"
        }
      ],
      "MarginRequirementNotMetFCM(int256)": [
        {
          "notice": "The resulting margin does not meet minimum requirements"
        }
      ],
      "OnlyOwnerCanUpdatePosition()": [
        {
          "notice": "Only the position/trade owner can update the LP/Trader margin"
        }
      ],
      "PRBMathUD60x18__Exp2InputTooBig(uint256)": [
        {
          "notice": "Emitted when the input is greater than 192."
        }
      ],
      "PRBMathUD60x18__FromUintOverflow(uint256)": [
        {
          "notice": "Emitted when converting a basic integer to the fixed-point format format overflows UD60x18."
        }
      ],
      "PRBMathUD60x18__LogInputTooSmall(uint256)": [
        {
          "notice": "Emitted when the input is less than 1."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "events": {
      "RateCardinalityNext(uint16)": {
        "notice": "Emitted by the rate oracle for increases to the number of observations that can be stored"
      }
    },
    "kind": "user",
    "methods": {
      "UNDERLYING_YIELD_BEARING_PROTOCOL_ID()": {
        "notice": "unique ID of the underlying yield bearing protocol (e.g. Aave v2 has id 1)"
      },
      "aaveLendingPool()": {
        "notice": "Gets the address of the Aave Lending Pool"
      },
      "getApyFrom(uint256)": {
        "notice": "Calculates the observed APY returned by the rate oracle between the given timestamp and the current time"
      },
      "getApyFromTo(uint256,uint256)": {
        "notice": "Calculates the observed APY returned by the rate oracle in a given period"
      },
      "getBlockSlope()": {
        "notice": "returns the last change in block number and timestamp  Some implementations may use this data to estimate timestamps for recent rate readings, if we only know the block number"
      },
      "getCurrentRateInRay()": {
        "notice": "Get the current \"rate\" in Ray at the current timestamp. This might be a direct reading if real-time readings are available, or it might be an extrapolation from recent known rates. The source and expected values of \"rate\" may differ by rate oracle type. All that matters is that we can divide one \"rate\" by another \"rate\" to get the factor of growth between the two timestamps. For example if we have rates of { (t=0, rate=5), (t=100, rate=5.5) }, we can divide 5.5 by 5 to get a growth factor of 1.1, suggesting that 10% growth in capital was experienced between timesamp 0 and timestamp 100."
      },
      "getLastRateSlope()": {
        "notice": "returns the last change in rate and time Gets the last two observations and returns the change in rate and time. This can help us to extrapolate an estiamte of the current rate from recent known rates. "
      },
      "getLastUpdatedRate()": {
        "notice": "Get the last updated rate in Ray with the accompanying truncated timestamp This data point must be a known data point from the source of the data, and not extrapolated or interpolated by us. The source and expected values of \"rate\" may differ by rate oracle type. All that matters is that we can divide one \"rate\" by another \"rate\" to get the factor of growth between the two timestamps. For example if we have rates of { (t=0, rate=5), (t=100, rate=5.5) }, we can divide 5.5 by 5 to get a growth factor of 1.1, suggesting that 10% growth in capital was experienced between timesamp 0 and timestamp 100."
      },
      "getRateFrom(uint256)": {
        "notice": "Calculates the observed interest returned by the underlying in a given period"
      },
      "getRateFromTo(uint256,uint256)": {
        "notice": "Calculates the observed interest returned by the underlying in a given period"
      },
      "increaseObservationCardinalityNext(uint16)": {
        "notice": "Increase the maximum number of rates observations that this RateOracle will store"
      },
      "interpolateRateValue(uint256,uint256,uint256)": {
        "notice": "Calculates the interpolated (counterfactual) rate value"
      },
      "observations(uint256)": {
        "notice": "the observations tracked over time by this oracle"
      },
      "setMinSecondsSinceLastUpdate(uint256)": {
        "notice": "Sets minSecondsSinceLastUpdate: The minimum number of seconds that need to pass since the last update to the rates array"
      },
      "settlementRateCache(uint32,uint32)": {
        "notice": "a cache of settlement rates for interest rate swaps associated with this rate oracle, indexed by start time and then end time"
      },
      "underlying()": {
        "notice": "Gets the address of the underlying token of the RateOracle"
      },
      "variableFactor(uint256,uint256)": {
        "notice": "Gets the variable factor between termStartTimestamp and termEndTimestamp"
      },
      "variableFactorNoCache(uint256,uint256)": {
        "notice": "Gets the variable factor between termStartTimestamp and termEndTimestamp"
      },
      "writeOracleEntry()": {
        "notice": "Writes a rate observation to the rates array given the current rate cardinality, rate index and rate cardinality next Write oracle entry is called whenever a new position is minted via the vamm or when a swap is initiated via the vamm That way the gas costs of Rate Oracle updates can be distributed across organic interactions with the protocol"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1143,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 19393,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "settlementRateCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint32,t_mapping(t_uint32,t_uint256))"
      },
      {
        "astId": 19422,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "minSecondsSinceLastUpdate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 19425,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "oracleVars",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(OracleVars)19403_storage"
      },
      {
        "astId": 19431,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "observations",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Observation)20928_storage)65535_storage"
      },
      {
        "astId": 19434,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "lastUpdatedBlock",
        "offset": 0,
        "slot": "65539",
        "type": "t_struct(BlockInfo)19408_storage"
      },
      {
        "astId": 19437,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "currentBlockSlope",
        "offset": 0,
        "slot": "65541",
        "type": "t_struct(BlockSlopeInfo)19413_storage"
      },
      {
        "astId": 19163,
        "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
        "label": "aaveLendingPool",
        "offset": 0,
        "slot": "65543",
        "type": "t_contract(IAaveV2LendingPool)17479"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Observation)20928_storage)65535_storage": {
        "base": "t_struct(Observation)20928_storage",
        "encoding": "inplace",
        "label": "struct OracleBuffer.Observation[65535]",
        "numberOfBytes": "2097120"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveV2LendingPool)17479": {
        "encoding": "inplace",
        "label": "contract IAaveV2LendingPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint32,t_mapping(t_uint32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => mapping(uint32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_uint256)"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(BlockInfo)19408_storage": {
        "encoding": "inplace",
        "label": "struct BaseRateOracle.BlockInfo",
        "members": [
          {
            "astId": 19405,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 19407,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BlockSlopeInfo)19413_storage": {
        "encoding": "inplace",
        "label": "struct BaseRateOracle.BlockSlopeInfo",
        "members": [
          {
            "astId": 19410,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "timeChange",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 19412,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "blockChange",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Observation)20928_storage": {
        "encoding": "inplace",
        "label": "struct OracleBuffer.Observation",
        "members": [
          {
            "astId": 20922,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "blockTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 20925,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "observedValue",
            "offset": 4,
            "slot": "0",
            "type": "t_uint216"
          },
          {
            "astId": 20927,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "initialized",
            "offset": 31,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(OracleVars)19403_storage": {
        "encoding": "inplace",
        "label": "struct BaseRateOracle.OracleVars",
        "members": [
          {
            "astId": 19396,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "rateIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 19399,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "rateCardinality",
            "offset": 2,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 19402,
            "contract": "contracts/rate_oracles/AaveBorrowRateOracle.sol:AaveBorrowRateOracle",
            "label": "rateCardinalityNext",
            "offset": 4,
            "slot": "0",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}